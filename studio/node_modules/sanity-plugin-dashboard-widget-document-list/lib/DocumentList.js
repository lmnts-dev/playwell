'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _router = require('part:@sanity/base/router');

var _preview = require('part:@sanity/base/preview');

var _preview2 = _interopRequireDefault(_preview);

var _spinner = require('part:@sanity/components/loading/spinner');

var _spinner2 = _interopRequireDefault(_spinner);

var _schema = require('part:@sanity/base/schema');

var _schema2 = _interopRequireDefault(_schema);

var _intent = require('part:@sanity/components/buttons/intent');

var _intent2 = _interopRequireDefault(_intent);

var _default = require('part:@sanity/components/lists/default');

var _lodash = require('lodash');

var _sanityConnector = require('./sanityConnector');

var _DocumentList = require('./DocumentList.css');

var _DocumentList2 = _interopRequireDefault(_DocumentList);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } /* eslint-disable complexity */


var schemaTypeNames = _schema2.default.getTypeNames();

var DocumentList = function (_React$Component) {
  _inherits(DocumentList, _React$Component);

  function DocumentList() {
    var _ref;

    var _temp, _this, _ret;

    _classCallCheck(this, DocumentList);

    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    return _ret = (_temp = (_this = _possibleConstructorReturn(this, (_ref = DocumentList.__proto__ || Object.getPrototypeOf(DocumentList)).call.apply(_ref, [this].concat(args))), _this), _this.state = {
      documents: null,
      loading: true,
      error: null
    }, _this.componentDidMount = function () {
      var _this$props = _this.props,
          query = _this$props.query,
          limit = _this$props.limit;

      var _this$assembleQuery = _this.assembleQuery(),
          assembledQuery = _this$assembleQuery.assembledQuery,
          params = _this$assembleQuery.params;

      if (!assembledQuery) {
        return;
      }

      _this.unsubscribe();
      _this.subscription = (0, _sanityConnector.getSubscription)(assembledQuery, params).subscribe({
        next: function next(documents) {
          return _this.setState({ documents: documents.slice(0, limit), loading: false });
        },
        error: function error(_error) {
          return _this.setState({ error: _error, query: query, loading: false });
        }
      });
    }, _this.assembleQuery = function () {
      var _this$props2 = _this.props,
          query = _this$props2.query,
          queryParams = _this$props2.queryParams,
          types = _this$props2.types,
          order = _this$props2.order,
          limit = _this$props2.limit;

      if (query) {
        return { assembledQuery: query, params: queryParams };
      }

      var documentTypes = schemaTypeNames.filter(function (typeName) {
        var schemaType = _schema2.default.get(typeName);
        return schemaType.type && schemaType.type.name === 'document';
      });

      return {
        assembledQuery: '*[_type in $types] | order(' + order + ') [0...' + limit * 2 + ']',
        params: { types: types ? (0, _lodash.intersection)(types, documentTypes) : documentTypes }
      };
    }, _temp), _possibleConstructorReturn(_this, _ret);
  }

  _createClass(DocumentList, [{
    key: 'componentWillUnmount',
    value: function componentWillUnmount() {
      this.unsubscribe();
    }
  }, {
    key: 'unsubscribe',
    value: function unsubscribe() {
      if (this.subscription) {
        this.subscription.unsubscribe();
      }
    }
  }, {
    key: 'render',
    value: function render() {
      var _props = this.props,
          title = _props.title,
          types = _props.types;
      var _state = this.state,
          documents = _state.documents,
          loading = _state.loading,
          error = _state.error;


      return _react2.default.createElement(
        'div',
        { className: _DocumentList2.default.container },
        _react2.default.createElement(
          'header',
          { className: _DocumentList2.default.header },
          _react2.default.createElement(
            'h2',
            { className: _DocumentList2.default.title },
            title
          )
        ),
        _react2.default.createElement(
          'div',
          { className: _DocumentList2.default.content },
          error && _react2.default.createElement(
            'div',
            null,
            error.message
          ),
          !error && loading && _react2.default.createElement(_spinner2.default, { center: true, message: 'Loading...' }),
          !error && !documents && !loading && _react2.default.createElement(
            'div',
            null,
            'Could not locate any documents :/'
          ),
          _react2.default.createElement(
            _default.List,
            null,
            documents && documents.map(function (doc) {
              var type = _schema2.default.get(doc._type);
              return _react2.default.createElement(
                _default.Item,
                { key: doc._id },
                _react2.default.createElement(
                  _router.IntentLink,
                  {
                    intent: 'edit',
                    params: {
                      type: doc._type,
                      id: doc._id
                    },
                    className: _DocumentList2.default.link
                  },
                  _react2.default.createElement(_preview2.default, { layout: 'default', type: type, value: doc, key: doc._id })
                )
              );
            })
          )
        ),
        types && types.length === 1 && _react2.default.createElement(
          'div',
          { className: _DocumentList2.default.footer },
          _react2.default.createElement(
            _intent2.default,
            { bleed: true, color: 'primary', kind: 'simple', intent: 'create', params: { type: types[0] } },
            'Create new ',
            types[0]
          )
        )
      );
    }
  }]);

  return DocumentList;
}(_react2.default.Component);

DocumentList.propTypes = {
  title: _propTypes2.default.string,
  types: _propTypes2.default.arrayOf(_propTypes2.default.string),
  query: _propTypes2.default.string,
  queryParams: _propTypes2.default.object, // eslint-disable-line react/forbid-prop-types
  order: _propTypes2.default.string,
  limit: _propTypes2.default.number
};
DocumentList.defaultProps = {
  title: 'Last created',
  order: '_createdAt desc',
  limit: 10,
  types: null,
  query: null,
  queryParams: {}
};
exports.default = DocumentList;