'use strict';

var _rxjs = require('rxjs');

var _operators = require('rxjs/operators');

var _lodash = require('lodash');

var _client = require('part:@sanity/base/client');

var _client2 = _interopRequireDefault(_client);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var draftId = function draftId(nonDraftDoc) {
  return 'drafts.' + nonDraftDoc._id;
};

var prepareDocumentList = function prepareDocumentList(incoming) {
  if (!incoming) {
    return Promise.resolve([]);
  }
  var documents = Array.isArray(incoming) ? incoming : [incoming];

  var ids = documents.filter(function (doc) {
    return !doc._id.startsWith('draft.');
  }).map(draftId);

  return _client2.default.fetch('*[_id in $ids]', { ids: ids }).then(function (drafts) {
    var outgoing = documents.map(function (doc) {
      var foundDraft = drafts.find(function (draft) {
        return draft._id === draftId(doc);
      });
      return foundDraft || doc;
    });
    return (0, _lodash.uniqBy)(outgoing, '_id');
  }).catch(function (error) {
    throw new Error('Problems fetching docs ' + ids + '. Error: ' + error.message);
  });
};

var getSubscription = function getSubscription(query, params) {
  return _client2.default.listen(query, params, { events: ['welcome', 'mutation'], includeResult: false, visibility: 'query' }).pipe((0, _operators.switchMap)(function (event) {
    return (0, _rxjs.of)(1).pipe(event.type === 'welcome' ? (0, _operators.tap)() : (0, _operators.delay)(1000), (0, _operators.mergeMap)(function () {
      return _client2.default.fetch(query, params).then(function (incoming) {
        return prepareDocumentList(incoming);
      }).catch(function (error) {
        if (error.message.startsWith('Problems fetching docs')) {
          throw error;
        }
        throw new Error('Query failed ' + query + ' and ' + JSON.stringify(params) + '. Error: ' + error.message);
      });
    }));
  }));
};

module.exports = {
  getSubscription: getSubscription
};