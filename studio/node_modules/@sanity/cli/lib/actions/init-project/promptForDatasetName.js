"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = promptForDatasetName;

var _chalk = _interopRequireDefault(require("chalk"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

const datasetNameError = 'Dataset names can only contain lowercase characters,' + 'numbers, underscores and dashes' + 'and can be at most 20 characters.';

function promptForDatasetName(prompt, options = {}) {
  return prompt.single(_objectSpread({
    type: 'input',
    message: 'Dataset name:',
    validate: name => {
      if (!name || name.length < 2 || name.length > 20) {
        return 'Dataset name must be between 2 and 20 characters';
      }

      if (name.toLowerCase() !== name) {
        return 'Dataset name must be lowercase';
      }

      if (name.replace(/\s/g, '') !== name) {
        return 'Dataset name cannot contain whitespace';
      }

      if (/^[^a-z0-9]/.test(name)) {
        return 'Dataset name must start with a character or letter';
      }

      if (/[-_]$/.test(name)) {
        return 'Dataset name must not end with a dash or an underscore';
      }

      const isValid = /^[a-z0-9][-\w]+$/.test(name);

      if (isValid) {
        return true;
      }

      const invalid = name.match(/[^-\w]/g) || [];
      return invalid.length > 0 ? `Disallowed characters found: ${printInvalid(name, invalid)}` : datasetNameError;
    }
  }, options));
}

function printInvalid(name, invalid) {
  return invalid.reduce((acc, char) => acc.replace(new RegExp(escapeRegex(char), 'g'), _chalk.default.red.bold(char)), name);
}

function escapeRegex(string) {
  return `${string}`.replace(/([?!${}*:()|=^[\]/\\.+])/g, '\\$1');
}