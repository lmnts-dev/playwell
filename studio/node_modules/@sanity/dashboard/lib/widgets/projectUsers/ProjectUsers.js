"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _react = _interopRequireDefault(require("react"));

var _client = _interopRequireDefault(require("part:@sanity/base/client"));

var _spinner = _interopRequireDefault(require("part:@sanity/components/loading/spinner"));

var _default2 = _interopRequireDefault(require("part:@sanity/components/previews/default"));

var _default3 = require("part:@sanity/components/lists/default");

var _anchor = _interopRequireDefault(require("part:@sanity/components/buttons/anchor"));

var _tools = _interopRequireDefault(require("react-icons/lib/go/tools"));

var _ProjectUsers = _interopRequireDefault(require("./ProjectUsers.css"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function getInviteUrl(projectId) {
  return "https://manage.sanity.io/projects/".concat(projectId, "/team/invite");
}

class ProjectUsers extends _react.default.Component {
  constructor() {
    super(...arguments);

    _defineProperty(this, "state", {
      project: null,
      users: null,
      error: null
    });

    _defineProperty(this, "sortUsersByRobotStatus", (userA, userB) => {
      var members = this.state.project.members;
      var membershipA = members.find(member => member.id === userA.id);
      var membershipB = members.find(member => member.id === userB.id);

      if (membershipA.isRobot) {
        return 1;
      }

      if (membershipB.isRobot) {
        return -1;
      }

      return 0;
    });

    _defineProperty(this, "handleRetryFetch", () => {
      this.fetchData();
    });
  }

  componentDidMount() {
    this.fetchData();
  }

  fetchData() {
    var _sanityClient$config = _client.default.config(),
        projectId = _sanityClient$config.projectId;

    _client.default.projects.getById(projectId).then(project => {
      this.setState({
        project
      });
      return project;
    }).then(project => _client.default.users.getById(project.members.map(mem => mem.id).join(','))).then(users => this.setState({
      users: Array.isArray(users) ? users : [users]
    })).catch(error => this.setState({
      error
    }));
  }

  render() {
    var _this$state = this.state,
        error = _this$state.error,
        project = _this$state.project,
        users = _this$state.users;
    var isLoading = !users || !project;

    if (error) {
      return _react.default.createElement("div", null, "Something went wrong while fetching data. You could", ' ', _react.default.createElement("a", {
        className: _ProjectUsers.default.retry,
        onClick: this.handleRetryFetch,
        title: "Retry users fetch"
      }, "retry"), "..?");
    }

    return _react.default.createElement("div", {
      className: _ProjectUsers.default.container
    }, _react.default.createElement("header", {
      className: _ProjectUsers.default.header
    }, _react.default.createElement("h2", {
      className: _ProjectUsers.default.title
    }, "Project users")), isLoading && _react.default.createElement(_default3.List, {
      className: _ProjectUsers.default.list
    }, _react.default.createElement(_spinner.default, {
      center: true,
      message: "Loading items\u2026"
    })), !isLoading && _react.default.createElement(_default3.List, {
      className: _ProjectUsers.default.list
    }, users.sort(this.sortUsersByRobotStatus).map(user => {
      var membership = project.members.find(member => member.id === user.id);
      var media = membership.isRobot ? _react.default.createElement(_tools.default, {
        className: _ProjectUsers.default.profileImage
      }) : _react.default.createElement("div", {
        className: _ProjectUsers.default.avatar
      }, user.imageUrl && _react.default.createElement("img", {
        src: user.imageUrl,
        alt: user.displayName
      }));
      return _react.default.createElement(_default3.Item, {
        key: user.id,
        className: _ProjectUsers.default.item
      }, _react.default.createElement(_default2.default, {
        title: user.displayName,
        subtitle: membership.role,
        media: media
      }));
    })), _react.default.createElement("div", {
      className: _ProjectUsers.default.footer
    }, _react.default.createElement(_anchor.default, {
      disabled: isLoading,
      href: isLoading ? undefined : getInviteUrl(project.id),
      bleed: true,
      color: "primary",
      kind: "simple"
    }, "Invite members")));
  }

}

_defineProperty(ProjectUsers, "propTypes", {});

_defineProperty(ProjectUsers, "defaultProps", {});

var _default = ProjectUsers;
exports.default = _default;