"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _isPlainObject2 = _interopRequireDefault(require("lodash/isPlainObject"));

var _react = _interopRequireDefault(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _client = _interopRequireDefault(require("part:@sanity/base/client"));

var _anchor = _interopRequireDefault(require("part:@sanity/components/buttons/anchor"));

var _widgetContainer = _interopRequireDefault(require("part:@sanity/dashboard/widget-container"));

var _ProjectInfo = _interopRequireDefault(require("./ProjectInfo.css"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var _sanityClient$config = _client.default.config(),
    projectId = _sanityClient$config.projectId,
    dataset = _sanityClient$config.dataset;

function isUrl(url) {
  return /^https?:\/\//.test("".concat(url));
}

function getGraphQlUrl() {
  return "https://".concat(projectId, ".api.sanity.io/v1/graphql/").concat(dataset, "/default");
}

function getGroqUrl() {
  return "https://".concat(projectId, ".api.sanity.io/v1/groq/").concat(dataset);
}

function getManageUrl() {
  return "https://manage.sanity.io/projects/".concat(projectId);
}

class ProjectInfo extends _react.default.Component {
  constructor() {
    super(...arguments);

    _defineProperty(this, "state", {
      studioHost: null,
      graphqlApi: null
    });
  }

  componentDidMount() {
    // fetch project data
    _client.default.projects.getById(projectId).then(result => {
      var studioHost = result.studioHost;
      this.setState({
        studioHost: studioHost ? "https://".concat(studioHost, ".sanity.studio") : null
      });
    }).catch(error => {
      console.log('Error while looking for studioHost', error);
      this.setState({
        studioHost: {
          error: 'Something went wrong while looking up studioHost. See console.'
        }
      });
    }); // ping assumed graphql endpoint


    _client.default.request({
      method: 'HEAD',
      uri: "/graphql/".concat(dataset, "/default")
    }).then(response => {
      this.setState({
        graphqlApi: getGraphQlUrl()
      });
    }).catch(error => {
      if (error.statusCode === 404) {
        this.setState({
          graphqlApi: null
        });
      } else {
        console.log('Error while looking for graphqlApi', error);
        this.setState({
          graphqlApi: {
            error: 'Something went wrong while looking up graphqlApi. See console.'
          }
        });
      }
    });
  }

  assembleTableRows() {
    var _this$state = this.state,
        graphqlApi = _this$state.graphqlApi,
        studioHost = _this$state.studioHost;
    var propsData = this.props.data;
    var result = [{
      title: 'Sanity project',
      rows: [{
        title: 'Project ID',
        value: projectId
      }, {
        title: 'Dataset',
        value: dataset
      }]
    }]; // Handle any apps

    var apps = [studioHost ? {
      title: 'Studio',
      value: studioHost
    } : null].concat(propsData.filter(item => item.category === 'apps')).filter(Boolean);

    if (apps.length > 0) {
      result = result.concat([{
        title: 'Apps',
        rows: apps
      }]);
    } // Handle APIs


    result = result.concat([{
      title: 'APIs',
      rows: [{
        title: 'GROQ',
        value: getGroqUrl()
      }, {
        title: 'GraphQL',
        value: graphqlApi || 'Not deployed'
      }]
    }], propsData.filter(item => item.category === 'apis')); // Handle whatever else there might be

    var otherStuff = {};
    propsData.forEach(item => {
      if (item.category !== 'apps' && item.category !== 'apis') {
        if (!otherStuff[item.category]) {
          otherStuff[item.category] = [];
        }

        otherStuff[item.category].push(item);
      }
    });
    Object.keys(otherStuff).forEach(category => {
      result.push({
        title: category,
        rows: otherStuff[category]
      });
    });
    return result;
  }

  render() {
    return _react.default.createElement("div", {
      className: _ProjectInfo.default.parentWrapper
    }, this.props.__experimental_before && this.props.__experimental_before.map((widgetConfig, idx) => _react.default.createElement(_widgetContainer.default, {
      key: String(idx),
      config: widgetConfig
    })), _react.default.createElement("div", {
      className: _ProjectInfo.default.container
    }, _react.default.createElement("header", {
      className: _ProjectInfo.default.header
    }, _react.default.createElement("h2", {
      className: _ProjectInfo.default.title
    }, "Project info")), _react.default.createElement("table", {
      className: _ProjectInfo.default.table
    }, this.assembleTableRows().map(item => {
      if (!item || !item.rows) {
        return null;
      }

      return _react.default.createElement("tbody", {
        key: item.title
      }, _react.default.createElement("tr", {
        className: _ProjectInfo.default.sectionHeaderRow
      }, _react.default.createElement("th", {
        colSpan: "2"
      }, item.title)), item.rows.map(row => {
        return _react.default.createElement("tr", {
          key: row.title
        }, _react.default.createElement("th", {
          className: _ProjectInfo.default.rowTitle
        }, row.title), (0, _isPlainObject2.default)(row.value) && _react.default.createElement("td", {
          className: _ProjectInfo.default.apiError
        }, row.value.error), !(0, _isPlainObject2.default)(row.value) && _react.default.createElement("td", null, isUrl(row.value) ? _react.default.createElement("a", {
          href: row.value
        }, row.value) : row.value));
      }));
    })), _react.default.createElement("div", {
      className: _ProjectInfo.default.footer
    }, _react.default.createElement(_anchor.default, {
      href: getManageUrl(),
      bleed: true,
      color: "primary",
      kind: "simple"
    }, "Manage project"))));
  }

}

_defineProperty(ProjectInfo, "propTypes", {
  // eslint-disable-next-line camelcase
  __experimental_before: _propTypes.default.array,
  data: _propTypes.default.array
});

_defineProperty(ProjectInfo, "defaultProps", {
  // eslint-disable-next-line camelcase
  __experimental_before: [],
  data: []
});

var _default = ProjectInfo;
exports.default = _default;