"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _propTypes = _interopRequireDefault(require("prop-types"));

var _react = _interopRequireDefault(require("react"));

var _reactTippy = require("react-tippy");

var _PresenceCircle = _interopRequireDefault(require("../presence/PresenceCircle"));

var _PresenceList = _interopRequireDefault(require("../presence/PresenceList"));

var _colorHasher = _interopRequireDefault(require("../presence/colorHasher"));

var _EventIcon = _interopRequireDefault(require("./EventIcon"));

var _ListItemModules = _interopRequireDefault(require("./styles/ListItem.modules.css"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; var ownKeys = Object.keys(source); if (typeof Object.getOwnPropertySymbols === 'function') { ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) { return Object.getOwnPropertyDescriptor(source, sym).enumerable; })); } ownKeys.forEach(function (key) { _defineProperty(target, key, source[key]); }); } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var noop = () => {}; // eslint-disable-line no-empty-function


var MAX_USERS = 3;
var DECIMALS = 2;
var DISTANCE_BETWEEN_POINTS = 5;
var offset = 100;
var radius = 50;

function makeClipPath() {
  var p = '';

  for (var i = 90; i <= 270; i += DISTANCE_BETWEEN_POINTS) {
    var x = radius * Math.cos(i * Math.PI / 180);
    var y = radius * Math.sin(i * Math.PI / 180);
    p += ",".concat((offset + x).toFixed(DECIMALS), "% ").concat((50 + y).toFixed(DECIMALS), "%");
  }

  return "polygon(0 0,0 100%".concat(p, ",0 0)");
}

class HistoryListItem extends _react.default.PureComponent {
  constructor() {
    super(...arguments);

    _defineProperty(this, "_rootElement", _react.default.createRef());

    _defineProperty(this, "handleClick", evt => {
      this.props.onClick(evt);
    });
  }

  componentDidUpdate(prevProps) {
    var isSelected = this.props.isSelected; // Focus the element when it becomes selected

    if (isSelected && (!prevProps || !prevProps.isSelected)) {
      this.focus();
    }
  }

  focus() {
    if (this._rootElement && this._rootElement.current) {
      this._rootElement.current.focus();
    }
  }

  // eslint-disable-next-line complexity
  render() {
    var _this$props = this.props,
        status = _this$props.status,
        isSelected = _this$props.isSelected,
        title = _this$props.title,
        users = _this$props.users,
        children = _this$props.children,
        isCurrentVersion = _this$props.isCurrentVersion,
        rev = _this$props.rev,
        onKeyUp = _this$props.onKeyUp,
        onKeyDown = _this$props.onKeyDown,
        tooltip = _this$props.tooltip,
        type = _this$props.type;
    var selectionClassName = isSelected ? _ListItemModules.default.selected : _ListItemModules.default.unSelected;
    return _react.default.createElement("div", {
      className: selectionClassName,
      "data-type": type,
      "data-is-current-version": isCurrentVersion,
      "data-is-selected": isSelected,
      "data-rev": rev,
      onClick: this.handleClick,
      tabIndex: type === 'truncated' ? null : '0',
      onKeyUp: onKeyUp,
      onKeyDown: onKeyDown,
      title: tooltip,
      ref: this._rootElement
    }, _react.default.createElement(_EventIcon.default, {
      className: _ListItemModules.default.icon,
      type: type
    }), _react.default.createElement("div", {
      className: _ListItemModules.default.startLine,
      "aria-hidden": "true"
    }), _react.default.createElement("div", {
      className: _ListItemModules.default.endLine,
      "aria-hidden": "true"
    }), _react.default.createElement("div", {
      className: _ListItemModules.default.status
    }, status), title && type !== 'truncated' && _react.default.createElement("div", {
      className: _ListItemModules.default.title
    }, title), type === 'truncated' && _react.default.createElement("div", {
      className: _ListItemModules.default.truncatedInfo
    }, _react.default.createElement("p", null, _react.default.createElement("a", {
      href: "https://www.sanity.io/docs/content-studio/history-experience",
      target: "_blank",
      rel: "noopener noreferrer"
    }, "Learn about history retention"))), users && users.length > 0 && _react.default.createElement(_reactTippy.Tooltip, {
      html: _react.default.createElement(_PresenceList.default, {
        markers: users.map(user => ({
          type: 'presence',
          identity: user.id,
          color: (0, _colorHasher.default)(user.id),
          user: _objectSpread({}, user)
        }))
      }),
      disabled: users.length < 2,
      interactive: true,
      position: "top",
      trigger: "mouseenter",
      animation: "scale",
      arrow: true,
      theme: "light",
      distance: "10",
      duration: 50
    }, _react.default.createElement("div", {
      className: _ListItemModules.default.users
    }, _react.default.createElement("div", {
      className: _ListItemModules.default.userIcons
    }, users.slice(0, MAX_USERS).map((user, i) => _react.default.createElement("div", {
      className: _ListItemModules.default.user,
      key: user.id
    }, _react.default.createElement("div", {
      className: _ListItemModules.default.userInner,
      style: {
        clipPath: makeClipPath()
      }
    }, _react.default.createElement(_PresenceCircle.default, {
      title: users.length === 1 ? undefined : user.displayName,
      showTooltip: false,
      imageUrl: user.imageUrl,
      color: user.imageUrl ? undefined : (0, _colorHasher.default)(user.id)
    }))))), users.length === 1 && _react.default.createElement("div", {
      className: _ListItemModules.default.userName
    }, users[0].displayName), users.length > 1 && _react.default.createElement("div", {
      className: _ListItemModules.default.extraItems
    }, _react.default.createElement("div", {
      className: _ListItemModules.default.userName
    }, users.length, " people")))), children && _react.default.createElement("div", {
      className: _ListItemModules.default.children
    }, children));
  }

}

exports.default = HistoryListItem;

_defineProperty(HistoryListItem, "propTypes", {
  status: _propTypes.default.string,
  title: _propTypes.default.string,
  children: _propTypes.default.node,
  isCurrentVersion: _propTypes.default.bool,
  isSelected: _propTypes.default.bool,
  onClick: _propTypes.default.func,
  onKeyUp: _propTypes.default.func,
  onKeyDown: _propTypes.default.func,
  rev: _propTypes.default.string,
  tooltip: _propTypes.default.string.isRequired,
  type: _propTypes.default.string.isRequired,
  users: _propTypes.default.arrayOf(_propTypes.default.shape({
    name: _propTypes.default.string,
    email: _propTypes.default.string,
    imageUrl: _propTypes.default.string,
    id: _propTypes.default.string
  }))
});

_defineProperty(HistoryListItem, "defaultProps", {
  status: 'Edited',
  title: undefined,
  onClick: noop,
  onKeyUp: noop,
  onKeyDown: noop,
  isCurrentVersion: false,
  isSelected: false,
  users: [],
  children: undefined,
  rev: undefined
});