"use strict";

var _range2 = _interopRequireDefault(require("lodash/range"));

var _react = _interopRequireDefault(require("react"));

var _storybook = require("part:@sanity/storybook");

var _default = _interopRequireDefault(require("part:@sanity/components/buttons/default"));

var _knobs = require("part:@sanity/storybook/addons/knobs");

var _listItem = _interopRequireDefault(require("part:@sanity/components/history/list-item"));

var _chance = _interopRequireDefault(require("chance"));

var _sanity = _interopRequireDefault(require("part:@sanity/storybook/addons/sanity"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

var chance = new _chance.default();

var mockUser = () => {
  return {
    identity: chance.guid(),
    displayName: chance.name(),
    email: chance.email(),
    imageUrl: "https://placeimg.com/64/64/any?".concat(Math.random() * 1000)
  };
};

var mockHistoryItem = () => {
  return {
    title: 'Test',
    status: 'published',
    key: chance.guid(),
    users: (0, _range2.default)(Math.floor(Math.random() * 4) + 1).map(() => mockUser())
  };
};

(0, _storybook.storiesOf)('History').addDecorator(_knobs.withKnobs).add('List', () => {
  return _react.default.createElement("div", null, _react.default.createElement(_listItem.default, {
    status: "draft",
    title: "test",
    users: [mockUser()]
  }), _react.default.createElement(_listItem.default, {
    status: "published",
    title: "23 may 2018",
    users: [mockUser()],
    isSelected: true,
    isCurrentVersion: true
  }), _react.default.createElement(_listItem.default, {
    status: "unpublished",
    title: "22 may 2018",
    users: [mockUser()]
  }), (0, _range2.default)((0, _knobs.number)('items', 10, 'test')).map(() => {
    var item = mockHistoryItem();
    return _react.default.createElement(_listItem.default, _extends({
      key: item.key
    }, item));
  }), _react.default.createElement(_listItem.default, {
    status: "created",
    title: "test",
    users: [mockUser()]
  }));
}).add('List item', () => {
  var users = (0, _range2.default)((0, _knobs.number)('users', 1, 'test')).map(() => mockUser());
  return _react.default.createElement(_sanity.default, {
    part: "part:@sanity/components/history/list-item",
    propTables: [_listItem.default]
  }, _react.default.createElement(_listItem.default, {
    status: (0, _knobs.select)('status', ['published', 'unpublished', 'edited', 'created', 'truncated'], 'edited'),
    title: (0, _knobs.text)('title', '23 may 2019'),
    users: users,
    isCurrentVersion: (0, _knobs.boolean)('isCurrentVersion', false, 'props'),
    isSelected: (0, _knobs.boolean)('isSelected', false, 'props')
  }, (0, _knobs.boolean)('children', false, 'test') && _react.default.createElement(_react.default.Fragment, null, _react.default.createElement(_default.default, {
    inverted: true,
    color: "white",
    padding: "small"
  }, "Publish"), _react.default.createElement(_default.default, {
    kind: "simple",
    padding: "small"
  }, "Discard"))));
});