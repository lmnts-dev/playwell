"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _react = _interopRequireDefault(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _Portal = require("../utilities/Portal");

var _SnackbarItem = _interopRequireDefault(require("./SnackbarItem"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; var ownKeys = Object.keys(source); if (typeof Object.getOwnPropertySymbols === 'function') { ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) { return Object.getOwnPropertyDescriptor(source, sym).enumerable; })); } ownKeys.forEach(function (key) { _defineProperty(target, key, source[key]); }); } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

class SnackbarProvider extends _react.default.Component {
  constructor(props, context) {
    super(props, context);

    _defineProperty(this, "maxStack", 3);

    _defineProperty(this, "snackQueue", []);

    _defineProperty(this, "handleSetHeight", (id, height) => {
      this.setState((_ref) => {
        var activeSnacks = _ref.activeSnacks;
        return {
          activeSnacks: activeSnacks.map(snack => snack.id === id ? _objectSpread({}, snack, {
            height
          }) : _objectSpread({}, snack))
        };
      });
    });

    _defineProperty(this, "addToSnackQueue", contextSnack => {
      var activeSnacks = this.state.activeSnacks;

      var newSnack = _objectSpread({
        id: new Date().getTime() + Math.floor(Math.random() * 10000),
        isOpen: true
      }, contextSnack);

      if (newSnack.preventDuplicate) {
        var isInQueue = this.snackQueue.findIndex(snack => snack.kind === newSnack.kind) > -1;
        var isInActive = activeSnacks.findIndex(snack => snack.kind === newSnack.kind) > -1;

        if (isInQueue || isInActive) {
          return null;
        }
      }

      this.snackQueue.push(newSnack);
      this.handleMaxSnackDisplay();
      return newSnack.id;
    });

    _defineProperty(this, "handleMaxSnackDisplay", () => {
      var activeSnacks = this.state.activeSnacks;

      if (activeSnacks.length >= this.maxStack) {
        this.handleDismissOldestSnack();
      }

      this.processSnackQueue();
    });

    _defineProperty(this, "processSnackQueue", () => {
      if (this.snackQueue.length > 0) {
        var newSnack = this.snackQueue.shift();
        this.setState((_ref2) => {
          var activeSnacks = _ref2.activeSnacks;
          return {
            activeSnacks: [...activeSnacks, newSnack]
          };
        });
      }
    });

    _defineProperty(this, "handleDismissOldestSnack", () => {
      var activeSnacks = this.state.activeSnacks;
      var ignorePersistStatus;
      var snackHasBeenRemoved;
      var persistedSnackCount = activeSnacks.reduce((count, current) => count + (current.isOpen && current.isPersisted ? 1 : 0), 0);

      if (persistedSnackCount === this.maxStack) {
        ignorePersistStatus = true;
      } // Find the snack to hide


      activeSnacks.filter(snack => snack.isOpen === true).forEach(snack => {
        if (!snackHasBeenRemoved && (!snack.isPersisted || ignorePersistStatus)) {
          snackHasBeenRemoved = true;
          this.handleDismissSnack(snack.id);
        }
      });
    });

    _defineProperty(this, "handleDismissSnack", id => {
      this.setState((_ref3) => {
        var activeSnacks = _ref3.activeSnacks;
        return {
          activeSnacks: activeSnacks.map(snack => {
            if (snack.id === id) return _objectSpread({}, snack, {
              isOpen: false
            });
            return _objectSpread({}, snack);
          })
        };
      }, () => this.handleRemoveSnack(id));
    });

    _defineProperty(this, "handleRemoveSnack", id => {
      this._removeTimer = setTimeout(() => {
        this.setState((_ref4) => {
          var activeSnacks = _ref4.activeSnacks;
          return {
            activeSnacks: activeSnacks.filter(snack => snack.id !== id)
          };
        });
      }, 200);
    });

    _defineProperty(this, "getChildContext", () => ({
      addToSnackQueue: this.addToSnackQueue,
      handleDismissSnack: this.handleDismissSnack
    }));

    this.state = {
      activeSnacks: []
    };
  }

  get offsets() {
    var activeSnacks = this.state.activeSnacks;
    return activeSnacks.map((snack, index) => {
      var _view$snackbar = {
        view: 10,
        snackbar: 12
      },
          viewOffset = _view$snackbar.view,
          snackbarOffset = _view$snackbar.snackbar;
      var offset = viewOffset;

      while (activeSnacks[index - 1]) {
        var snackHeight = activeSnacks[index - 1].height || 60;
        offset += snackHeight + snackbarOffset;
        index -= 1;
      }

      return offset;
    });
  }
  /*
   Set a height for the snackbar to stack them correctly
  */


  componentWillUnmount() {
    clearTimeout(this._removeTimer);
  }

  render() {
    var activeSnacks = this.state.activeSnacks;
    var children = this.props.children;
    return _react.default.createElement("div", null, children, _react.default.createElement(_Portal.Portal, null, _react.default.createElement("div", {
      role: "region",
      "aria-label": "notifications",
      tabIndex: "-1"
    }, activeSnacks.map((snack, index) => _react.default.createElement(_SnackbarItem.default, _extends({
      key: snack.id
    }, snack, {
      offset: this.offsets[index],
      onDismiss: id => this.handleDismissSnack(id),
      onSetHeight: this.handleSetHeight
    }))))));
  }

}

exports.default = SnackbarProvider;

_defineProperty(SnackbarProvider, "propTypes", {
  children: _propTypes.default.node.isRequired
});

_defineProperty(SnackbarProvider, "childContextTypes", {
  addToSnackQueue: _propTypes.default.func,
  handleDismissSnack: _propTypes.default.func
});