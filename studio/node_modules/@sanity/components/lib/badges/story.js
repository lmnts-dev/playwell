"use strict";

var _react = _interopRequireDefault(require("react"));

var _sanity = _interopRequireDefault(require("part:@sanity/storybook/addons/sanity"));

var _storybook = require("part:@sanity/storybook");

var _default = _interopRequireDefault(require("part:@sanity/components/badges/default"));

var _knobs = require("part:@sanity/storybook/addons/knobs");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; var ownKeys = Object.keys(source); if (typeof Object.getOwnPropertySymbols === 'function') { ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) { return Object.getOwnPropertyDescriptor(source, sym).enumerable; })); } ownKeys.forEach(function (key) { _defineProperty(target, key, source[key]); }); } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var centerStyle = {
  display: 'flex',
  alignItems: 'center',
  justifyContent: 'center',
  height: '100%',
  width: '100%',
  position: 'absolute',
  top: 0,
  left: 0
};
var colors = [undefined, 'success', 'danger', 'warning', 'info', 'neutral'];

var selectColorKinds = () => (0, _knobs.select)('color', colors, undefined, 'props');

(0, _storybook.storiesOf)('Badges', module).addDecorator(_knobs.withKnobs).add('Default', () => {
  return _react.default.createElement("div", {
    style: _objectSpread({}, centerStyle)
  }, _react.default.createElement(_sanity.default, {
    part: "part:@sanity/components/badges/default",
    propTables: [_default.default]
  }, _react.default.createElement(_default.default, {
    color: selectColorKinds(),
    inverted: (0, _knobs.boolean)('inverted', false, 'props'),
    faded: (0, _knobs.boolean)('faded', false, 'props'),
    title: (0, _knobs.text)('title', 'Hint hint hint!', 'props')
  }, (0, _knobs.text)('children', 'Cool', 'props'))));
}).add('All versions', () => {
  return _react.default.createElement("div", {
    style: {
      padding: '1rem',
      fontSize: "".concat((0, _knobs.number)('font-size in px', 11, 'test'), "px")
    }
  }, colors.map(badgeColor => {
    return _react.default.createElement("div", {
      key: badgeColor || 'none',
      style: {
        padding: '1em'
      }
    }, [false, true].map(inverted => {
      return [false, true].map(faded => {
        return _react.default.createElement(_default.default, {
          color: badgeColor,
          inverted: inverted,
          faded: faded,
          key: "badge_".concat(badgeColor, "_").concat(inverted && 'inverted', "_").concat(faded && 'faded')
        }, badgeColor || 'No color', " ", inverted && ' inverted', " ", faded && 'faded');
      });
    }));
  }));
}).add('Example in text', () => {
  var color = selectColorKinds();
  return _react.default.createElement("div", {
    style: _objectSpread({}, centerStyle)
  }, _react.default.createElement("p", null, "So Text. Much", ' ', _react.default.createElement(_default.default, {
    color: color,
    inverted: (0, _knobs.boolean)('inverted', false, 'props')
  }, "Badge"), ' ', "Baseline", _react.default.createElement(_default.default, {
    color: color,
    inverted: (0, _knobs.boolean)('inverted', false, 'props')
  }, "Wow"), ' ', _react.default.createElement(_default.default, {
    color: color,
    inverted: (0, _knobs.boolean)('inverted', false, 'props')
  }, "Such"), ' ', _react.default.createElement(_default.default, {
    color: color,
    inverted: (0, _knobs.boolean)('inverted', false, 'props')
  }, "Space"), ' ', "Test"));
});