"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _stringHash = _interopRequireDefault(require("string-hash"));

var _palx = _interopRequireDefault(require("palx"));

var _colorHasher = _interopRequireDefault(require("./colorHasher.css"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var brandPrimary = _colorHasher.default.brandPrimary || '#fcc';
var pal = (0, _palx.default)(brandPrimary); // Picks strong colors from a palette created from the brand primary color

function toColor(str) {
  if (!str) {
    return brandPrimary;
  }

  var hashFloat = (0, _stringHash.default)(str) / Math.pow(2, 32); // ignore base and black from palx

  var hue = Object.keys(pal).slice(2)[Math.floor(hashFloat * (Object.keys(pal).length - 2))]; // Skip the first 6 colors because they are light

  var strongColors = pal[hue].slice(6);
  var colorStep = Math.floor(hashFloat * strongColors.length) + 6;
  return pal[hue][colorStep];
} // Sanity user IDs often start with the same character, reversing the string
// yields more unique values as the hashing function is cheap and dump


function reverse(str) {
  return str.split('').reverse().join('');
}

var _default = str => toColor(str && reverse(str));

exports.default = _default;