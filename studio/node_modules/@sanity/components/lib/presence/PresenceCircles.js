"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _react = _interopRequireDefault(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _reactMotion = require("react-motion");

var _colorHasher = _interopRequireDefault(require("./colorHasher"));

var _PresenceCircle = _interopRequireDefault(require("./PresenceCircle"));

var _PresenceCircles = _interopRequireDefault(require("./styles/PresenceCircles.css"));

var _PresenceList = _interopRequireDefault(require("./PresenceList"));

var _reactTippy = require("react-tippy");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; var ownKeys = Object.keys(source); if (typeof Object.getOwnPropertySymbols === 'function') { ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) { return Object.getOwnPropertyDescriptor(source, sym).enumerable; })); } ownKeys.forEach(function (key) { _defineProperty(target, key, source[key]); }); } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var MAX_WIDTH = 100;
var MAX_DISTANCE = 30;
var MIN_DISTANCE = 15;
var OUT_IN_DISTANCE = 20;

function calcX(idx, len) {
  var distance = Math.min(Math.max(MAX_WIDTH / len, MIN_DISTANCE), MAX_DISTANCE);
  return 0 - idx * distance;
}

function filterMarkers(markers) {
  return markers.filter(marker => marker.type === 'presence');
}

class PresenceCircles extends _react.default.PureComponent {
  constructor() {
    super(...arguments);

    _defineProperty(this, "willEnter", node => {
      var len = filterMarkers(this.props.markers).length;
      var x = calcX(node.data.index, len) - OUT_IN_DISTANCE;
      return {
        x,
        opacity: 0,
        scale: 0.5
      };
    });

    _defineProperty(this, "willLeave", node => {
      var len = filterMarkers(this.props.markers).length;
      var x = calcX(node.data.index, len) - OUT_IN_DISTANCE;
      return {
        x: (0, _reactMotion.spring)(x, {
          stiffness: 400
        }),
        opacity: (0, _reactMotion.spring)(0, {
          stiffness: 500
        }),
        scale: (0, _reactMotion.spring)(0.5)
      };
    });
  }

  render() {
    var maxMarkers = this.props.maxMarkers;
    var markers = filterMarkers(this.props.markers).reverse().map(marker => {
      return _objectSpread({}, marker, {
        color: (0, _colorHasher.default)(marker.identity)
      });
    });
    var shownMarkers = markers.filter((marker, i) => i <= maxMarkers);
    var extraMarkers = markers.filter((marker, i) => i > maxMarkers);
    var len = markers.length;

    if (len < 1) {
      return null;
    }

    var offset = extraMarkers.length > 0 ? -10 : 0;
    return _react.default.createElement(_reactMotion.TransitionMotion, {
      styles: shownMarkers.map((marker, idx) => {
        var index = shownMarkers.length - idx;
        return {
          key: marker.session,
          data: {
            marker,
            index
          },
          style: {
            x: (0, _reactMotion.spring)(offset + calcX(index, len), {
              damping: 15,
              stiffness: 400
            }),
            opacity: (0, _reactMotion.spring)(1, {
              damping: 30,
              stiffness: 400
            }),
            scale: (0, _reactMotion.spring)(1)
          }
        };
      }),
      willEnter: this.willEnter,
      willLeave: this.willLeave
    }, interpolatedStyles => _react.default.createElement("div", {
      className: _PresenceCircles.default.root
    }, interpolatedStyles.map((_ref) => {
      var data = _ref.data,
          key = _ref.key,
          style = _ref.style;
      var index = data.index,
          marker = data.marker;
      var user = marker.user,
          color = marker.color;
      var initials = user && user.displayName.match(/\b\w/g).join('') || '?';
      return _react.default.createElement("div", {
        className: _PresenceCircles.default.item,
        key: key,
        style: {
          opacity: style.opacity,
          transform: ["translate3d(".concat(style.x, "px, 0, 0)"), "scale(".concat(style.scale, ")")].join(''),
          zIndex: shownMarkers.length - index
        }
      }, _react.default.createElement(_PresenceCircle.default, {
        animateOnHover: true,
        imageUrl: marker.user && marker.user.imageUrl,
        text: initials,
        title: user.displayName,
        color: color
      }));
    }), extraMarkers.length > 0 && _react.default.createElement("div", {
      className: _PresenceCircles.default.extraItems,
      style: {
        zIndex: shownMarkers.length
      }
    }, _react.default.createElement(_reactTippy.Tooltip, {
      html: _react.default.createElement(_PresenceList.default, {
        markers: extraMarkers
      }),
      interactive: true,
      position: "top",
      trigger: "mouseenter",
      animation: "scale",
      arrow: true,
      theme: "light",
      distance: "10",
      duration: 50
    }, "+", extraMarkers.length))));
  }

}

exports.default = PresenceCircles;

_defineProperty(PresenceCircles, "propTypes", {
  maxMarkers: _propTypes.default.number,
  markers: _propTypes.default.arrayOf(_propTypes.default.shape({
    path: _propTypes.default.arrayOf(_propTypes.default.oneOfType([_propTypes.default.string, _propTypes.default.number, _propTypes.default.shape({
      _key: _propTypes.default.string
    })])),
    type: _propTypes.default.string,
    identity: _propTypes.default.string,
    session: _propTypes.default.string
  }))
});

_defineProperty(PresenceCircles, "defaultProps", {
  maxMarkers: 5,
  markers: []
});