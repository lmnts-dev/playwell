"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.listenQuery = void 0;

var _client = _interopRequireDefault(require("part:@sanity/base/client"));

var _rxjs = require("rxjs");

var _operators = require("rxjs/operators");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance"); }

function _iterableToArrayLimit(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

var fetch = (query, params) => (0, _rxjs.defer)(() => _client.default.observable.fetch(query, params));

var listen = (query, params) => (0, _rxjs.defer)(() => _client.default.listen(query, params, {
  events: ['welcome', 'mutation', 'reconnect'],
  includeResult: false,
  visibility: 'query'
})); // todo: promote as building block for better re-use
// todo: optimize by patching collection in-place


var listenQuery = (query, params) => {
  var fetchOnce$ = fetch(query, params);

  var _listen$pipe = listen(query, params).pipe((0, _operators.mergeMap)((ev, i) => {
    var isFirst = i === 0;
    var isWelcome = ev.type === 'welcome';

    if (isFirst && !isWelcome) {
      // if the first event is not welcome, it is most likely a reconnect and
      // if it's not a reconnect something is very wrong
      return (0, _rxjs.throwError)(new Error(ev.type === 'reconnect' ? 'Could not establish EventSource connection' : "Received unexpected type of first event \"".concat(ev.type, "\"")));
    }

    return (0, _rxjs.of)(ev);
  }), (0, _operators.share)(), (0, _operators.partition)(ev => ev.type === 'welcome')),
      _listen$pipe2 = _slicedToArray(_listen$pipe, 2),
      welcome$ = _listen$pipe2[0],
      mutation$ = _listen$pipe2[1];

  return (0, _rxjs.merge)(welcome$.pipe((0, _operators.take)(1)), mutation$.pipe((0, _operators.throttleTime)(1000, _rxjs.asyncScheduler, {
    leading: true,
    trailing: true
  }))).pipe((0, _operators.switchMapTo)(fetchOnce$));
};

exports.listenQuery = listenQuery;