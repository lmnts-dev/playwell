"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _size2 = _interopRequireDefault(require("lodash/size"));

var _sortBy2 = _interopRequireDefault(require("lodash/sortBy"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance"); }

function _iterableToArrayLimit(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; var ownKeys = Object.keys(source); if (typeof Object.getOwnPropertySymbols === 'function') { ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) { return Object.getOwnPropertyDescriptor(source, sym).enumerable; })); } ownKeys.forEach(function (key) { _defineProperty(target, key, source[key]); }); } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

var sortFields = ['id', 'name', 'role', 'date'];
var helpText = "\nOptions\n  --no-invitations Don't include pending invitations\n  --no-robots Don't include robots (token users)\n  --sort <field> Sort users by specified column: ".concat(sortFields.join(', '), "\n  --order <asc/desc> Sort output ascending/descending\n\nExamples\n  # List all users of the project\n  sanity users list\n\n  # List all users of the project, but exclude pending invitations and robots\n  sanity users list --no-invitations --no-robots\n\n  # List all users, sorted by role\n  sanity users list --sort role\n");
var _default = {
  name: 'list',
  group: 'users',
  signature: '',
  helpText,
  description: 'List all users of the project',
  action: function () {
    var _action = _asyncToGenerator(function* (args, context) {
      var apiClient = context.apiClient,
          output = context.output,
          chalk = context.chalk;

      var _sort$order$robots$in = _objectSpread({
        sort: 'date',
        order: 'asc',
        robots: true,
        invitations: true
      }, args.extOptions),
          sort = _sort$order$robots$in.sort,
          order = _sort$order$robots$in.order,
          robots = _sort$order$robots$in.robots,
          invitations = _sort$order$robots$in.invitations;

      if (!sortFields.includes(sort)) {
        throw new Error("Can't sort by field \"".concat(sort, "\". Must be one of ").concat(sortFields.join(', ')));
      }

      if (order !== 'asc' && order !== 'desc') {
        throw new Error("Unknown sort order \"".concat(order, "\", must be either \"asc\" or \"desc\""));
      }

      var client = apiClient();
      var globalClient = client.clone().config({
        useProjectHostname: false
      });

      var _client$config = client.config(),
          projectId = _client$config.projectId;

      var useGlobalApi = true;

      var _ref = yield Promise.all([invitations ? globalClient.request({
        uri: "/invitations/project/".concat(projectId),
        useGlobalApi
      }).then(getPendingInvitations) : [], globalClient.request({
        uri: "/projects/".concat(projectId),
        useGlobalApi
      })]),
          _ref2 = _slicedToArray(_ref, 2),
          pendingInvitations = _ref2[0],
          project = _ref2[1];

      var memberIds = project.members.map(member => member.id);
      var users = yield globalClient.request({
        uri: "/users/".concat(memberIds.join(',')),
        useGlobalApi
      }).then(arrayify);
      var members = project.members.map(member => _objectSpread({}, member, getUserProps(users.find(candidate => candidate.id === member.id)))).filter(member => !member.isRobot || robots).concat(pendingInvitations);
      var ordered = (0, _sortBy2.default)(members.map((_ref3) => {
        var id = _ref3.id,
            name = _ref3.name,
            role = _ref3.role,
            date = _ref3.date;
        return [id, name, role, date];
      }), [sortFields.indexOf(sort)]);
      var rows = order === 'asc' ? ordered : ordered.reverse();
      var maxWidths = rows.reduce((max, row) => row.map((current, index) => Math.max((0, _size2.default)(current), max[index])), sortFields.map(str => (0, _size2.default)(str)));

      var printRow = row => {
        var isInvite = row[0] === '<pending>';
        var textRow = row.map((col, i) => "".concat(col).padEnd(maxWidths[i])).join('   ');
        return isInvite ? chalk.dim(textRow) : textRow;
      };

      output.print(chalk.cyan(printRow(sortFields)));
      rows.forEach(row => output.print(printRow(row)));
    });

    function action(_x, _x2) {
      return _action.apply(this, arguments);
    }

    return action;
  }()
};
exports.default = _default;

function arrayify(obj) {
  return Array.isArray(obj) ? obj : [obj];
}

function getUserProps(user) {
  var _ref4 = user || {},
      name = _ref4.displayName,
      date = _ref4.createdAt;

  return {
    name,
    date
  };
}

function getPendingInvitations(invitations) {
  return invitations.filter(invite => !invite.isAccepted && !invite.isRevoked && !invite.acceptedByUserId).map(invite => ({
    id: '<pending>',
    name: invite.email,
    role: invite.role,
    date: invite.createdAt
  }));
}