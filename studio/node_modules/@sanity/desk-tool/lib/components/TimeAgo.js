"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.formatTimeAgo = formatTimeAgo;
exports.default = void 0;

var _propTypes = _interopRequireDefault(require("prop-types"));

var _react = _interopRequireDefault(require("react"));

var _shallowEquals = _interopRequireDefault(require("shallow-equals"));

var _dateFns = require("date-fns");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function formatTimeAgo(date) {
  var now = Date.now();
  var diffSeconds = (0, _dateFns.differenceInSeconds)(now, date);
  var diffMins = (0, _dateFns.differenceInMinutes)(now, date);
  var diffHours = (0, _dateFns.differenceInHours)(now, date);
  var diffDays = (0, _dateFns.differenceInDays)(now, date);
  var diffWeeks = (0, _dateFns.differenceInWeeks)(now, date);
  var diffMonths = (0, _dateFns.differenceInMonths)(now, date);
  var diffYears = (0, _dateFns.differenceInYears)(now, date);
  if (diffMonths || diffYears) return (0, _dateFns.format)(date, 'MMM D, YYYY, hh:mm A');
  if (diffWeeks) return "".concat(diffWeeks, "w ago");
  if (diffDays === 1) return 'yesterday';
  if (diffDays) return "".concat(diffDays, "d ago");
  if (diffHours) return "".concat(diffHours, "h ago");
  if (diffMins) return "".concat(diffMins, "m ago");
  if (diffSeconds > 5) return "".concat(diffSeconds, "s ago");
  return 'just now';
}

class TimeAgo extends _react.default.PureComponent {
  constructor() {
    super(...arguments);

    _defineProperty(this, "update", () => {
      this.forceUpdate();
    });
  }

  componentDidMount() {
    this.start();
  }

  componentWillUnmount() {
    this.stop();
  }

  UNSAFE_componentWillReceiveProps(nextProps) {
    if (!(0, _shallowEquals.default)(this.props, nextProps)) {
      this.stop();
      this.start();
    }
  }

  start() {
    this.update();
    this.intervalId = setInterval(this.update, this.props.refreshInterval);
  }

  stop() {
    clearInterval(this.intervalId);
  }

  render() {
    var timestamp = (0, _dateFns.format)(this.props.time, 'MMM D, YYYY, h:mm A Z');
    return _react.default.createElement("span", {
      title: timestamp
    }, formatTimeAgo(this.props.time));
  }

}

exports.default = TimeAgo;

_defineProperty(TimeAgo, "propTypes", {
  refreshInterval: _propTypes.default.number,
  time: _propTypes.default.string.isRequired
});

_defineProperty(TimeAgo, "defaultProps", {
  refreshInterval: 1000 * 5
});