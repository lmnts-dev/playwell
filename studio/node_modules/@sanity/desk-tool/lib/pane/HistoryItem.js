"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _propTypes = _interopRequireDefault(require("prop-types"));

var _react = _interopRequireDefault(require("react"));

var _listItem = _interopRequireDefault(require("part:@sanity/components/history/list-item"));

var _user = _interopRequireDefault(require("part:@sanity/base/user"));

var _dateFns = require("date-fns");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var getUsers = _user.default.getUsers;
var dateFormat = 'MMM D, YYYY, hh:mm A';

function getDateString(date) {
  if ((0, _dateFns.isToday)(date)) {
    return "Today, ".concat((0, _dateFns.format)(date, 'hh:mm A'));
  }

  if ((0, _dateFns.isYesterday)(date)) {
    return "Yesterday, ".concat((0, _dateFns.format)(date, 'hh:mm A'));
  }

  return (0, _dateFns.format)(date, dateFormat);
}

function getHumanReadableStatus(type) {
  if (type === 'discardDraft') return 'Discarded Edits';
  if (type === 'truncated') return 'Truncated Events';
  if (type === 'unknown') return 'Edited';
  return type;
}

class HistoryItem extends _react.default.PureComponent {
  constructor() {
    super(...arguments);

    _defineProperty(this, "handleKeyUp", event => {
      var onClick = this.props.onClick;

      if (event.key === 'Enter') {
        onClick();
      }
    });

    _defineProperty(this, "handleKeyDown", event => {
      // Prevent arrow keypress scrolling
      var _this$props = this.props,
          onSelectPrev = _this$props.onSelectPrev,
          onSelectNext = _this$props.onSelectNext;

      if (event.key === 'ArrowDown') {
        onSelectNext();
        event.preventDefault();
      } else if (event.key === 'ArrowUp') {
        onSelectPrev();
        event.preventDefault();
      }
    });

    _defineProperty(this, "state", {
      users: []
    });
  }

  componentDidMount() {
    this._isMounted = true;
    var userIds = this.props.userIds;

    if (!userIds) {
      return;
    }

    getUsers(userIds).then(users => {
      if (this._isMounted) {
        this.setState({
          users
        });
      }
    });
  }

  componentWillUnmount() {
    this._isMounted = false;
  }

  render() {
    var _this$props2 = this.props,
        type = _this$props2.type,
        endTime = _this$props2.endTime,
        isSelected = _this$props2.isSelected,
        isCurrentVersion = _this$props2.isCurrentVersion,
        rev = _this$props2.rev,
        onClick = _this$props2.onClick;
    var users = this.state.users;
    return _react.default.createElement(_listItem.default, {
      isCurrentVersion: isCurrentVersion,
      status: getHumanReadableStatus(type),
      type: type,
      title: getDateString(endTime),
      tooltip: (0, _dateFns.format)(endTime, dateFormat),
      rev: rev,
      users: users,
      onClick: onClick,
      onKeyUp: this.handleKeyUp,
      onKeyDown: this.handleKeyDown,
      isSelected: isSelected
    });
  }

}

exports.default = HistoryItem;

_defineProperty(HistoryItem, "defaultProps", {
  isSelected: false,
  userIds: undefined
});

_defineProperty(HistoryItem, "propTypes", {
  endTime: _propTypes.default.string.isRequired,
  isCurrentVersion: _propTypes.default.bool.isRequired,
  isSelected: _propTypes.default.bool,
  onClick: _propTypes.default.func.isRequired,
  onSelectNext: _propTypes.default.func,
  onSelectPrev: _propTypes.default.func,
  rev: _propTypes.default.string.isRequired,
  type: _propTypes.default.oneOf(['created', 'deleted', 'edited', 'published', 'unpublished', 'truncated', 'unknown']).isRequired,
  userIds: _propTypes.default.arrayOf(_propTypes.default.string)
});