"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.getDateString = getDateString;
exports.default = void 0;

var _react = _interopRequireDefault(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _formBuilder = _interopRequireDefault(require("part:@sanity/form-builder"));

var _history = _interopRequireDefault(require("part:@sanity/base/datastore/history"));

var _TimeAgo = _interopRequireDefault(require("../../components/TimeAgo"));

var _Editor = _interopRequireDefault(require("../styles/Editor.css"));

var _dateFns = require("date-fns");

var _spinner = _interopRequireDefault(require("part:@sanity/components/loading/spinner"));

var _Delay = _interopRequireDefault(require("../../utils/Delay"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var noop = () => null;

var dateFormat = 'MMM D, YYYY, hh:mm A';

function getDateString(date) {
  if ((0, _dateFns.isToday)(date)) {
    return "Today, ".concat((0, _dateFns.format)(date, 'hh:mm A'));
  }

  if ((0, _dateFns.isYesterday)(date)) {
    return "Yesterday, ".concat((0, _dateFns.format)(date, 'hh:mm A'));
  }

  return (0, _dateFns.format)(date, dateFormat);
}

class HistoryForm extends _react.default.PureComponent {
  constructor() {
    super(...arguments);

    _defineProperty(this, "state", {
      isLoading: true,
      document: null,
      focusPath: []
    });

    _defineProperty(this, "handleFocus", focusPath => {
      this.setState({
        focusPath
      });
    });
  }

  componentDidMount() {
    var _this$props$event = this.props.event,
        displayDocumentId = _this$props$event.displayDocumentId,
        rev = _this$props$event.rev;
    this.fetch(displayDocumentId, rev);
  } // eslint-disable-next-line camelcase


  UNSAFE_componentWillReceiveProps(nextProps) {
    if (nextProps.event !== this.props.event) {
      var _nextProps$event = nextProps.event,
          displayDocumentId = _nextProps$event.displayDocumentId,
          rev = _nextProps$event.rev;
      this.fetch(displayDocumentId, rev);
    }
  }

  fetch(id, rev) {
    this.setState({
      isLoading: true
    });

    _history.default.getDocumentAtRevision(id, rev).then(res => {
      this.setState({
        document: res,
        isLoading: false
      });
    });
  }

  render() {
    var _this$props = this.props,
        schema = _this$props.schema,
        type = _this$props.type,
        event = _this$props.event,
        isLatest = _this$props.isLatest;
    var _this$state = this.state,
        isLoading = _this$state.isLoading,
        document = _this$state.document,
        focusPath = _this$state.focusPath;
    return _react.default.createElement(_react.default.Fragment, null, isLoading && _react.default.createElement(_Delay.default, {
      ms: 600
    }, _react.default.createElement("div", {
      className: _Editor.default.spinnerContainer
    }, _react.default.createElement(_spinner.default, {
      center: true,
      message: "Loading revision from ".concat(getDateString(event.endTime), "\u2026")
    }))), _react.default.createElement("div", {
      className: _Editor.default.top
    }, document && _react.default.createElement("span", {
      className: _Editor.default.editedTime
    }, 'Changed ', _react.default.createElement(_TimeAgo.default, {
      time: event.endTime
    }), isLatest && _react.default.createElement("span", null, " - Latest version"))), _react.default.createElement("form", {
      className: _Editor.default.editor,
      id: "Sanity_Default_DeskTool_Editor_ScrollContainer"
    }, !isLoading && !document && _react.default.createElement("p", null, "There is no data associated with this history event."), document && _react.default.createElement(_formBuilder.default, {
      onBlur: noop,
      onFocus: this.handleFocus,
      focusPath: focusPath,
      readOnly: true,
      schema: schema,
      type: type,
      value: document
    })));
  }

}

exports.default = HistoryForm;

_defineProperty(HistoryForm, "propTypes", {
  schema: _propTypes.default.object.isRequired,
  type: _propTypes.default.object.isRequired,
  event: _propTypes.default.shape({
    displayDocumentId: _propTypes.default.string,
    rev: _propTypes.default.string,
    endTime: _propTypes.default.string
  }),
  isLatest: _propTypes.default.bool
});