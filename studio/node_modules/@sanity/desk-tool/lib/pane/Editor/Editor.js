"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _debounce2 = _interopRequireDefault(require("lodash/debounce"));

var _react = _interopRequireDefault(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _reactTippy = require("react-tippy");

var _router = require("part:@sanity/base/router");

var _preview = require("part:@sanity/base/preview");

var _draftUtils = require("part:@sanity/base/util/draft-utils");

var _history = _interopRequireDefault(require("part:@sanity/base/datastore/history"));

var _documentActionUtils = require("part:@sanity/base/util/document-action-utils");

var _spinner = _interopRequireDefault(require("part:@sanity/components/loading/spinner"));

var _default2 = _interopRequireDefault(require("part:@sanity/components/buttons/default"));

var _trashIcon = _interopRequireDefault(require("part:@sanity/base/trash-icon"));

var _publicIcon = _interopRequireDefault(require("part:@sanity/base/public-icon"));

var _visibilityOffIcon = _interopRequireDefault(require("part:@sanity/base/visibility-off-icon"));

var _binaryIcon = _interopRequireDefault(require("part:@sanity/base/binary-icon"));

var _contentCopyIcon = _interopRequireDefault(require("part:@sanity/base/content-copy-icon"));

var _document = _interopRequireDefault(require("part:@sanity/base/datastore/document"));

var _schema = _interopRequireDefault(require("part:@sanity/base/schema"));

var _default3 = _interopRequireDefault(require("part:@sanity/components/panes/default"));

var _afterEditorComponent = _interopRequireDefault(require("all:part:@sanity/desk-tool/after-editor-component"));

var _circleCheckIcon = _interopRequireDefault(require("part:@sanity/base/circle-check-icon"));

var _historyIcon = _interopRequireDefault(require("part:@sanity/base/history-icon"));

var _default4 = _interopRequireDefault(require("part:@sanity/components/snackbar/default"));

var _resolveProductionUrl = _interopRequireDefault(require("part:@sanity/transitional/production-preview/resolve-production-url?"));

var _warningIcon = _interopRequireDefault(require("part:@sanity/base/warning-icon"));

var _filterFieldsFn = _interopRequireDefault(require("part:@sanity/desk-tool/filter-fields-fn?"));

var _hotkeys = _interopRequireDefault(require("part:@sanity/components/typography/hotkeys"));

var _copyDocument = _interopRequireDefault(require("../../utils/copyDocument"));

var _ConfirmUnpublish = _interopRequireDefault(require("../../components/ConfirmUnpublish"));

var _ConfirmDelete = _interopRequireDefault(require("../../components/ConfirmDelete"));

var _InspectView = _interopRequireDefault(require("../../components/InspectView"));

var _InspectHistory = _interopRequireDefault(require("../../components/InspectHistory"));

var _DocTitle = _interopRequireDefault(require("../../components/DocTitle"));

var _History = _interopRequireDefault(require("../History"));

var _Editor = _interopRequireDefault(require("../styles/Editor.css"));

var _Actions = _interopRequireDefault(require("./Actions"));

var _RestoreHistoryButton = _interopRequireDefault(require("./RestoreHistoryButton"));

var _EditForm = _interopRequireDefault(require("./EditForm"));

var _HistoryForm = _interopRequireDefault(require("./HistoryForm"));

var _operators = require("rxjs/operators");

var _class, _temp;

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; var ownKeys = Object.keys(source); if (typeof Object.getOwnPropertySymbols === 'function') { ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) { return Object.getOwnPropertyDescriptor(source, sym).enumerable; })); } ownKeys.forEach(function (key) { _defineProperty(target, key, source[key]); }); } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var BREAKPOINT_SCREEN_MEDIUM = 512;

function navigateUrl(url) {
  window.open(url);
} // Want a nicer api for listen/unlisten


function listen(target, eventType, callback) {
  var useCapture = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : false;
  target.addEventListener(eventType, callback, useCapture);
  return function unlisten() {
    target.removeEventListener(eventType, callback, useCapture);
  };
}

var getDuplicateItem = (draft, published, isLiveEditEnabled, isHistoryEnabled) => ({
  action: 'duplicate',
  title: 'Duplicate',
  icon: _contentCopyIcon.default,
  isDisabled: isHistoryEnabled || !draft && !published
});

var getUnpublishItem = (draft, published, isLiveEditEnabled, isHistoryEnabled) => isLiveEditEnabled ? null : {
  action: 'unpublish',
  title: 'Unpublish…',
  icon: _visibilityOffIcon.default,
  isDisabled: isHistoryEnabled || !published
};

var getDeleteItem = (draft, published, isLiveEditEnabled, isHistoryEnabled) => ({
  group: 'danger',
  action: 'delete',
  title: 'Delete…',
  icon: _trashIcon.default,
  danger: true,
  isDisabled: isHistoryEnabled || !draft && !published
});

var getHistoryMenuItem = (draft, published, isLiveEditEnabled, isHistoryEnabled) => {
  if (isLiveEditEnabled) {
    return null;
  }

  if (window && window.innerWidth > BREAKPOINT_SCREEN_MEDIUM) {
    return {
      action: 'browseHistory',
      title: 'Browse history',
      icon: _historyIcon.default,
      isDisabled: isHistoryEnabled || !(draft || published)
    };
  }

  return null;
};

var getInspectItem = (draft, published) => ({
  action: 'inspect',
  title: _react.default.createElement("span", {
    className: _Editor.default.menuItem
  }, "Inspect", ' ', _react.default.createElement("span", {
    className: _Editor.default.hotkey
  }, _react.default.createElement(_hotkeys.default, {
    keys: ['Ctrl', 'Alt', 'I']
  }))),
  icon: _binaryIcon.default,
  isDisabled: !(draft || published)
});

var getProductionPreviewItem = (draft, published, liveEditEnable, isHistoryEnabled, selectedEvent) => {
  var snapshot = draft || published;

  if (!snapshot || !_resolveProductionUrl.default) {
    return null;
  }

  var previewUrl;

  try {
    previewUrl = (0, _resolveProductionUrl.default)(snapshot, selectedEvent && selectedEvent.rev);
  } catch (error) {
    error.message = "An error was thrown while trying to get production preview url: ".concat(error.message); // eslint-disable-next-line no-console

    console.error(error);
    return null;
  }

  return previewUrl && {
    action: 'production-preview',
    title: _react.default.createElement("span", {
      className: _Editor.default.menuItem
    }, "Open preview", _react.default.createElement("span", {
      className: _Editor.default.hotkey
    }, _react.default.createElement(_hotkeys.default, {
      keys: ['Ctrl', 'Alt', 'O']
    }))),
    icon: _publicIcon.default,
    url: previewUrl
  };
};

var getMenuItems = (enabledActions, draft, published, isLiveEditEnabled, isHistoryEnabled, selectedEvent) => [getProductionPreviewItem, enabledActions.includes('delete') && getUnpublishItem, enabledActions.includes('create') && getDuplicateItem, getHistoryMenuItem, getInspectItem, enabledActions.includes('delete') && getDeleteItem].filter(Boolean).map(fn => fn(draft, published, isLiveEditEnabled, isHistoryEnabled, selectedEvent)).filter(Boolean);

var isValidationError = marker => marker.type === 'validation' && marker.level === 'error';

var INITIAL_HISTORY_STATE = {
  isOpen: false,
  isLoading: true,
  error: null,
  events: [],
  selectedRev: null
};
var INITIAL_STATE = {
  inspect: false,
  isMenuOpen: false,
  isCreatingDraft: false,
  showSavingStatus: false,
  showConfirmDelete: false,
  showConfirmUnpublish: false,
  showValidationTooltip: false,
  focusPath: [],
  historyState: INITIAL_HISTORY_STATE,
  filterField: () => true
};

var getSpinnerMessage = (_ref) => {
  var isCreatingDraft = _ref.isCreatingDraft,
      isPublishing = _ref.isPublishing,
      isUnpublishing = _ref.isUnpublishing,
      isRestoring = _ref.isRestoring;

  if (isCreatingDraft) {
    return 'Making changes…';
  }

  if (isPublishing) {
    return 'Publishing…';
  }

  if (isUnpublishing) {
    return 'Unpublishing…';
  }

  if (isRestoring) {
    return 'Restoring revision…';
  }

  return null;
};

var _default = (0, _router.withRouterHOC)(( // eslint-disable-next-line
_temp = _class = class Editor extends _react.default.PureComponent {
  constructor() {
    super(...arguments);

    _defineProperty(this, "state", INITIAL_STATE);

    _defineProperty(this, "setSavingStatus", (0, _debounce2.default)(() => {
      this.setState({
        showSavingStatus: false
      });
    }, 1500, {
      trailing: true
    }));

    _defineProperty(this, "handleFocus", path => {
      this.setState({
        focusPath: path
      });
    });

    _defineProperty(this, "handleBlur", () => {// do nothing
    });

    _defineProperty(this, "handleCreateCopy", () => {
      var _this$props = this.props,
          router = _this$props.router,
          draft = _this$props.draft,
          published = _this$props.published,
          paneIndex = _this$props.paneIndex;
      var prevId = (0, _draftUtils.getPublishedId)((draft || published)._id);
      var omit = ['_createdAt', '_updatedAt'];
      var duplicatedDocument = this.isLiveEditEnabled() ? (0, _copyDocument.default)(published, {
        omit
      }) : (0, _draftUtils.newDraftFrom)((0, _copyDocument.default)(draft || published, {
        omit
      }));
      this.duplicate$ = _document.default.create(duplicatedDocument).subscribe(copied => {
        var copyDocId = (0, _draftUtils.getPublishedId)(copied._id);

        if (router.state.panes) {
          var newPanes = router.state.panes.map((prev, i) => i === paneIndex - 1 && prev === prevId ? copyDocId : prev);
          router.navigate(_objectSpread({}, router.state, {
            panes: newPanes
          }));
        } else if (router.state.editDocumentId) {
          router.navigate(_objectSpread({}, router.state, {
            editDocumentId: copyDocId
          }));
        } else {
          throw new Error('Unknown router state');
        }
      });
    });

    _defineProperty(this, "handleEditAsActualType", () => {
      var _this$props2 = this.props,
          router = _this$props2.router,
          draft = _this$props2.draft,
          published = _this$props2.published;
      router.navigateIntent('edit', {
        id: (0, _draftUtils.getPublishedId)((draft || published)._id),
        type: draft._type || published._type
      });
    });

    _defineProperty(this, "handleChange", changeEvent => {
      var onChange = this.props.onChange;
      onChange(changeEvent);
    });

    _defineProperty(this, "handleMenuToggle", evt => {
      evt.stopPropagation();
      this.setState(prevState => ({
        isMenuOpen: !prevState.isMenuOpen
      }));
    });

    _defineProperty(this, "handlePublishRequested", () => {
      var _this$props3 = this.props,
          markers = _this$props3.markers,
          validationPending = _this$props3.validationPending,
          onPublish = _this$props3.onPublish,
          draft = _this$props3.draft;

      if (!draft) {
        return;
      }

      var errors = markers.filter(isValidationError);
      var hasErrors = errors.length > 0;

      if (validationPending || hasErrors) {
        this.setState(prevState => ({
          showValidationTooltip: !prevState.showValidationTooltip
        }));
        return;
      }

      onPublish(draft);
    });

    _defineProperty(this, "handleCancelUnpublish", () => {
      this.setState({
        showConfirmUnpublish: false
      });
    });

    _defineProperty(this, "handleCancelDelete", () => {
      this.setState({
        showConfirmDelete: false
      });
    });

    _defineProperty(this, "handleConfirmUnpublish", () => {
      var onUnpublish = this.props.onUnpublish;
      onUnpublish();
      this.setState({
        showConfirmUnpublish: false
      });
    });

    _defineProperty(this, "handleConfirmDelete", () => {
      var onDelete = this.props.onDelete;
      onDelete();
      this.setState({
        showConfirmDelete: false
      });
    });

    _defineProperty(this, "handleHideInspector", () => {
      this.setState({
        inspect: false
      });
    });

    _defineProperty(this, "handleMenuAction", item => {
      if (item.action === 'production-preview') {
        navigateUrl(item.url);
      }

      if (item.action === 'delete') {
        this.setState({
          showConfirmDelete: true
        });
      }

      if (item.action === 'unpublish') {
        this.setState({
          showConfirmUnpublish: true
        });
      }

      if (item.action === 'duplicate') {
        this.handleCreateCopy();
      }

      if (item.action === 'inspect') {
        this.setState({
          inspect: true
        });
      }

      if (item.action === 'browseHistory') {
        this.handleOpenHistory();
      }

      this.setState({
        isMenuOpen: false
      });
    });

    _defineProperty(this, "handleCloseValidationResults", () => {
      this.setState({
        showValidationTooltip: false
      });
    });

    _defineProperty(this, "handleToggleValidationResults", () => {
      this.setState(prevState => ({
        showValidationTooltip: !prevState.showValidationTooltip
      }));
    });

    _defineProperty(this, "renderPublishButtonTooltip", (errors, published) => {
      if (errors.length > 0) {
        return _react.default.createElement("span", null, "Fix errors before publishing");
      }

      return _react.default.createElement("span", {
        className: _Editor.default.menuItem
      }, published ? 'Publish changes' : 'Publish', errors.length < 1 && _react.default.createElement("span", {
        className: _Editor.default.hotkey
      }, _react.default.createElement(_hotkeys.default, {
        keys: ['Ctrl', 'Alt', 'P']
      })));
    });

    _defineProperty(this, "renderActions", () => {
      var _this$props4 = this.props,
          draft = _this$props4.draft,
          published = _this$props4.published,
          markers = _this$props4.markers,
          type = _this$props4.type,
          isReconnecting = _this$props4.isReconnecting;
      var _this$state = this.state,
          historyState = _this$state.historyState,
          handleFocus = _this$state.handleFocus,
          showSavingStatus = _this$state.showSavingStatus,
          showValidationTooltip = _this$state.showValidationTooltip;

      if (historyState.isOpen) {
        return null;
      }

      return _react.default.createElement(_Actions.default, {
        handleFocus: handleFocus,
        value: draft || published,
        markers: markers,
        type: type,
        isLiveEditEnabled: this.isLiveEditEnabled(),
        isReconnecting: isReconnecting,
        showSavingStatus: showSavingStatus,
        showValidationTooltip: showValidationTooltip,
        onCloseValidationResults: this.handleCloseValidationResults,
        onToggleValidationResults: this.handleToggleValidationResults,
        onFocus: this.handleFocus
      });
    });

    _defineProperty(this, "renderPublishInfo", () => {
      var _this$props5 = this.props,
          draft = _this$props5.draft,
          isCreatingDraft = _this$props5.isCreatingDraft,
          isPublishing = _this$props5.isPublishing,
          isReconnecting = _this$props5.isReconnecting,
          isUnpublishing = _this$props5.isUnpublishing,
          markers = _this$props5.markers,
          published = _this$props5.published;
      var validation = markers.filter(marker => marker.type === 'validation');
      var errors = validation.filter(marker => marker.level === 'error');
      return _react.default.createElement(_react.default.Fragment, null, _react.default.createElement(_reactTippy.Tooltip, {
        arrow: true,
        theme: "light",
        disabled: 'ontouchstart' in document.documentElement,
        className: _Editor.default.publishButton,
        html: this.renderPublishButtonTooltip(errors, published)
      }, _react.default.createElement(_default2.default, {
        disabled: isCreatingDraft || isPublishing || isReconnecting || isUnpublishing || !draft || errors.length > 0,
        onClick: this.handlePublishRequested,
        color: "primary"
      }, "Publish")), _react.default.createElement("div", {
        className: _Editor.default.publishInfoUndoButton
      }, !published && _react.default.createElement(_default2.default, {
        kind: "simple",
        onClick: () => this.setState({
          showConfirmDelete: true
        })
      }, "Delete document")));
    });

    _defineProperty(this, "renderHistoryInfo", () => {
      var _this$props6 = this.props,
          isReconnecting = _this$props6.isReconnecting,
          isRestoring = _this$props6.isRestoring,
          _onRestore = _this$props6.onRestore;
      var historyState = this.state.historyState;
      var selectedEvent = this.findSelectedEvent();
      var isLatestEvent = historyState.events[0] === selectedEvent;
      return _react.default.createElement(_react.default.Fragment, null, isRestoring && _react.default.createElement("div", {
        className: _Editor.default.spinnerContainer
      }, _react.default.createElement(_spinner.default, {
        center: true,
        message: "Restoring revision\u2026"
      })), _react.default.createElement(_RestoreHistoryButton.default, {
        disabled: isRestoring || isReconnecting || isLatestEvent,
        onRestore: () => _onRestore({
          id: selectedEvent.displayDocumentId,
          rev: selectedEvent.rev
        })
      }));
    });

    _defineProperty(this, "setHistoryState", nextHistoryState => {
      this.setState(prevState => ({
        historyState: _objectSpread({}, prevState.historyState, nextHistoryState)
      }));
    });

    _defineProperty(this, "handleOpenHistory", () => {
      if (this.state.historyState.isOpen) {
        return;
      }

      var _this$props7 = this.props,
          draft = _this$props7.draft,
          published = _this$props7.published;
      this.setHistoryState(_objectSpread({}, INITIAL_HISTORY_STATE, {
        isOpen: true
      }));

      var events$ = _history.default.historyEventsFor((0, _draftUtils.getPublishedId)((draft || published)._id)).pipe((0, _operators.map)((events, i) => {
        if (i === 0) {
          this.setHistoryState({
            isLoading: false,
            selectedRev: events[0].rev
          });
        }

        this.setHistoryState({
          events: events
        });
        return events;
      }));

      this._historyEventsSubscription = events$.subscribe();
    });

    _defineProperty(this, "handleCloseHistory", () => {
      this._historyEventsSubscription.unsubscribe();

      this.setHistoryState({
        isOpen: false,
        historyEvent: undefined
      });
    });

    _defineProperty(this, "renderStaticContent", () => {
      var draft = this.props.draft;
      var historyState = this.state.historyState;
      var spinnerMessage = getSpinnerMessage(this.props);
      return _react.default.createElement(_react.default.Fragment, null, spinnerMessage && _react.default.createElement("div", {
        className: _Editor.default.spinnerContainer
      }, _react.default.createElement(_spinner.default, {
        center: true,
        message: spinnerMessage
      })), _react.default.createElement("div", {
        className: (draft || historyState.isOpen) && !this.isLiveEditEnabled() ? _Editor.default.publishInfo : _Editor.default.publishInfoHidden
      }, historyState.isOpen && this.renderHistoryInfo(), !historyState.isOpen && draft && this.renderPublishInfo()));
    });

    _defineProperty(this, "handleHistorySelect", event => {
      this.setHistoryState({
        selectedRev: event.rev
      });
    });
  }

  componentDidMount() {
    this.unlistenForKey = listen(window, 'keyup', event => {
      if (event.code === 'Escape' && this.state.showValidationTooltip) {
        this.setState({
          showValidationTooltip: false
        });
        return;
      }

      if (!this.state.historyState.isOpen && event.ctrlKey && event.code === 'KeyI' && event.altKey && !event.shiftKey) {
        this.setState(prevState => ({
          inspect: !prevState.inspect
        }));
        return;
      }

      if (event.ctrlKey && event.code === 'KeyP' && event.altKey && !event.shiftKey) {
        this.handlePublishRequested();
        return;
      }

      if (event.ctrlKey && event.code === 'KeyO' && event.altKey && !event.shiftKey) {
        var _this$props8 = this.props,
            draft = _this$props8.draft,
            published = _this$props8.published;
        var item = getProductionPreviewItem(draft || published);

        if (item && item.url) {
          navigateUrl(item.url);
        }
      }
    });

    if (_filterFieldsFn.default) {
      this.filterFieldFnSubscription = _filterFieldsFn.default.subscribe(filterField => this.setState({
        filterField
      }));
    }
  }

  componentWillUnmount() {
    this.unlistenForKey();
    this.setSavingStatus.cancel();

    if (this.filterFieldFnSubscription) {
      this.filterFieldFnSubscription.unsubscribe();
    }

    if (this.duplicate$) {
      this.duplicate$.unsubscribe();
    }

    if (this._historyEventsSubscription) {
      this._historyEventsSubscription.unsubscribe();
    }
  } // @todo move publishing notification out of this component


  UNSAFE_componentWillReceiveProps(nextProps) {
    this.setState({
      didPublish: this.props.isPublishing && !nextProps.isPublishing
    });

    if (this.props.isRestoring && !nextProps.isRestoring) {
      this.setHistoryState(INITIAL_HISTORY_STATE);
    }

    if (this.props.isSaving && !nextProps.isSaving) {
      this.setState({
        showSavingStatus: true
      });
      this.setSavingStatus();
    }
  }

  isLiveEditEnabled() {
    var selectedSchemaType = _schema.default.get(this.props.type.name);

    return selectedSchemaType.liveEdit === true;
  }

  getTitle(value) {
    var _this$props9 = this.props,
        paneTitle = _this$props9.title,
        type = _this$props9.type;
    var historyState = this.state.historyState;

    if (paneTitle) {
      return _react.default.createElement("span", null, paneTitle);
    }

    if (historyState.isOpen) {
      return _react.default.createElement(_react.default.Fragment, null, "History of", ' ', _react.default.createElement(_preview.PreviewFields, {
        document: value,
        type: type,
        fields: ['title']
      }, (_ref2) => {
        var title = _ref2.title;
        return title ? _react.default.createElement("em", null, title) : _react.default.createElement("em", null, "Untitled");
      }));
    }

    if (!value) {
      return "Creating new ".concat(type.title || type.name);
    }

    return _react.default.createElement(_preview.PreviewFields, {
      document: value,
      type: type,
      fields: ['title']
    }, (_ref3) => {
      var title = _ref3.title;
      return title ? _react.default.createElement("span", null, title) : _react.default.createElement("em", null, "Untitled");
    });
  }

  findSelectedEvent() {
    var _this$state$historySt = this.state.historyState,
        events = _this$state$historySt.events,
        selectedRev = _this$state$historySt.selectedRev;
    return events.find(event => event.rev === selectedRev || event.transactionIds.includes(selectedRev));
  }

  renderForm() {
    var _this$props10 = this.props,
        type = _this$props10.type,
        markers = _this$props10.markers,
        draft = _this$props10.draft,
        published = _this$props10.published,
        patchChannel = _this$props10.patchChannel;
    var _this$state2 = this.state,
        historyState = _this$state2.historyState,
        focusPath = _this$state2.focusPath,
        filterField = _this$state2.filterField,
        isReconnecting = _this$state2.isReconnecting;
    var selectedEvent = this.findSelectedEvent();
    return historyState.isOpen && !historyState.isLoading && selectedEvent ? _react.default.createElement(_HistoryForm.default, {
      isLatest: selectedEvent === historyState.events[0],
      event: selectedEvent,
      schema: _schema.default,
      type: type
    }) : _react.default.createElement(_EditForm.default, {
      draft: draft,
      filterField: filterField,
      focusPath: focusPath,
      isLiveEditEnabled: this.isLiveEditEnabled(),
      markers: markers,
      onBlur: this.handleBlur,
      onChange: this.handleChange,
      onFocus: this.handleFocus,
      onShowHistory: this.handleOpenHistory,
      patchChannel: patchChannel,
      published: published,
      readOnly: isReconnecting || !(0, _documentActionUtils.isActionEnabled)(type, 'update'),
      schema: _schema.default,
      type: type,
      value: draft || published || {
        _type: type.name
      }
    });
  }

  render() {
    var _this$props11 = this.props,
        draft = _this$props11.draft,
        published = _this$props11.published,
        type = _this$props11.type,
        isLoading = _this$props11.isLoading,
        isReconnecting = _this$props11.isReconnecting,
        transactionResult = _this$props11.transactionResult,
        onClearTransactionResult = _this$props11.onClearTransactionResult;
    var _this$state3 = this.state,
        inspect = _this$state3.inspect,
        showConfirmDelete = _this$state3.showConfirmDelete,
        showConfirmUnpublish = _this$state3.showConfirmUnpublish,
        didPublish = _this$state3.didPublish,
        historyState = _this$state3.historyState;
    var value = draft || published;

    if (isLoading) {
      return _react.default.createElement("div", {
        className: _Editor.default.loading
      }, _react.default.createElement(_spinner.default, {
        center: true,
        message: "Loading ".concat(type.title, "\u2026"),
        delay: 600
      }));
    }

    var hasTypeMismatch = value && value._type && value._type !== type.name;

    if (hasTypeMismatch) {
      return _react.default.createElement("div", {
        className: _Editor.default.typeMisMatchMessage
      }, "This document is of type ", _react.default.createElement("code", null, value._type), " and cannot be edited as", ' ', _react.default.createElement("code", null, type.name), _react.default.createElement("div", null, _react.default.createElement(_default2.default, {
        onClick: this.handleEditAsActualType
      }, "Edit as ", value._type, " instead")));
    }

    var enabledActions = (0, _documentActionUtils.resolveEnabledActions)(type);
    return _react.default.createElement("div", {
      className: historyState.isOpen ? _Editor.default.paneWrapperWithHistory : _Editor.default.paneWrapper
    }, historyState.isOpen && _react.default.createElement(_History.default, {
      documentId: (0, _draftUtils.getPublishedId)(value._id),
      onClose: this.handleCloseHistory,
      onItemSelect: this.handleHistorySelect,
      lastEdited: value && new Date(value._updatedAt),
      published: published,
      draft: draft,
      events: historyState.events,
      isLoading: historyState.isLoading,
      error: historyState.error,
      selectedEvent: this.findSelectedEvent()
    }), _react.default.createElement(_default3.default, {
      styles: this.props.paneStyles,
      index: this.props.index,
      title: this.getTitle(value),
      onAction: this.handleMenuAction,
      menuItems: getMenuItems(enabledActions, draft, published, this.isLiveEditEnabled(), historyState.isOpen, historyState.isOpen && this.findSelectedEvent()),
      renderActions: this.renderActions,
      onMenuToggle: this.handleMenuToggle,
      isSelected: true // last pane is always selected for now
      ,
      staticContent: this.renderStaticContent(),
      contentMaxWidth: 672,
      minSize: historyState.isOpen && 1000
    }, _react.default.createElement("div", {
      className: _Editor.default.pane
    }, this.renderForm(), _afterEditorComponent.default.map((AfterEditorComponent, i) => _react.default.createElement(AfterEditorComponent, {
      key: i,
      documentId: published._id
    })), inspect && historyState.isOpen && _react.default.createElement(_InspectHistory.default, {
      id: value._id,
      event: this.findSelectedEvent(),
      onClose: this.handleHideInspector
    }), inspect && (!historyState || !historyState.isOpen) && _react.default.createElement(_InspectView.default, {
      value: value,
      onClose: this.handleHideInspector
    }), showConfirmDelete && _react.default.createElement(_ConfirmDelete.default, {
      draft: draft,
      published: published,
      onCancel: this.handleCancelDelete,
      onConfirm: this.handleConfirmDelete
    }), showConfirmUnpublish && _react.default.createElement(_ConfirmUnpublish.default, {
      draft: draft,
      published: published,
      onCancel: this.handleCancelUnpublish,
      onConfirm: this.handleConfirmUnpublish
    }), isReconnecting && _react.default.createElement(_default4.default, {
      kind: "warning",
      isPersisted: true,
      title: "Connection lost. Reconnecting\u2026"
    }), didPublish && _react.default.createElement(_default4.default, {
      kind: "success",
      title: "You just published:",
      timeout: 3000 // eslint-disable-next-line react/jsx-no-bind
      ,
      onClose: () => this.setState({
        didPublish: false
      }),
      subtitle: _react.default.createElement(_DocTitle.default, {
        document: draft || published
      })
    }), transactionResult && transactionResult.type === 'error' && _react.default.createElement(_default4.default, {
      kind: "error",
      actionTitle: "OK",
      onAction: onClearTransactionResult,
      title: transactionResult.message,
      subtitle: _react.default.createElement("details", null, transactionResult.error.message)
    }))));
  }

}, _defineProperty(_class, "propTypes", {
  title: _propTypes.default.string,
  paneIndex: _propTypes.default.number.isRequired,
  index: _propTypes.default.number,
  paneStyles: _propTypes.default.object,
  patchChannel: _propTypes.default.object,
  draft: _propTypes.default.object,
  published: _propTypes.default.object,
  type: _propTypes.default.object.isRequired,
  markers: _propTypes.default.arrayOf(_propTypes.default.shape({
    path: _propTypes.default.array
  })),
  router: _propTypes.default.shape({
    state: _propTypes.default.object,
    navigate: _propTypes.default.func,
    navigateIntent: _propTypes.default.func
  }).isRequired,
  onDelete: _propTypes.default.func,
  onChange: _propTypes.default.func,
  onPublish: _propTypes.default.func,
  onRestore: _propTypes.default.func,
  onUnpublish: _propTypes.default.func,
  transactionResult: _propTypes.default.shape({
    type: _propTypes.default.string,
    error: _propTypes.default.object,
    message: _propTypes.default.string
  }),
  onClearTransactionResult: _propTypes.default.func,
  validationPending: _propTypes.default.bool,
  isCreatingDraft: _propTypes.default.bool,
  isUnpublishing: _propTypes.default.bool,
  isPublishing: _propTypes.default.bool,
  isReconnecting: _propTypes.default.bool,
  isRestoring: _propTypes.default.bool,
  isLoading: _propTypes.default.bool,
  isSaving: _propTypes.default.bool
}), _defineProperty(_class, "defaultProps", {
  title: null,
  markers: [],
  isLoading: false,
  isSaving: false,
  isUnpublishing: false,
  isPublishing: false,
  isReconnecting: false,
  isRestoring: false,
  isCreatingDraft: false,
  transactionResult: null,

  onDelete() {},

  onChange() {},

  onClearTransactionResult() {}

}), _temp));

exports.default = _default;