"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _react = _interopRequireDefault(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _reactTippy = require("react-tippy");

var _default = _interopRequireDefault(require("part:@sanity/components/buttons/default"));

var _languageSelectComponent = _interopRequireDefault(require("part:@sanity/desk-tool/language-select-component?"));

var _syncIcon = _interopRequireDefault(require("part:@sanity/base/sync-icon"));

var _checkIcon = _interopRequireDefault(require("part:@sanity/base/check-icon"));

var _list = _interopRequireDefault(require("part:@sanity/components/validation/list"));

var _chevronDownIcon = _interopRequireDefault(require("part:@sanity/base/chevron-down-icon"));

var _warningIcon = _interopRequireDefault(require("part:@sanity/base/warning-icon"));

var _Editor = _interopRequireDefault(require("../styles/Editor.css"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

class Actions extends _react.default.PureComponent {
  renderSavingStatus() {
    return _react.default.createElement(_reactTippy.Tooltip, {
      className: _Editor.default.syncStatusSyncing,
      arrow: true,
      theme: "light",
      size: "small",
      distance: "0",
      title: "Syncing your content with the Sanity cloud"
    }, _react.default.createElement("span", {
      className: _Editor.default.syncSpinnerContainer
    }, _react.default.createElement("span", {
      className: _Editor.default.syncSpinner
    }, _react.default.createElement(_syncIcon.default, null)), "\xA0Syncing\u2026"));
  } // eslint-disable-next-line class-methods-use-this


  renderReconnecting() {
    return _react.default.createElement(_reactTippy.Tooltip, {
      className: _Editor.default.syncStatusReconnecting,
      arrow: true,
      theme: "light",
      size: "small",
      distance: "0",
      title: "Connection lost. Reconnecting\u2026"
    }, _react.default.createElement("span", {
      className: _Editor.default.syncSpinnerContainer
    }, _react.default.createElement("span", {
      className: _Editor.default.syncSpinner
    }, _react.default.createElement(_syncIcon.default, null)), "\xA0Reconnecting\u2026"));
  } // eslint-disable-next-line class-methods-use-this


  renderSyncedStatus() {
    var isLiveEditEnabled = this.props.isLiveEditEnabled;
    return _react.default.createElement(_reactTippy.Tooltip, {
      className: _Editor.default.syncStatusSynced,
      arrow: true,
      theme: "light",
      size: "small",
      distance: "0",
      title: "Synced with the Sanity cloud"
    }, _react.default.createElement(_checkIcon.default, null), " Synced ", isLiveEditEnabled && ' (live)');
  }

  renderErrors() {
    var _this$props = this.props,
        onCloseValidationResults = _this$props.onCloseValidationResults,
        onFocus = _this$props.onFocus,
        onToggleValidationResults = _this$props.onToggleValidationResults,
        markers = _this$props.markers,
        showValidationTooltip = _this$props.showValidationTooltip,
        type = _this$props.type;
    var validation = markers.filter(marker => marker.type === 'validation');
    var errors = validation.filter(marker => marker.level === 'error');
    var warnings = validation.filter(marker => marker.level === 'warning');

    if (errors.length === 0 && warnings.length === 0) {
      return null;
    }

    return _react.default.createElement(_reactTippy.Tooltip, {
      arrow: true,
      theme: "light noPadding",
      trigger: "click",
      position: "bottom",
      interactive: true,
      duration: 100,
      open: showValidationTooltip,
      onRequestClose: onCloseValidationResults,
      html: _react.default.createElement(_list.default, {
        truncate: true,
        markers: validation,
        showLink: true,
        isOpen: showValidationTooltip,
        documentType: type,
        onClose: onCloseValidationResults,
        onFocus: onFocus
      })
    }, _react.default.createElement(_default.default, {
      color: "danger",
      bleed: true,
      icon: _warningIcon.default,
      padding: "small",
      onClick: onToggleValidationResults
    }, errors.length, _react.default.createElement("span", {
      style: {
        paddingLeft: '0.5em',
        display: 'flex'
      }
    }, _react.default.createElement(_chevronDownIcon.default, null))));
  }

  render() {
    var _this$props2 = this.props,
        isReconnecting = _this$props2.isReconnecting,
        showSavingStatus = _this$props2.showSavingStatus,
        value = _this$props2.value;
    return _react.default.createElement("div", {
      className: _Editor.default.paneFunctions
    }, _languageSelectComponent.default && _react.default.createElement(_languageSelectComponent.default, null), showSavingStatus && this.renderSavingStatus(), isReconnecting && this.renderReconnecting(), value && !showSavingStatus && !isReconnecting && this.renderSyncedStatus(), this.renderErrors());
  }

}

exports.default = Actions;

_defineProperty(Actions, "propTypes", {
  isLiveEditEnabled: _propTypes.default.bool.isRequired,
  isReconnecting: _propTypes.default.bool.isRequired,
  markers: _propTypes.default.arrayOf(_propTypes.default.shape({
    path: _propTypes.default.array
  })).isRequired,
  onCloseValidationResults: _propTypes.default.func.isRequired,
  onFocus: _propTypes.default.func.isRequired,
  onToggleValidationResults: _propTypes.default.func.isRequired,
  showSavingStatus: _propTypes.default.bool.isRequired,
  showValidationTooltip: _propTypes.default.bool.isRequired,
  type: _propTypes.default.object.isRequired,
  value: _propTypes.default.object // eslint-disable-next-line class-methods-use-this

});