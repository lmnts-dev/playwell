'use strict';

var _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"]) _i["return"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError("Invalid attempt to destructure non-iterable instance"); } }; }();

var chroma = require('chroma-js');
var hueName = require('./hue-name');

var lums = [9, 8, 7, 6, 5, 4, 3, 2, 1, 0].map(function (n) {
  return n + .5;
}).map(function (n) {
  return n / 10;
});

var createArray = function createArray(length) {
  var arr = [];
  for (var i = 0; i < length; i++) {
    arr.push(i);
  }
  return arr;
};

var createHues = function createHues(length) {
  var hueStep = 360 / length;
  return function (base) {
    var hues = createArray(length).map(function (n) {
      return Math.floor((base + n * hueStep) % 360);
    });

    return hues;
  };
};

var desat = function desat(n) {
  return function (hex) {
    var _chroma$hsl = chroma(hex).hsl(),
        _chroma$hsl2 = _slicedToArray(_chroma$hsl, 3),
        h = _chroma$hsl2[0],
        s = _chroma$hsl2[1],
        l = _chroma$hsl2[2];

    return chroma.hsl(h, n, l).hex();
  };
};

var createBlack = function createBlack(hex) {
  var d = desat(1 / 8)(hex);
  return chroma(d).luminance(.05).hex();
};

var createShades = function createShades(hex) {
  return lums.map(function (lum) {
    return chroma(hex).luminance(lum).hex();
  });
};

// Mappers
var keyword = function keyword(hex) {
  var _chroma$hsl3 = chroma(hex).hsl(),
      _chroma$hsl4 = _slicedToArray(_chroma$hsl3, 2),
      hue = _chroma$hsl4[0],
      sat = _chroma$hsl4[1];

  if (sat < .5) {
    return 'gray';
  }
  var name = hueName(hue);
  return name;
};

// Reducer
var toObj = function toObj(a, color) {
  var key = a[color.key] ? color.key + '2' : color.key;
  a[key] = color.value;
  return a;
};

var palx = function palx(hex) {
  var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

  var color = chroma(hex);
  var colors = [];

  var _color$hsl = color.hsl(),
      _color$hsl2 = _slicedToArray(_color$hsl, 3),
      hue = _color$hsl2[0],
      sat = _color$hsl2[1],
      lte = _color$hsl2[2];

  var hues = createHues(12)(hue);

  colors.push({
    key: 'black',
    value: createBlack('' + color.hex())
  });

  colors.push({
    key: 'gray',
    value: createShades(desat(1 / 8)('' + color.hex()))
  });

  hues.forEach(function (h) {
    var c = chroma.hsl(h, sat, lte);
    var key = keyword(c);
    colors.push({
      key: key,
      value: createShades('' + c.hex())
    });
  });

  var obj = Object.assign({
    base: hex
  }, colors.reduce(toObj, {}));

  return obj;
};

module.exports = palx;