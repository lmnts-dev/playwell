function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

import React from 'react';
import PropTypes from 'prop-types';
import UAParser from 'ua-parser-js';

var UAProvider = function (_React$Component) {
  _inherits(UAProvider, _React$Component);

  function UAProvider(props, context) {
    _classCallCheck(this, UAProvider);

    var _this = _possibleConstructorReturn(this, _React$Component.call(this, props, context));

    var uaParser = new UAParser();
    var uaResults = {
      android: false,
      ios: false,
      mobile: false,
      tablet: false,
      windows: false,
      mac: false,
      linux: false,
      computer: false,
      firefox: false,
      chrome: false,
      edge: false,
      safari: false
    };

    uaParser.setUA(props.ua);
    uaResults.android = uaParser.getOS().name === 'Android';
    uaResults.ios = uaParser.getOS().name === 'iOS';
    uaResults.mobile = uaParser.getDevice().type === 'mobile';

    uaResults.tablet = uaParser.getDevice().type === 'tablet';

    uaResults.windows = uaParser.getOS().name === 'Windows';
    uaResults.mac = uaParser.getOS().name === 'Mac OS';
    uaResults.linux = uaParser.getOS().name === 'Linux';
    uaResults.computer = uaResults.windows || uaResults.mac || uaResults.linux || uaParser.getDevice().type === undefined;

    uaResults.firefox = uaParser.getBrowser().name === 'Firefox';
    uaResults.chrome = uaParser.getBrowser().name === 'Chrome';
    uaResults.edge = uaParser.getBrowser().name === 'Edge';
    uaResults.safari = uaParser.getBrowser().name === 'Safari';

    _this.uaParser = uaParser;
    _this.uaResults = uaResults;
    return _this;
  }

  UAProvider.prototype.getChildContext = function getChildContext() {
    return {
      ua: {
        parser: this.uaParser,
        uaResults: this.uaResults
      }
    };
  };

  UAProvider.prototype.render = function render() {
    return React.Children.only(this.props.children);
  };

  return UAProvider;
}(React.Component);

if (process.env.NODE_ENV !== 'production') {
  UAProvider.propTypes = process.env.NODE_ENV !== "production" ? {
    ua: PropTypes.string.isRequired,
    children: PropTypes.element.isRequired
  } : {};
}

UAProvider.childContextTypes = {
  ua: PropTypes.object.isRequired
};

export default UAProvider;