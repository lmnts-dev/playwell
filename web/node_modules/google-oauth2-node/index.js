"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var request_1 = require("request");
var url_1 = require("url");
var http_1 = require("http");
var querystring_1 = require("querystring");
var OAuth2TokenURL = 'https://www.googleapis.com/oauth2/v4/token';
var OAuth2CodeURL = 'https://accounts.google.com/o/oauth2/v2/auth';
exports.auth = function (config) {
    return listenForTokens(config, function (port) {
        return require('opn')(OAuth2CodeURL + "?" + querystring_1.stringify({
            client_id: config.clientId,
            redirect_uri: "http://localhost:" + port,
            response_type: 'code',
            scope: config.scope
        }), { wait: false });
    });
};
var listenForTokens = function (config, ready) {
    var socketList = [];
    var server;
    var port;
    var resolveCallback;
    var rejectCallback;
    var clientId = config.clientId, clientSecret = config.clientSecret;
    var cleanup = function (cb, res, text, result) {
        res.setHeader('content-type', 'text/html; charset=utf-8');
        res.end(text);
        socketList.forEach(function (s) { return s.destroy(); });
        server.close(function () { return cb(result); });
    };
    server = http_1.createServer(function (req, res) {
        var response = function (e) { return "<span style=\"font-size: 80px;\">" + e + "</span>"; };
        var resolve = cleanup.bind(null, resolveCallback, res, response('üôå'));
        var reject = cleanup.bind(null, rejectCallback, res, response('‚ùå'));
        var params = url_1.parse(req.url, true);
        var _a = params.query, code = _a.code, error = _a.error;
        if (error) {
            reject(error);
        }
        else {
            request_1.post(OAuth2TokenURL, {
                headers: {
                    'Content-Type': 'application/x-www-form-urlencoded'
                },
                body: encodeURI("client_id=" + clientId + "&client_secret=" + clientSecret + "&redirect_uri=http://localhost:" + port + "&grant_type=authorization_code&code=" + code)
            }, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    resolve(JSON.parse(body));
                }
            });
        }
    }).listen(0, function () {
        port = server.address().port;
        ready(port);
    });
    // Used for speeding up `server.close()`.
    server.on('connection', function (socket) {
        socketList.push(socket);
        socket.on('close', function () { return socketList.splice(socketList.indexOf(socket, 1)); });
    });
    return new Promise(function (s, f) {
        resolveCallback = s;
        rejectCallback = f;
    });
};
//# sourceMappingURL=index.js.map