{"version":3,"file":"index.esm.js","sources":["../src/common/constants.js","../src/common/utils.js","../src/common/documentToNodes.js","../src/browser/normalizers.js","../src/browser/helpers.js","../src/browser/usePrismicPreview.js"],"sourcesContent":["export const IS_BROWSER = typeof window !== 'undefined'\n\nexport const GLOBAL_STORE_KEY = '___PRISMIC___'\n\nexport const IMAGE_FIELD_KEYS = [\n  'dimensions',\n  'alt',\n  'copyright',\n  'url',\n  'localFile',\n]\n","export const isFunction = x => !!(x && x.constructor && x.call && x.apply)\n\n// See: lodash.pick\nexport const pick = fields => obj =>\n  Object.keys(obj).reduce((acc, key) => {\n    if (fields.includes(key)) acc[key] = obj[key]\n    return acc\n  }, {})\n\n// See: lodash.omit\nexport const omit = fields => obj =>\n  Object.keys(obj).reduce((acc, key) => {\n    if (!fields.includes(key)) acc[key] = obj[key]\n    return acc\n  }, {})\n\n// Maps an object to a new object with key-value pairs. Mapping function must\n// return a key-value tuple.\nexport const mapObj = fn => async obj => {\n  const entries = Object.entries(obj)\n  const pairs = await Promise.all(entries.map(x => Promise.resolve(fn(x))))\n\n  const result = {}\n\n  for (let i = 0; i < pairs.length; i++) {\n    const [k, v] = pairs[i]\n    result[k] = v\n  }\n\n  return result\n}\n","import PrismicDOM from 'prismic-dom'\nimport pascalcase from 'pascalcase'\nimport compose from 'compose-tiny'\n\nimport { IMAGE_FIELD_KEYS } from '../common/constants'\nimport { pick, omit, mapObj } from './utils'\n\nconst getTypeForPath = (path, typePaths) => {\n  const stringifiedPath = JSON.stringify(path)\n  const def = typePaths.find(x => JSON.stringify(x.path) === stringifiedPath)\n\n  if (!def) return\n  if (/^\\[.*GroupType\\]$/.test(def.type)) return 'Group'\n  if (/^\\[.*SlicesType\\]$/.test(def.type)) return 'Slices'\n\n  return def.type\n}\n\nconst normalizeField = async (id, value, depth, context) => {\n  const {\n    doc,\n    typePaths,\n    createNode,\n    createNodeId,\n    createContentDigest,\n    normalizeImageField,\n    normalizeLinkField,\n    normalizeSlicesField,\n    normalizeStructuredTextField,\n  } = context\n\n  const type = getTypeForPath([...depth, id], typePaths)\n\n  switch (type) {\n    case 'PrismicImageType':\n      const base = await compose(\n        baseValue => normalizeImageField(id, baseValue, depth, context),\n        pick(IMAGE_FIELD_KEYS),\n      )(value)\n\n      // Thumbnail image data are siblings of the base image data so we need to\n      // smartly extract and normalize the key-value pairs.\n      const thumbs = await compose(\n        mapObj(async ([k, v]) => [\n          k,\n          await normalizeImageField(id, v, depth, context),\n        ]),\n        omit(IMAGE_FIELD_KEYS),\n      )(value)\n\n      return {\n        ...base,\n        ...thumbs,\n      }\n\n    case 'PrismicStructuredTextType':\n      return await normalizeStructuredTextField(id, value, depth, context)\n\n    case 'PrismicLinkType':\n      return await normalizeLinkField(id, value, depth, context)\n\n    case 'Group':\n      return await normalizeObjs(value, [...depth, id], context)\n\n    case 'Slices':\n      const sliceNodeIds = await Promise.all(\n        value.map(async (v, idx) => {\n          const sliceNodeId = createNodeId(`${doc.type} ${doc.id} ${id} ${idx}`)\n\n          const normalizedPrimary = await normalizeObj(\n            v.primary || {},\n            [...depth, id, v.slice_type, 'primary'],\n            context,\n          )\n\n          const normalizedItems = await normalizeObjs(\n            v.items || [],\n            [...depth, id, v.slice_type, 'items'],\n            context,\n          )\n\n          createNode({\n            ...v,\n            id: sliceNodeId,\n            primary: normalizedPrimary,\n            items: normalizedItems,\n            internal: {\n              type: pascalcase(`Prismic ${doc.type} ${id} ${v.slice_type}`),\n              contentDigest: createContentDigest(v),\n            },\n          })\n\n          return sliceNodeId\n        }),\n      )\n\n      return await normalizeSlicesField(\n        id,\n        sliceNodeIds,\n        [...depth, id],\n        context,\n      )\n\n    default:\n      return value\n  }\n}\n\n// Returns a promise that resolves after normalizing each property in an\n// object.\nconst normalizeObj = async (obj = {}, depth, context) =>\n  await mapObj(async ([k, v]) => [\n    k,\n    await normalizeField(k, v, depth, context),\n  ])(obj)\n\n// Returns a promise that resolves after normalizing a list of objects.\nconst normalizeObjs = (objs = [], depth, context) =>\n  Promise.all(objs.map(obj => normalizeObj(obj, depth, context)))\n\nexport const documentToNodes = async (doc, context) => {\n  const {\n    createNodeId,\n    createContentDigest,\n    createNode,\n    pluginOptions,\n  } = context\n  const { linkResolver } = pluginOptions\n\n  const docNodeId = createNodeId(`${doc.type} ${doc.id}`)\n  const normalizedData = await normalizeObj(doc.data, [doc.type, 'data'], {\n    ...context,\n    doc,\n    docNodeId,\n  })\n\n  const linkResolverForDoc = linkResolver({ node: doc })\n\n  createNode({\n    ...doc,\n    id: docNodeId,\n    prismicId: doc.id,\n    data: normalizedData,\n    dataString: JSON.stringify(doc.data),\n    dataRaw: doc.data,\n    url: linkResolverForDoc(doc),\n    internal: {\n      type: pascalcase(`Prismic ${doc.type}`),\n      contentDigest: createContentDigest(doc),\n    },\n  })\n\n  return docNodeId\n}\n","import Prismic from 'prismic-javascript'\nimport PrismicDOM from 'prismic-dom'\n\nimport { documentToNodes } from '../common/documentToNodes'\n\n// Normalizes a PrismicStructuredTextType field by providing HTML and text\n// versions of the value using `prismic-dom` on the `html` and `text` keys,\n// respectively. The raw value is provided on the `raw` key.\nexport const normalizeStructuredTextField = async (\n  id,\n  value,\n  _depth,\n  context,\n) => {\n  const { doc, pluginOptions } = context\n  const { linkResolver, htmlSerializer } = pluginOptions\n\n  const linkResolverForField = linkResolver({ key: id, value, node: doc })\n  const htmlSerializerForField = htmlSerializer({ key: id, value, node: doc })\n\n  return {\n    html: PrismicDOM.RichText.asHtml(\n      value,\n      linkResolverForField,\n      htmlSerializerForField,\n    ),\n    text: PrismicDOM.RichText.asText(value),\n    raw: value,\n  }\n}\n\nconst fetchAndCreateDocumentNodes = async (value, context) => {\n  const { createNode, createNodeId, hasNodeById, pluginOptions } = context\n  const { repositoryName, accessToken, fetchLinks } = pluginOptions\n\n  const linkedDocId = createNodeId(`${value.type} ${value.id}`)\n\n  if (hasNodeById(linkedDocId)) return\n\n  // Create a key in our cache to prevent infinite recursion.\n  createNode({ id: linkedDocId })\n\n  // Query Prismic's API for the actual document node.\n  const apiEndpoint = `https://${repositoryName}.cdn.prismic.io/api/v2`\n  const api = await Prismic.api(apiEndpoint, { accessToken })\n  const doc = await api.getByID(value.id, { fetchLinks })\n\n  // Normalize the document.\n  await documentToNodes(doc, context)\n}\n\nexport const normalizeLinkField = async (id, value, _depth, context) => {\n  const { doc, getNodeById, createNodeId, pluginOptions } = context\n  const { linkResolver } = pluginOptions\n\n  const linkResolverForField = linkResolver({ key: id, value, node: doc })\n  const linkedDocId = createNodeId(`${value.type} ${value.id}`)\n\n  // Fetches, normalizes, and caches linked document if not present in cache.\n  if (value.link_type === 'Document' && value.id)\n    await fetchAndCreateDocumentNodes(value, context)\n\n  const proxyHandler = {\n    get: (obj, prop) => {\n      if (prop === 'document') {\n        if (value.link_type === 'Document') return getNodeById(linkedDocId)\n\n        return null\n      }\n\n      return obj[prop]\n    },\n  }\n\n  return new Proxy(\n    {\n      ...value,\n      url: PrismicDOM.Link.url(value, linkResolverForField),\n      raw: value,\n      document: null, // TODO: ???????\n    },\n    proxyHandler,\n  )\n}\n\nexport const normalizeSlicesField = async (_id, value, _depth, context) => {\n  const { hasNodeById, getNodeById } = context\n\n  return new Proxy(value, {\n    get: (obj, prop) => {\n      if (hasNodeById(obj[prop])) {\n        const node = getNodeById(obj[prop])\n\n        return {\n          ...node,\n          __typename: node.internal.type,\n        }\n      }\n\n      return obj[prop]\n    },\n  })\n}\n\nexport const normalizeImageField = async (_id, value) => ({\n  ...value,\n  localFile: null,\n})\n","import Prismic from 'prismic-javascript'\nimport uuidv5 from 'uuid/v5'\nimport md5 from 'md5'\nimport traverse from 'traverse'\nimport camelCase from 'camelcase'\nimport mergeWith from 'lodash.mergewith'\nimport {\n  array as yupArray,\n  mixed as yupMixed,\n  object as yupObject,\n  string as yupString,\n} from 'yup'\n\nimport { IS_BROWSER, GLOBAL_STORE_KEY } from '../common/constants'\nimport { documentToNodes } from '../common/documentToNodes'\nimport { isFunction } from '../common/utils'\nimport {\n  normalizeImageField,\n  normalizeLinkField,\n  normalizeSlicesField,\n  normalizeStructuredTextField,\n} from './normalizers'\n\nconst seedConstant = `638f7a53-c567-4eca-8fc1-b23efb1cfb2b`\nconst createNodeId = id =>\n  uuidv5(id, uuidv5('gatsby-source-prismic', seedConstant))\nconst createContentDigest = obj => md5(JSON.stringify(obj))\n\nconst nodeStore = new Map()\nconst createNode = node => nodeStore.set(node.id, node)\nconst hasNodeById = id => nodeStore.has(id)\nconst getNodeById = id => nodeStore.get(id)\n\n/**\n * @typedef {Object} pluginOptions\n * @property {string} repositoryName - Name of the Prismic repository to query.\n * @property {string} accessToken - API token to query the Prismic API.\n * @property {funcion} fetchLinks - Array of values that determines how Prismic fetches linked fields.\n * @property {function} linkResolver - Function for Prismic to resolve links in the queried document.\n *    @see {@link https://prismic.io/docs/javascript/beyond-the-api/link-resolving}\n * @property {function} htmlSerializer - Function that allows Prismic to preprocess rich text fields.\n *    @see {@link https://prismic.io/docs/javascript/beyond-the-api/html-serializer}\n * @property {string} typePathsFilenamePrefix - Prefix to the typePaths json we generate at build time.\n * @property {string} schemasDigest - Used for gatsby internals.\n * @property {string} pathResolver - Function that allows for custom preview page path resolving.\n */\n\n/**\n * Validates location sent to our hook.\n * @private\n *\n * @param {Object} rawLocation - Location object from `@reach/router`\n *\n * @throws When `location is not valid.\n */\nexport const validateLocation = rawLocation => {\n  const schema = yupObject().shape({\n    search: yupString().nullable(),\n    ancestorOrigins: yupObject()\n      .notRequired()\n      .nullable(),\n    assign: yupMixed()\n      .notRequired()\n      .nullable(),\n    hash: yupString()\n      .notRequired()\n      .nullable(),\n    host: yupString()\n      .notRequired()\n      .nullable(),\n    hostname: yupString()\n      .notRequired()\n      .nullable(),\n    href: yupString()\n      .notRequired()\n      .nullable(),\n    key: yupString()\n      .notRequired()\n      .nullable(),\n    origin: yupString()\n      .notRequired()\n      .nullable(),\n    pathname: yupString()\n      .notRequired()\n      .nullable(),\n    port: yupString()\n      .notRequired()\n      .nullable(),\n    protocol: yupString()\n      .notRequired()\n      .nullable(),\n    reload: yupMixed()\n      .notRequired()\n      .nullable(),\n    replace: yupMixed()\n      .notRequired()\n      .nullable(),\n    state: yupObject()\n      .notRequired()\n      .nullable(),\n    toString: yupMixed()\n      .notRequired()\n      .nullable(),\n  })\n\n  return schema.validateSync(rawLocation)\n}\n\n/**\n * Validates plugin options sent to our hook.\n * @private\n *\n * @param {Object} rawPluginOptions - The {@link pluginOptions} to validate.\n *\n * @throws When `pluginOptions` are not valid.\n */\nexport const validatePluginOptions = rawPluginOptions => {\n  const schema = yupObject().shape({\n    repositoryName: yupString()\n      .nullable()\n      .required('Invalid Repository Name.'),\n    accessToken: yupString()\n      .nullable()\n      .required('Invalid access token.'),\n    fetchLinks: yupArray()\n      .of(yupString().required())\n      .default([]),\n    linkResolver: yupMixed()\n      .test('is function', '${path} is not a function', isFunction)\n      .default(() => () => {}),\n    htmlSerializer: yupMixed()\n      .test('is function', '${path} is not a function', isFunction)\n      .default(() => () => {}),\n    typePathsFilenamePrefix: yupString()\n      .nullable()\n      .required('Invalid typePaths filename prefix.'),\n    schemasDigest: yupString()\n      .nullable()\n      .required('Invalid Schemas digest.'),\n    pathResolver: yupMixed()\n      .nullable()\n      .test(\n        'is function',\n        '${path} is not a function',\n        value => value === undefined || isFunction(value),\n      ),\n    shouldNormalizeImage: yupMixed()\n      .notRequired()\n      .nullable(),\n    lang: yupString()\n      .notRequired()\n      .nullable(),\n    plugins: yupArray()\n      .notRequired()\n      .nullable(),\n  })\n\n  return schema.validateSync(rawPluginOptions)\n}\n\n/**\n * Retrieves plugin options from `window`.\n * @private\n *\n * @param {string} repositoryName - Name of the repository.\n * @returns Global plugin options. Only plugin options that can be serialized\n * by JSON.stringify() are provided.\n */\nexport const getGlobalPluginOptions = repositoryName => {\n  return IS_BROWSER ? (window[GLOBAL_STORE_KEY] || {})[repositoryName] : {}\n}\n/**\n * Fetches raw Prismic preview document data from their api.\n * @private\n *\n * @param {string} id - ID of the prismic document to preview.\n * @param {Object} pluginOptions - The {@link pluginOptions} to fetch preview data with.\n *\n * @returns Raw preview data object from Prismic.\n */\nexport const fetchPreviewData = async (id, pluginOptions) => {\n  const { repositoryName, accessToken, fetchLinks } = pluginOptions\n\n  const apiEndpoint = `https://${repositoryName}.cdn.prismic.io/api/v2`\n  const client = await Prismic.getApi(apiEndpoint, { accessToken })\n\n  return client.getByID(id, { fetchLinks })\n}\n\n/**\n * Retrieves the typePaths definition file that we create at build time to also normalize our types in the browser.\n * @private\n *\n * @param {Object} pluginOptions - The {@link pluginOptions} to get our type paths file name from\n * @returns The typePaths JSON object for use when normalizing data in the browser.\n */\nexport const fetchTypePaths = async pluginOptions => {\n  const { typePathsFilenamePrefix, schemasDigest } = pluginOptions\n\n  const req = await fetch(`/${typePathsFilenamePrefix}${schemasDigest}.json`, {\n    headers: { 'Content-Type': 'application/json' },\n  })\n\n  return await req.json()\n}\n\n/**\n * Normalizes a preview response from Prismic to be the same shape as what is generated at build time.\n * @private\n *\n * @param {Object} previewData - previewData from `fetchPreviewData()` @see {@link fetchPreviewData} for more info.\n * @param {Object} typePaths - typePaths from `fetchTypePaths()` @see {@link fetchTypePaths} for more info.\n * @param {Object} pluginOptions - The {@link pluginOptions} to use when normalizing and fetching data.\n */\nexport const normalizePreviewData = async (\n  previewData,\n  typePaths,\n  pluginOptions,\n) => {\n  const rootNodeId = await documentToNodes(previewData, {\n    typePaths,\n    createNode,\n    createNodeId,\n    createContentDigest,\n    hasNodeById,\n    getNodeById,\n    pluginOptions,\n    normalizeImageField,\n    normalizeLinkField,\n    normalizeSlicesField,\n    normalizeStructuredTextField,\n  })\n\n  const rootNode = nodeStore.get(rootNodeId)\n  const prefixedType = camelCase(rootNode.internal.type)\n\n  return {\n    [prefixedType]: rootNode,\n  }\n}\n\n/**\n * Function that is passed to lodash's `mergeWith()` to replace arrays during object merges instead of\n * actually merging them. This fixes unintended behavior when merging repeater fields from previews.\n * @private\n *\n * @param {Object} obj - Object being merged.\n * @param {Object} src - Source object being merge.\n *\n * @returns src when obj is an Array.\n */\nconst mergeCopyArrays = (obj, src) => (Array.isArray(obj) ? src : undefined)\n\n/**\n * Traversally merges key-value pairs.\n * @private\n *\n * @param {Object} staticData - Static data generated at buildtime.\n * @param {Object} previewData - Normalized preview data. @see {@link normalizePreviewData} for more info.\n * @param {String} key - Key that determines the preview data type to replace inside static data.\n *\n * @returns A new object containing the traversally merged key-value pairs from `previewData` and `staticData`\n */\nconst _traversalMerge = (staticData, previewData, key) => {\n  const { data: previewDocData, id: previewId } = previewData[key]\n\n  function handleNode(node) {\n    if (typeof node === 'object' && node.id === previewId) {\n      this.update(mergeWith(node, { data: previewDocData }, mergeCopyArrays))\n    }\n  }\n\n  return traverse(staticData).map(handleNode)\n}\n\n/**\n * Merges static and preview data objects together. If the objects share the same top level key, perform\n * a recursive merge. If the objects do not share the same top level key, traversally merge them.\n * @private\n *\n * @param {Object} staticData - Static data generated at buildtime.\n * @param {Object} previewData - Normalized preview data. @see {@link normalizePreviewData} for more info.\n *\n * @returns Object containing the merge contents of staticData and previewData.\n */\nconst _mergeStaticData = (staticData, previewData) => {\n  const previewKey = Object.keys(previewData)[0]\n\n  if (!staticData.hasOwnProperty(previewKey))\n    return _traversalMerge(staticData, previewData, previewKey)\n\n  return mergeWith(staticData, previewData, mergeCopyArrays)\n}\n\n/**\n * Helper that merge's Gatsby's static data with normalized preview data.\n * If the custom types are the same, deep merge with static data.\n * If the custom types are different, deeply replace any document in the static data that matches the preivew document's ID.\n * @public\n *\n * @param {Object} data - Data to merge.\n * @param data.staticData - Static data from Gatsby.\n * @param data.previewData - Preview data from `usePrismicPreview()`.\n *\n * @returns An object containing the merged contents of previewData and staticData.\n */\nexport const mergePrismicPreviewData = ({ staticData, previewData }) => {\n  if (!staticData && !previewData)\n    throw new Error(\n      'Invalid data! Please provide at least staticData or previewData.',\n    )\n  if (!staticData) return previewData\n  if (!previewData) return staticData\n\n  return _mergeStaticData(staticData, previewData)\n}\n","import { useEffect, useState, useCallback } from 'react'\nimport { set as setCookie } from 'es-cookie'\nimport Prismic from 'prismic-javascript'\nimport queryString from 'query-string'\n\nimport {\n  validateLocation,\n  validatePluginOptions,\n  getGlobalPluginOptions,\n  fetchTypePaths,\n  fetchPreviewData,\n  normalizePreviewData,\n} from './helpers'\n\nexport { mergePrismicPreviewData } from './helpers'\n\n/**\n * @typedef {Object} pluginOptions\n * @property {string} repositoryName - Name of the Prismic repository to query.\n * @property {string} accessToken - API token to query the Prismic API.\n * @property {funcion} fetchLinks - Array of values that determines how Prismic fetches linked fields.\n * @property {function} linkResolver - Function for Prismic to resolve links in the queried document.\n *    @see {@link https://prismic.io/docs/javascript/beyond-the-api/link-resolving}\n * @property {function} htmlSerializer - Function that allows Prismic to preprocess rich text fields.\n *    @see {@link https://prismic.io/docs/javascript/beyond-the-api/html-serializer}\n * @property {string} typePathsFilenamePrefix - Prefix to the typePaths json we generate at build time.\n * @property {string} schemasDigest - Used for gatsby internals.\n * @property {string} pathResolver - Function that allows for custom preview page path resolving.\n */\n\n/**\n * React hook providing preview data from Prismic identical in shape to the data\n * created at build time. Images are not processed due to running in the browser.\n * Instead, images reutrn their URL.\n * @public\n *\n * @param {Object} rawLocation - Location object from @reach/router.\n * @param {Object} rawPluginOptions - The {@link pluginOptions} for this preview.\n *\n * @returns An object containing normalized Prismic preview data directly from\n *    the Prismic API.\n */\nexport const usePrismicPreview = (rawLocation, rawPluginOptions = {}) => {\n  const [state, setState] = useState({ previewData: null, path: null })\n\n  const globalPluginOptions =\n    getGlobalPluginOptions(rawPluginOptions.repositoryName) || {}\n  rawPluginOptions = {\n    schemasDigest: globalPluginOptions.schemasDigest,\n    ...globalPluginOptions.pluginOptions,\n    ...rawPluginOptions,\n  }\n\n  const location = validateLocation(rawLocation)\n  const { token, documentId: docID } = queryString.parse(location.search)\n\n  const isPreview = Boolean(token && docID)\n\n  let pluginOptions = rawPluginOptions\n  if (isPreview) pluginOptions = validatePluginOptions(rawPluginOptions)\n\n  const asyncEffect = useCallback(async () => {\n    // If not a preview, reset state and return early.\n    if (!isPreview) return\n\n    // Required to send preview cookie on all API requests on future routes.\n    setCookie(Prismic.previewCookie, token)\n\n    const rawPreviewData = await fetchPreviewData(docID, pluginOptions)\n    const typePaths = await fetchTypePaths(pluginOptions)\n    const normalizedPreviewData = await normalizePreviewData(\n      rawPreviewData,\n      typePaths,\n      pluginOptions,\n    )\n\n    const pathResolver =\n      pluginOptions.pathResolver || pluginOptions.linkResolver\n\n    setState({\n      previewData: normalizedPreviewData,\n      path: pathResolver({})(rawPreviewData),\n    })\n  }, [docID, pluginOptions, token])\n\n  useEffect(() => {\n    asyncEffect()\n  }, [])\n\n  return { ...state, isPreview }\n}\n"],"names":["IS_BROWSER","window","GLOBAL_STORE_KEY","IMAGE_FIELD_KEYS","isFunction","x","constructor","call","apply","pick","fields","obj","Object","keys","reduce","acc","key","includes","omit","mapObj","fn","entries","pairs","Promise","all","map","resolve","result","i","length","k","v","getTypeForPath","path","typePaths","stringifiedPath","JSON","stringify","def","find","test","type","normalizeField","id","value","depth","context","doc","createNode","createNodeId","createContentDigest","normalizeImageField","normalizeLinkField","normalizeSlicesField","normalizeStructuredTextField","base","compose","baseValue","thumbs","normalizeObjs","sliceNodeIds","idx","sliceNodeId","normalizedPrimary","normalizeObj","primary","slice_type","normalizedItems","items","internal","pascalcase","contentDigest","objs","documentToNodes","pluginOptions","linkResolver","docNodeId","normalizedData","data","linkResolverForDoc","node","prismicId","dataString","dataRaw","url","_depth","htmlSerializer","linkResolverForField","htmlSerializerForField","html","PrismicDOM","RichText","asHtml","text","asText","raw","fetchAndCreateDocumentNodes","hasNodeById","repositoryName","accessToken","fetchLinks","linkedDocId","apiEndpoint","api","Prismic","getByID","getNodeById","link_type","proxyHandler","get","prop","Proxy","Link","document","_id","__typename","localFile","seedConstant","uuidv5","md5","nodeStore","Map","set","has","validateLocation","rawLocation","schema","yupObject","shape","search","yupString","nullable","ancestorOrigins","notRequired","assign","yupMixed","hash","host","hostname","href","origin","pathname","port","protocol","reload","replace","state","toString","validateSync","validatePluginOptions","rawPluginOptions","required","yupArray","of","default","typePathsFilenamePrefix","schemasDigest","pathResolver","undefined","shouldNormalizeImage","lang","plugins","getGlobalPluginOptions","fetchPreviewData","client","getApi","fetchTypePaths","req","fetch","headers","json","normalizePreviewData","previewData","rootNodeId","rootNode","prefixedType","camelCase","mergeCopyArrays","src","Array","isArray","_traversalMerge","staticData","previewDocData","previewId","handleNode","update","mergeWith","traverse","_mergeStaticData","previewKey","hasOwnProperty","mergePrismicPreviewData","Error","usePrismicPreview","setState","useState","globalPluginOptions","location","token","documentId","docID","queryString","parse","isPreview","Boolean","asyncEffect","useCallback","setCookie","previewCookie","rawPreviewData","normalizedPreviewData","useEffect"],"mappings":"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"}