{"version":3,"file":"index.esm.js","sources":["../src/common/utils.js","../src/common/validatePluginOptions.js","../src/common/constants.js","../src/common/documentToNodes.js","../src/browser/normalizers.js","../src/browser/helpers.js","../src/browser/usePrismicPreview.js"],"sourcesContent":["export const isFunction = x => !!(x && x.constructor && x.call && x.apply)\n\n// See: lodash.pick\nexport const pick = fields => obj =>\n  Object.keys(obj).reduce((acc, key) => {\n    if (fields.includes(key)) acc[key] = obj[key]\n    return acc\n  }, {})\n\n// See: lodash.omit\nexport const omit = fields => obj =>\n  Object.keys(obj).reduce((acc, key) => {\n    if (!fields.includes(key)) acc[key] = obj[key]\n    return acc\n  }, {})\n\n// Maps an object to a new object with key-value pairs. Mapping function must\n// return a key-value tuple.\nexport const mapObj = fn => async obj => {\n  const entries = Object.entries(obj)\n  const pairs = await Promise.all(entries.map(x => Promise.resolve(fn(x))))\n\n  const result = {}\n\n  for (let i = 0; i < pairs.length; i++) {\n    const [k, v] = pairs[i]\n    result[k] = v\n  }\n\n  return result\n}\n","import {\n  array as yupArray,\n  mixed as yupMixed,\n  object as yupObject,\n  string as yupString,\n} from 'yup'\n\nimport { isFunction } from './utils'\n\nconst baseValidations = {\n  repositoryName: yupString()\n    .strict()\n    .required(),\n  accessToken: yupString()\n    .strict()\n    .required(),\n  linkResolver: yupMixed()\n    .test('is function', '${path} is not a function', isFunction)\n    .default(() => () => () => {}),\n  fetchLinks: yupArray()\n    .of(\n      yupString()\n        .strict()\n        .required(),\n    )\n    .default([]),\n  htmlSerializer: yupMixed()\n    .test('is function', '${path} is not a function', isFunction)\n    .default(() => () => () => {}),\n  schemas: yupObject()\n    .strict()\n    .required(),\n  lang: yupString()\n    .strict()\n    .default('*'),\n  shouldNormalizeImage: yupMixed()\n    .test('is function', '${path} is not a function', isFunction)\n    .default(() => () => true),\n  plugins: yupArray()\n    .max(0)\n    .default([]),\n  // Default value set in validatePluginOptions below.\n  typePathsFilenamePrefix: yupString(),\n\n  // Browser-only validations\n  pathResolver: yupMixed().test(\n    'is function',\n    '${path} is not a function',\n    x => typeof x === 'undefined' || isFunction(x),\n  ),\n  schemasDigest: yupString()\n    .strict()\n    .required(),\n}\n\nexport const validatePluginOptions = (\n  pluginOptions,\n  filterValidations = {},\n) => {\n  // Must do this here with access to pluginOptions.\n  if (pluginOptions.repositoryName)\n    baseValidations.typePathsFilenamePrefix.default(\n      `prismic-typepaths---${pluginOptions.repositoryName &&\n        pluginOptions.repositoryName.toString()}-`,\n    )\n  else baseValidations.typePathsFilenamePrefix.default(`prismic-typepaths---`)\n\n  // Filter validations based on the filterValidations param.\n  const filteredValidations = Object.keys(baseValidations).reduce(\n    (acc, key) => {\n      if (filterValidations[key] || !filterValidations.hasOwnProperty(key))\n        acc[key] = baseValidations[key]\n      return acc\n    },\n    {},\n  )\n\n  const schema = yupObject().shape(filteredValidations)\n\n  return schema.validateSync(pluginOptions, { abortEarly: false })\n}\n","export const IS_BROWSER = typeof window !== 'undefined'\n\nexport const GLOBAL_STORE_KEY = '___PRISMIC___'\n\nexport const IMAGE_FIELD_KEYS = [\n  'dimensions',\n  'alt',\n  'copyright',\n  'url',\n  'localFile',\n]\n","import PrismicDOM from 'prismic-dom'\nimport pascalcase from 'pascalcase'\nimport compose from 'compose-tiny'\n\nimport { IMAGE_FIELD_KEYS } from '../common/constants'\nimport { pick, omit, mapObj } from './utils'\n\nconst getTypeForPath = (path, typePaths) => {\n  const stringifiedPath = JSON.stringify(path)\n  const def = typePaths.find(x => JSON.stringify(x.path) === stringifiedPath)\n\n  if (!def) return\n  if (/^\\[.*GroupType\\]$/.test(def.type)) return 'Group'\n  if (/^\\[.*SlicesType\\]$/.test(def.type)) return 'Slices'\n\n  return def.type\n}\n\nconst normalizeField = async (id, value, depth, context) => {\n  const {\n    doc,\n    typePaths,\n    createNode,\n    createNodeId,\n    createContentDigest,\n    normalizeImageField,\n    normalizeLinkField,\n    normalizeSlicesField,\n    normalizeStructuredTextField,\n  } = context\n\n  const type = getTypeForPath([...depth, id], typePaths)\n\n  switch (type) {\n    case 'PrismicImageType':\n      const base = await compose(\n        baseValue => normalizeImageField(id, baseValue, depth, context),\n        pick(IMAGE_FIELD_KEYS),\n      )(value)\n\n      // Thumbnail image data are siblings of the base image data so we need to\n      // smartly extract and normalize the key-value pairs.\n      const thumbs = await compose(\n        mapObj(async ([k, v]) => [\n          k,\n          await normalizeImageField(id, v, depth, context),\n        ]),\n        omit(IMAGE_FIELD_KEYS),\n      )(value)\n\n      return {\n        ...base,\n        ...thumbs,\n      }\n\n    case 'PrismicStructuredTextType':\n      return await normalizeStructuredTextField(id, value, depth, context)\n\n    case 'PrismicLinkType':\n      return await normalizeLinkField(id, value, depth, context)\n\n    case 'Group':\n      return await normalizeObjs(value, [...depth, id], context)\n\n    case 'Slices':\n      const sliceNodeIds = await Promise.all(\n        value.map(async (v, idx) => {\n          const sliceNodeId = createNodeId(`${doc.type} ${doc.id} ${id} ${idx}`)\n\n          const normalizedPrimary = await normalizeObj(\n            v.primary || {},\n            [...depth, id, v.slice_type, 'primary'],\n            context,\n          )\n\n          const normalizedItems = await normalizeObjs(\n            v.items || [],\n            [...depth, id, v.slice_type, 'items'],\n            context,\n          )\n\n          createNode({\n            ...v,\n            id: sliceNodeId,\n            primary: normalizedPrimary,\n            items: normalizedItems,\n            internal: {\n              type: pascalcase(`Prismic ${doc.type} ${id} ${v.slice_type}`),\n              contentDigest: createContentDigest(v),\n            },\n          })\n\n          return sliceNodeId\n        }),\n      )\n\n      return await normalizeSlicesField(\n        id,\n        sliceNodeIds,\n        [...depth, id],\n        context,\n      )\n\n    default:\n      return value\n  }\n}\n\n// Returns a promise that resolves after normalizing each property in an\n// object.\nconst normalizeObj = async (obj = {}, depth, context) =>\n  await mapObj(async ([k, v]) => [\n    k,\n    await normalizeField(k, v, depth, context),\n  ])(obj)\n\n// Returns a promise that resolves after normalizing a list of objects.\nconst normalizeObjs = (objs = [], depth, context) =>\n  Promise.all(objs.map(obj => normalizeObj(obj, depth, context)))\n\nexport const documentToNodes = async (doc, context) => {\n  const {\n    createNodeId,\n    createContentDigest,\n    createNode,\n    pluginOptions,\n  } = context\n  const { linkResolver } = pluginOptions\n\n  const docNodeId = createNodeId(`${doc.type} ${doc.id}`)\n  const normalizedData = await normalizeObj(doc.data, [doc.type, 'data'], {\n    ...context,\n    doc,\n    docNodeId,\n  })\n\n  const linkResolverForDoc = linkResolver({ node: doc })\n\n  createNode({\n    ...doc,\n    id: docNodeId,\n    prismicId: doc.id,\n    data: normalizedData,\n    dataString: JSON.stringify(doc.data),\n    dataRaw: doc.data,\n    url: linkResolverForDoc(doc),\n    internal: {\n      type: pascalcase(`Prismic ${doc.type}`),\n      contentDigest: createContentDigest(doc),\n    },\n  })\n\n  return docNodeId\n}\n","import Prismic from 'prismic-javascript'\nimport PrismicDOM from 'prismic-dom'\n\nimport { documentToNodes } from '../common/documentToNodes'\n\n// Normalizes a PrismicStructuredTextType field by providing HTML and text\n// versions of the value using `prismic-dom` on the `html` and `text` keys,\n// respectively. The raw value is provided on the `raw` key.\nexport const normalizeStructuredTextField = async (\n  id,\n  value,\n  _depth,\n  context,\n) => {\n  const { doc, pluginOptions } = context\n  const { linkResolver, htmlSerializer } = pluginOptions\n\n  const linkResolverForField = linkResolver({ key: id, value, node: doc })\n  const htmlSerializerForField = htmlSerializer({ key: id, value, node: doc })\n\n  return {\n    html: PrismicDOM.RichText.asHtml(\n      value,\n      linkResolverForField,\n      htmlSerializerForField,\n    ),\n    text: PrismicDOM.RichText.asText(value),\n    raw: value,\n  }\n}\n\nconst fetchAndCreateDocumentNodes = async (value, context) => {\n  const { createNode, createNodeId, hasNodeById, pluginOptions } = context\n  const { repositoryName, accessToken, fetchLinks } = pluginOptions\n\n  const linkedDocId = createNodeId(`${value.type} ${value.id}`)\n\n  if (hasNodeById(linkedDocId)) return\n\n  // Create a key in our cache to prevent infinite recursion.\n  createNode({ id: linkedDocId })\n\n  // Query Prismic's API for the actual document node.\n  const apiEndpoint = `https://${repositoryName}.cdn.prismic.io/api/v2`\n  const api = await Prismic.api(apiEndpoint, { accessToken })\n  const doc = await api.getByID(value.id, { fetchLinks })\n\n  // Normalize the document.\n  await documentToNodes(doc, context)\n}\n\nexport const normalizeLinkField = async (id, value, _depth, context) => {\n  const { doc, getNodeById, createNodeId, pluginOptions } = context\n  const { linkResolver } = pluginOptions\n\n  const linkResolverForField = linkResolver({ key: id, value, node: doc })\n  const linkedDocId = createNodeId(`${value.type} ${value.id}`)\n\n  // Fetches, normalizes, and caches linked document if not present in cache.\n  if (value.link_type === 'Document' && value.id)\n    await fetchAndCreateDocumentNodes(value, context)\n\n  const proxyHandler = {\n    get: (obj, prop) => {\n      if (prop === 'document') {\n        if (value.link_type === 'Document') return getNodeById(linkedDocId)\n\n        return null\n      }\n\n      return obj[prop]\n    },\n  }\n\n  return new Proxy(\n    {\n      ...value,\n      url: PrismicDOM.Link.url(value, linkResolverForField),\n      raw: value,\n      document: null, // TODO: ???????\n    },\n    proxyHandler,\n  )\n}\n\nexport const normalizeSlicesField = async (_id, value, _depth, context) => {\n  const { hasNodeById, getNodeById } = context\n\n  return new Proxy(value, {\n    get: (obj, prop) => {\n      if (hasNodeById(obj[prop])) {\n        const node = getNodeById(obj[prop])\n\n        return {\n          ...node,\n          __typename: node.internal.type,\n        }\n      }\n\n      return obj[prop]\n    },\n  })\n}\n\nexport const normalizeImageField = async (_id, value) => ({\n  ...value,\n  localFile: null,\n})\n","import Prismic from 'prismic-javascript'\nimport uuidv5 from 'uuid/v5'\nimport md5 from 'md5'\nimport traverse from 'traverse'\nimport camelCase from 'camelcase'\nimport mergeWith from 'lodash.mergewith'\nimport cloneDeep from 'lodash.clonedeep'\nimport {\n  array as yupArray,\n  mixed as yupMixed,\n  object as yupObject,\n  string as yupString,\n} from 'yup'\n\nimport { IS_BROWSER, GLOBAL_STORE_KEY } from '../common/constants'\nimport { documentToNodes } from '../common/documentToNodes'\nimport { isFunction } from '../common/utils'\nimport {\n  normalizeImageField,\n  normalizeLinkField,\n  normalizeSlicesField,\n  normalizeStructuredTextField,\n} from './normalizers'\n\nconst seedConstant = `638f7a53-c567-4eca-8fc1-b23efb1cfb2b`\nconst createNodeId = id =>\n  uuidv5(id, uuidv5('gatsby-source-prismic', seedConstant))\nconst createContentDigest = obj => md5(JSON.stringify(obj))\n\nconst nodeStore = new Map()\nconst createNode = node => nodeStore.set(node.id, node)\nconst hasNodeById = id => nodeStore.has(id)\nconst getNodeById = id => nodeStore.get(id)\n\n/**\n * @typedef {Object} pluginOptions\n * @property {string} repositoryName - Name of the Prismic repository to query.\n * @property {string} accessToken - API token to query the Prismic API.\n * @property {funcion} fetchLinks - Array of values that determines how Prismic fetches linked fields.\n * @property {function} linkResolver - Function for Prismic to resolve links in the queried document.\n *    @see {@link https://prismic.io/docs/javascript/beyond-the-api/link-resolving}\n * @property {function} htmlSerializer - Function that allows Prismic to preprocess rich text fields.\n *    @see {@link https://prismic.io/docs/javascript/beyond-the-api/html-serializer}\n * @property {string} typePathsFilenamePrefix - Prefix to the typePaths json we generate at build time.\n * @property {string} schemasDigest - Used for gatsby internals.\n * @property {string} pathResolver - Function that allows for custom preview page path resolving.\n */\n\n/**\n * Validates location sent to our hook.\n * @private\n *\n * @param {Object} rawLocation - Location object from `@reach/router`\n *\n * @throws When `location is not valid.\n */\nexport const validateLocation = rawLocation => {\n  const schema = yupObject().shape({\n    search: yupString().nullable(),\n    ancestorOrigins: yupObject()\n      .notRequired()\n      .nullable(),\n    assign: yupMixed()\n      .notRequired()\n      .nullable(),\n    hash: yupString()\n      .notRequired()\n      .nullable(),\n    host: yupString()\n      .notRequired()\n      .nullable(),\n    hostname: yupString()\n      .notRequired()\n      .nullable(),\n    href: yupString()\n      .notRequired()\n      .nullable(),\n    key: yupString()\n      .notRequired()\n      .nullable(),\n    origin: yupString()\n      .notRequired()\n      .nullable(),\n    pathname: yupString()\n      .notRequired()\n      .nullable(),\n    port: yupString()\n      .notRequired()\n      .nullable(),\n    protocol: yupString()\n      .notRequired()\n      .nullable(),\n    reload: yupMixed()\n      .notRequired()\n      .nullable(),\n    replace: yupMixed()\n      .notRequired()\n      .nullable(),\n    state: yupObject()\n      .notRequired()\n      .nullable(),\n    toString: yupMixed()\n      .notRequired()\n      .nullable(),\n  })\n\n  return schema.validateSync(rawLocation)\n}\n\n/**\n * Retrieves plugin options from `window`.\n * @private\n *\n * @param {string} repositoryName - Name of the repository.\n * @returns Global plugin options. Only plugin options that can be serialized\n * by JSON.stringify() are provided.\n */\nexport const getGlobalPluginOptions = repositoryName => {\n  return IS_BROWSER ? (window[GLOBAL_STORE_KEY] || {})[repositoryName] : {}\n}\n/**\n * Fetches raw Prismic preview document data from their api.\n * @private\n *\n * @param {string} id - ID of the prismic document to preview.\n * @param {Object} pluginOptions - The {@link pluginOptions} to fetch preview data with.\n *\n * @returns Raw preview data object from Prismic.\n */\nexport const fetchPreviewData = async (id, pluginOptions) => {\n  const { repositoryName, accessToken, fetchLinks } = pluginOptions\n\n  const apiEndpoint = `https://${repositoryName}.cdn.prismic.io/api/v2`\n  const client = await Prismic.getApi(apiEndpoint, { accessToken })\n\n  return client.getByID(id, { fetchLinks })\n}\n\n/**\n * Retrieves the typePaths definition file that we create at build time to also normalize our types in the browser.\n * @private\n *\n * @param {Object} pluginOptions - The {@link pluginOptions} to get our type paths file name from\n * @returns The typePaths JSON object for use when normalizing data in the browser.\n */\nexport const fetchTypePaths = async pluginOptions => {\n  const { typePathsFilenamePrefix, schemasDigest } = pluginOptions\n\n  const req = await fetch(`/${typePathsFilenamePrefix}${schemasDigest}.json`, {\n    headers: { 'Content-Type': 'application/json' },\n  })\n\n  return await req.json()\n}\n\n/**\n * Normalizes a preview response from Prismic to be the same shape as what is generated at build time.\n * @private\n *\n * @param {Object} previewData - previewData from `fetchPreviewData()` @see {@link fetchPreviewData} for more info.\n * @param {Object} typePaths - typePaths from `fetchTypePaths()` @see {@link fetchTypePaths} for more info.\n * @param {Object} pluginOptions - The {@link pluginOptions} to use when normalizing and fetching data.\n */\nexport const normalizePreviewData = async (\n  previewData,\n  typePaths,\n  pluginOptions,\n) => {\n  const rootNodeId = await documentToNodes(previewData, {\n    typePaths,\n    createNode,\n    createNodeId,\n    createContentDigest,\n    hasNodeById,\n    getNodeById,\n    pluginOptions,\n    normalizeImageField,\n    normalizeLinkField,\n    normalizeSlicesField,\n    normalizeStructuredTextField,\n  })\n\n  const rootNode = nodeStore.get(rootNodeId)\n  const prefixedType = camelCase(rootNode.internal.type)\n\n  return {\n    [prefixedType]: rootNode,\n  }\n}\n\n/**\n * Function that is passed to lodash's `mergeWith()` to replace arrays during object merges instead of\n * actually merging them. This fixes unintended behavior when merging repeater fields from previews.\n * @private\n *\n * @param {Object} obj - Object being merged.\n * @param {Object} src - Source object being merge.\n *\n * @returns src when obj is an Array.\n */\nconst mergeCopyArrays = (obj, src) => (Array.isArray(obj) ? src : undefined)\n\n/**\n * Traversally merges key-value pairs.\n * @private\n *\n * @param {Object} staticData - Static data generated at buildtime.\n * @param {Object} previewData - Normalized preview data. @see {@link normalizePreviewData} for more info.\n * @param {String} key - Key that determines the preview data type to replace inside static data.\n *\n * @returns A new object containing the traversally merged key-value pairs from `previewData` and `staticData`\n */\nconst _traversalMerge = (staticData, previewData, key) => {\n  const { data: previewDocData, id: previewId } = previewData[key]\n\n  function handleNode(node) {\n    if (typeof node === 'object' && node.id === previewId) {\n      this.update(mergeWith(node, { data: previewDocData }, mergeCopyArrays))\n    }\n  }\n\n  return traverse(staticData).map(handleNode)\n}\n\n/**\n * Merges static and preview data objects together. If the objects share the same top level key, perform\n * a recursive merge. If the objects do not share the same top level key, traversally merge them.\n * @private\n *\n * @param {Object} staticData - Static data generated at buildtime.\n * @param {Object} previewData - Normalized preview data. @see {@link normalizePreviewData} for more info.\n *\n * @returns Object containing the merge contents of staticData and previewData.\n */\nconst _mergeStaticData = (staticData, previewData) => {\n  const previewKey = Object.keys(previewData)[0]\n\n  if (!staticData.hasOwnProperty(previewKey))\n    return _traversalMerge(staticData, previewData, previewKey)\n\n  return mergeWith(staticData, previewData, mergeCopyArrays)\n}\n\n/**\n * Helper that merge's Gatsby's static data with normalized preview data.\n * If the custom types are the same, deep merge with static data.\n * If the custom types are different, deeply replace any document in the static data that matches the preivew document's ID.\n * @public\n *\n * @param {Object} data - Data to merge.\n * @param data.staticData - Static data from Gatsby.\n * @param data.previewData - Preview data from `usePrismicPreview()`.\n *\n * @returns An object containing the merged contents of previewData and staticData.\n */\nexport const mergePrismicPreviewData = ({ staticData, previewData }) => {\n  if (!staticData && !previewData)\n    throw new Error(\n      'Invalid data! Please provide at least staticData or previewData.',\n    )\n  if (!staticData) return previewData\n  if (!previewData) return staticData\n\n  const clonedStaticData = cloneDeep(staticData)\n\n  return _mergeStaticData(clonedStaticData, previewData)\n}\n","import { useEffect, useState, useCallback } from 'react'\nimport { set as setCookie } from 'es-cookie'\nimport Prismic from 'prismic-javascript'\nimport queryString from 'query-string'\n\nimport { validatePluginOptions } from '../common/validatePluginOptions'\nimport {\n  validateLocation,\n  getGlobalPluginOptions,\n  fetchTypePaths,\n  fetchPreviewData,\n  normalizePreviewData,\n} from './helpers'\n\nexport { mergePrismicPreviewData } from './helpers'\n\n/**\n * @typedef {Object} pluginOptions\n * @property {string} repositoryName - Name of the Prismic repository to query.\n * @property {string} accessToken - API token to query the Prismic API.\n * @property {funcion} fetchLinks - Array of values that determines how Prismic fetches linked fields.\n * @property {function} linkResolver - Function for Prismic to resolve links in the queried document.\n *    @see {@link https://prismic.io/docs/javascript/beyond-the-api/link-resolving}\n * @property {function} htmlSerializer - Function that allows Prismic to preprocess rich text fields.\n *    @see {@link https://prismic.io/docs/javascript/beyond-the-api/html-serializer}\n * @property {string} typePathsFilenamePrefix - Prefix to the typePaths json we generate at build time.\n * @property {string} schemasDigest - Used for gatsby internals.\n * @property {string} pathResolver - Function that allows for custom preview page path resolving.\n */\n\n/**\n * React hook providing preview data from Prismic identical in shape to the data\n * created at build time. Images are not processed due to running in the browser.\n * Instead, images reutrn their URL.\n * @public\n *\n * @param {Object} rawLocation - Location object from @reach/router.\n * @param {Object} rawPluginOptions - The {@link pluginOptions} for this preview.\n *\n * @returns An object containing normalized Prismic preview data directly from\n *    the Prismic API.\n */\nexport const usePrismicPreview = (rawLocation, rawPluginOptions = {}) => {\n  const [state, setState] = useState({ previewData: null, path: null })\n\n  const globalPluginOptions =\n    getGlobalPluginOptions(rawPluginOptions.repositoryName) || {}\n  rawPluginOptions = {\n    schemasDigest: globalPluginOptions.schemasDigest,\n    ...globalPluginOptions.pluginOptions,\n    ...rawPluginOptions,\n  }\n\n  const location = validateLocation(rawLocation)\n  const { token, documentId } = queryString.parse(location.search)\n  const isPreview = Boolean(token && documentId)\n\n  let pluginOptions = rawPluginOptions\n  let shareLink = ''\n\n  if (isPreview) {\n    pluginOptions = validatePluginOptions(rawPluginOptions, { schemas: false })\n\n    const { websitePreviewId } = queryString.parse(token.split('?')[1])\n    const version = token.split('?')[0].split(':')[2]\n    const queryParams = queryString.stringify({\n      previewId: websitePreviewId,\n      document: documentId,\n      version,\n    })\n\n    shareLink = `https://${pluginOptions.repositoryName}.prismic.io/previews/session/draft?${queryParams}`\n  }\n\n  const asyncEffect = useCallback(async () => {\n    // If not a preview, reset state and return early.\n    if (!isPreview) return\n\n    // Required to send preview cookie on all API requests on future routes.\n    setCookie(Prismic.previewCookie, token)\n\n    const rawPreviewData = await fetchPreviewData(documentId, pluginOptions)\n    const typePaths = await fetchTypePaths(pluginOptions)\n    const normalizedPreviewData = await normalizePreviewData(\n      rawPreviewData,\n      typePaths,\n      pluginOptions,\n    )\n\n    const pathResolver =\n      pluginOptions.pathResolver || pluginOptions.linkResolver\n\n    setState({\n      previewData: normalizedPreviewData,\n      path: pathResolver({})(rawPreviewData),\n    })\n  }, [documentId, pluginOptions, token])\n\n  useEffect(() => {\n    asyncEffect()\n  }, [])\n\n  return { ...state, isPreview, shareLink }\n}\n"],"names":["isFunction","x","constructor","call","apply","pick","fields","obj","Object","keys","reduce","acc","key","includes","omit","mapObj","fn","entries","pairs","Promise","all","map","resolve","result","i","length","k","v","baseValidations","repositoryName","yupString","strict","required","accessToken","linkResolver","yupMixed","test","default","fetchLinks","yupArray","of","htmlSerializer","schemas","yupObject","lang","shouldNormalizeImage","plugins","max","typePathsFilenamePrefix","pathResolver","schemasDigest","validatePluginOptions","pluginOptions","filterValidations","toString","filteredValidations","hasOwnProperty","schema","shape","validateSync","abortEarly","IS_BROWSER","window","GLOBAL_STORE_KEY","IMAGE_FIELD_KEYS","getTypeForPath","path","typePaths","stringifiedPath","JSON","stringify","def","find","type","normalizeField","id","value","depth","context","doc","createNode","createNodeId","createContentDigest","normalizeImageField","normalizeLinkField","normalizeSlicesField","normalizeStructuredTextField","base","compose","baseValue","thumbs","normalizeObjs","sliceNodeIds","idx","sliceNodeId","normalizedPrimary","normalizeObj","primary","slice_type","normalizedItems","items","internal","pascalcase","contentDigest","objs","documentToNodes","docNodeId","normalizedData","data","linkResolverForDoc","node","prismicId","dataString","dataRaw","url","_depth","linkResolverForField","htmlSerializerForField","html","PrismicDOM","RichText","asHtml","text","asText","raw","fetchAndCreateDocumentNodes","hasNodeById","linkedDocId","apiEndpoint","api","Prismic","getByID","getNodeById","link_type","proxyHandler","get","prop","Proxy","Link","document","_id","__typename","localFile","seedConstant","uuidv5","md5","nodeStore","Map","set","has","validateLocation","rawLocation","search","nullable","ancestorOrigins","notRequired","assign","hash","host","hostname","href","origin","pathname","port","protocol","reload","replace","state","getGlobalPluginOptions","fetchPreviewData","client","getApi","fetchTypePaths","req","fetch","headers","json","normalizePreviewData","previewData","rootNodeId","rootNode","prefixedType","camelCase","mergeCopyArrays","src","Array","isArray","undefined","_traversalMerge","staticData","previewDocData","previewId","handleNode","update","mergeWith","traverse","_mergeStaticData","previewKey","mergePrismicPreviewData","Error","clonedStaticData","cloneDeep","usePrismicPreview","rawPluginOptions","setState","useState","globalPluginOptions","location","token","documentId","queryString","parse","isPreview","Boolean","shareLink","websitePreviewId","split","version","queryParams","asyncEffect","useCallback","setCookie","previewCookie","rawPreviewData","normalizedPreviewData","useEffect"],"mappings":"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"}