{"version":3,"file":"gatsby-node.js","sources":["../src/common/utils.js","../src/common/validatePluginOptions.js","../src/node/fetchAllDocuments.js","../src/node/generateTypeDefsForCustomType.js","../src/common/constants.js","../src/common/documentToNodes.js","../src/node/normalizers.js","../src/node/gatsby-node.js"],"sourcesContent":["export const isFunction = x => !!(x && x.constructor && x.call && x.apply)\n\n// See: lodash.pick\nexport const pick = fields => obj =>\n  Object.keys(obj).reduce((acc, key) => {\n    if (fields.includes(key)) acc[key] = obj[key]\n    return acc\n  }, {})\n\n// See: lodash.omit\nexport const omit = fields => obj =>\n  Object.keys(obj).reduce((acc, key) => {\n    if (!fields.includes(key)) acc[key] = obj[key]\n    return acc\n  }, {})\n\n// Maps an object to a new object with key-value pairs. Mapping function must\n// return a key-value tuple.\nexport const mapObj = fn => async obj => {\n  const entries = Object.entries(obj)\n  const pairs = await Promise.all(entries.map(x => Promise.resolve(fn(x))))\n\n  const result = {}\n\n  for (let i = 0; i < pairs.length; i++) {\n    const [k, v] = pairs[i]\n    result[k] = v\n  }\n\n  return result\n}\n","import {\n  array as yupArray,\n  mixed as yupMixed,\n  object as yupObject,\n  string as yupString,\n} from 'yup'\n\nimport { isFunction } from './utils'\n\nconst baseValidations = {\n  repositoryName: yupString()\n    .nullable()\n    .required(),\n  accessToken: yupString()\n    .nullable()\n    .required(),\n  linkResolver: yupMixed()\n    .test('is function', '${path} is not a function', isFunction)\n    .default(() => () => {}),\n  fetchLinks: yupArray()\n    .of(yupString().required())\n    .default([]),\n  htmlSerializer: yupMixed()\n    .test('is function', '${path} is not a function', isFunction)\n    .default(() => () => {}),\n  schemas: yupObject()\n    .nullable()\n    .required(),\n  lang: yupString()\n    .nullable()\n    .default('*'),\n  shouldNormalizeImage: yupMixed()\n    .test('is function', '${path} is not a function', isFunction)\n    .default(() => () => true),\n  plugins: yupArray()\n    .max(0)\n    .default([]),\n}\n\nexport const validatePluginOptions = (pluginOptions, requireSchemas = true) => {\n  const schema = yupObject().shape({\n    ...baseValidations,\n    schemas: requireSchemas ? baseValidations.schemas : undefined,\n    typePathsFilenamePrefix: yupString()\n      .nullable()\n      .default(`prismic-typepaths---${pluginOptions.repositoryName}-`),\n  })\n\n  return schema.validate(pluginOptions, { abortEarly: false })\n}\n","import Prismic from 'prismic-javascript'\nimport { name as pkgName } from '../../package.json'\n\nconst msg = s => `${pkgName} - ${s}`\n\nconst pagedGet = async (\n  client,\n  queryOptions,\n  context,\n  pageSize = 100,\n  page = 1,\n  acc = [],\n) => {\n  const {\n    gatsbyContext: { reporter },\n  } = context\n\n  reporter.verbose(msg(`fetching documents page ${page}`))\n  const response = await client.query([], {\n    ...queryOptions,\n    page,\n    pageSize,\n  })\n\n  acc = acc.concat(response.results)\n\n  if (page * pageSize < response.total_results_size)\n    return pagedGet(client, queryOptions, context, pageSize, page + 1, acc)\n\n  return acc\n}\n\nexport const fetchAllDocuments = async (gatsbyContext, pluginOptions) => {\n  const { repositoryName, accessToken, fetchLinks, lang } = pluginOptions\n\n  const apiEndpoint = `https://${repositoryName}.prismic.io/api/v2`\n  const client = await Prismic.api(apiEndpoint, { accessToken })\n\n  return await pagedGet(\n    client,\n    { fetchLinks, lang },\n    {\n      gatsbyContext,\n      pluginOptions,\n    },\n  )\n}\n","import * as R from 'ramda'\nimport pascalcase from 'pascalcase'\n\nconst IMAGE_FIELD_KEYS = ['dimensions', 'alt', 'copyright', 'url', 'localFile']\n\n// Returns a GraphQL type name given a field based on its type. If the type is\n// is an object or union, the necessary type definition is enqueued on to the\n// provided queue to be created at a later time.\nconst fieldToType = (id, value, depth, context) => {\n  const {\n    customTypeId,\n    enqueueTypeDef,\n    enqueueTypePath,\n    gatsbyContext,\n  } = context\n  const { schema: gatsbySchema, createNodeId } = gatsbyContext\n\n  switch (value.type) {\n    case 'UID':\n      enqueueTypePath([...depth, id], 'String')\n      return {\n        type: 'String',\n        description:\n          \"The document's unique identifier. Unique among all instances of the document's type.\",\n      }\n\n    case 'Color':\n    case 'Select':\n    case 'Text':\n      enqueueTypePath([...depth, id], 'String')\n      return 'String'\n\n    case 'StructuredText':\n      enqueueTypePath([...depth, id], 'PrismicStructuredTextType')\n      return 'PrismicStructuredTextType'\n\n    case 'Number':\n      enqueueTypePath([...depth, id], 'Float')\n      return 'Float'\n\n    case 'Date':\n    case 'Timestamp':\n      enqueueTypePath([...depth, id], 'Date')\n      return 'Date'\n\n    case 'GeoPoint':\n      enqueueTypePath([...depth, id], 'PrismicGeoPointType')\n      return 'PrismicGeoPointType'\n\n    case 'Embed':\n      enqueueTypePath([...depth, id], 'PrismicEmbedType')\n      return 'PrismicEmbedType'\n\n    case 'Image':\n      enqueueTypePath([...depth, id], 'PrismicImageType')\n      return {\n        type: 'PrismicImageType',\n        resolve: (parent, args, context, info) => {\n          const key = info.path.key\n          const value = parent[key]\n\n          const getFileNode = id =>\n            context.nodeModel.getNodeById({\n              id,\n              type: 'File',\n            })\n\n          const baseValue = R.compose(\n            R.assoc('localFile', getFileNode(value.localFile)),\n            R.pick(IMAGE_FIELD_KEYS),\n          )(value)\n\n          const thumbValues = R.compose(\n            R.mapObjIndexed(v =>\n              R.assoc('localFile', getFileNode(v.localFile), v),\n            ),\n            R.omit(IMAGE_FIELD_KEYS),\n          )(value)\n\n          return {\n            ...baseValue,\n            ...thumbValues,\n          }\n        },\n      }\n\n    case 'Link':\n      enqueueTypePath([...depth, id], 'PrismicLinkType')\n      return {\n        type: 'PrismicLinkType',\n        resolve: (parent, args, context, info) => {\n          const key = info.path.key\n          const value = parent[key]\n\n          return {\n            ...value,\n            document: context.nodeModel.getNodeById({\n              id: createNodeId(`${value.type} ${value.id}`),\n              type: pascalcase(`Prismic ${value.type}`),\n            }),\n          }\n        },\n      }\n\n    case 'Group':\n      const groupName = pascalcase(`Prismic ${customTypeId} ${id} Group Type`)\n      const subfields = value.config.fields\n\n      enqueueTypeDef(\n        gatsbySchema.buildObjectType({\n          name: groupName,\n          fields: R.mapObjIndexed(\n            (subfield, subfieldId) =>\n              fieldToType(subfieldId, subfield, [...depth, id], context),\n            subfields,\n          ),\n        }),\n      )\n\n      enqueueTypePath([...depth, id], `[${groupName}]`)\n\n      return `[${groupName}]`\n\n    case 'Slice':\n      const { sliceZoneId } = context\n      const { 'non-repeat': primaryFields, repeat: itemsFields } = value\n\n      const sliceFields = {\n        id: 'String',\n        slice_type: 'String',\n      }\n\n      if (primaryFields && !R.isEmpty(primaryFields)) {\n        const primaryName = pascalcase(\n          `Prismic ${customTypeId} ${sliceZoneId} ${id} Primary Type`,\n        )\n\n        enqueueTypeDef(\n          gatsbySchema.buildObjectType({\n            name: primaryName,\n            fields: R.mapObjIndexed(\n              (primaryField, primaryFieldId) =>\n                fieldToType(\n                  primaryFieldId,\n                  primaryField,\n                  [...depth, id, 'primary'],\n                  context,\n                ),\n              primaryFields,\n            ),\n          }),\n        )\n\n        enqueueTypePath([...depth, id, 'primary'], primaryName)\n\n        sliceFields.primary = `${primaryName}`\n      }\n\n      if (itemsFields && !R.isEmpty(itemsFields)) {\n        const itemName = pascalcase(\n          `Prismic ${customTypeId} ${sliceZoneId} ${id} Item Type`,\n        )\n\n        enqueueTypeDef(\n          gatsbySchema.buildObjectType({\n            name: itemName,\n            fields: R.mapObjIndexed(\n              (itemField, itemFieldId) =>\n                fieldToType(\n                  itemFieldId,\n                  itemField,\n                  [...depth, id, 'items'],\n                  context,\n                ),\n              itemsFields,\n            ),\n          }),\n        )\n\n        enqueueTypePath([...depth, id, 'items'], `[${itemName}]`)\n\n        sliceFields.items = `[${itemName}]`\n      }\n\n      const sliceName = pascalcase(\n        `Prismic ${customTypeId} ${sliceZoneId} ${id}`,\n      )\n\n      enqueueTypeDef(\n        gatsbySchema.buildObjectType({\n          name: sliceName,\n          fields: sliceFields,\n          interfaces: ['Node'],\n        }),\n      )\n\n      enqueueTypePath([...depth, id], sliceName)\n\n      return sliceName\n\n    case 'Slices':\n      const choiceTypes = R.compose(\n        R.values,\n        R.mapObjIndexed((choice, choiceId) =>\n          fieldToType(choiceId, choice, [...depth, id], {\n            ...context,\n            sliceZoneId: id,\n          }),\n        ),\n      )(value.config.choices)\n\n      const slicesName = pascalcase(`Prismic ${customTypeId} ${id} Slices Type`)\n\n      enqueueTypeDef(\n        gatsbySchema.buildUnionType({\n          name: slicesName,\n          types: choiceTypes,\n        }),\n      )\n\n      enqueueTypePath([...depth, id], `[${slicesName}]`)\n\n      return {\n        type: `[${slicesName}]`,\n        resolve: (parent, args, context, info) =>\n          context.nodeModel.getNodesByIds({\n            ids: parent[info.path.key],\n          }),\n      }\n\n    default:\n      console.log(`UNPROCESSED FIELD for type \"${value.type}\"`, id)\n      return null\n  }\n}\n\nexport const generateTypeDefsForCustomType = (id, json, context) => {\n  const { gatsbyContext } = context\n  const { schema: gatsbySchema } = gatsbyContext\n\n  const typeDefs = []\n  const enqueueTypeDef = typeDef => typeDefs.push(typeDef)\n\n  const typePaths = []\n  const enqueueTypePath = (path, type) => typePaths.push({ path, type })\n\n  // UID fields are defined at the same level as data fields, but are a level\n  // about data in API responses. Pulling it out separately here allows us to\n  // process the UID field differently than the data fields.\n  const { uid: uidField, ...dataFields } = R.compose(\n    R.mergeAll,\n    R.values,\n  )(json)\n\n  // UID fields must be conditionally processed since not all custom types\n  // implement a UID field.\n  let uidFieldType\n  if (uidField)\n    uidFieldType = fieldToType('uid', uidField, [id], {\n      ...context,\n      customTypeId: id,\n      enqueueTypePath,\n    })\n\n  const dataFieldTypes = R.mapObjIndexed(\n    (field, fieldId) =>\n      fieldToType(fieldId, field, [id, 'data'], {\n        ...context,\n        customTypeId: id,\n        enqueueTypeDef,\n        enqueueTypePath,\n      }),\n    dataFields,\n  )\n\n  const dataName = pascalcase(`Prismic ${id} Data Type`)\n\n  enqueueTypePath([id, 'data'], dataName)\n\n  enqueueTypeDef(\n    gatsbySchema.buildObjectType({\n      name: dataName,\n      fields: dataFieldTypes,\n    }),\n  )\n\n  const customTypeName = pascalcase(`Prismic ${id}`)\n  const customTypeFields = {\n    data: { type: dataName, description: \"The document's data fields.\" },\n    dataRaw: {\n      type: 'JSON!',\n      description:\n        \"The document's data object without transformations exactly as it comes from the Prismic API.\",\n    },\n    dataString: {\n      type: 'String!',\n      description:\n        \"The document's data object without transformations. The object is stringified via `JSON.stringify` to eliminate the need to declare subfields.\",\n      deprecationReason: 'Use `dataRaw` instead which returns JSON.',\n    },\n    first_publication_date: {\n      type: 'Date!',\n      description: \"The document's initial publication date.\",\n    },\n    href: {\n      type: 'String!',\n      description: \"The document's Prismic API URL.\",\n    },\n    url: {\n      type: 'String!',\n      description: \"The document's URL derived via the link resolver.\",\n    },\n    id: {\n      type: 'ID!',\n      description:\n        'Globally unique identifier. Note that this differs from the `prismicID` field.',\n    },\n    lang: { type: 'String!', description: \"The document's language.\" },\n    last_publication_date: {\n      type: 'Date!',\n      description: \"The document's most recent publication date\",\n    },\n    tags: { type: '[String!]!', description: \"The document's list of tags.\" },\n    type: {\n      type: 'String!',\n      description: \"The document's Prismic API ID type.\",\n    },\n    prismicId: { type: 'ID!', description: \"The document's Prismic ID.\" },\n  }\n  if (uidFieldType) customTypeFields.uid = uidFieldType\n\n  enqueueTypePath([id], customTypeName)\n\n  enqueueTypeDef(\n    gatsbySchema.buildObjectType({\n      name: customTypeName,\n      fields: customTypeFields,\n      interfaces: ['PrismicDocument', 'Node'],\n    }),\n  )\n\n  return { typeDefs, typePaths }\n}\n\nexport const generateTypeDefForLinkType = (allTypeDefs, context) => {\n  const { gatsbyContext } = context\n  const { schema: gatsbySchema } = gatsbyContext\n\n  const documentTypeNames = R.compose(\n    R.map(R.path(['config', 'name'])),\n    R.filter(\n      R.compose(\n        R.contains('PrismicDocument'),\n        R.pathOr([], ['config', 'interfaces']),\n      ),\n    ),\n  )(allTypeDefs)\n\n  return gatsbySchema.buildUnionType({\n    name: 'PrismicAllDocumentTypes',\n    types: documentTypeNames,\n  })\n}\n","export const IS_BROWSER = typeof window !== 'undefined'\n\nexport const GLOBAL_STORE_KEY = '___PRISMIC___'\n\nexport const IMAGE_FIELD_KEYS = [\n  'dimensions',\n  'alt',\n  'copyright',\n  'url',\n  'localFile',\n]\n","import PrismicDOM from 'prismic-dom'\nimport pascalcase from 'pascalcase'\nimport compose from 'compose-tiny'\n\nimport { IMAGE_FIELD_KEYS } from '../common/constants'\nimport { pick, omit, mapObj } from './utils'\n\nconst getTypeForPath = (path, typePaths) => {\n  const stringifiedPath = JSON.stringify(path)\n  const def = typePaths.find(x => JSON.stringify(x.path) === stringifiedPath)\n\n  if (!def) return\n  if (/^\\[.*GroupType\\]$/.test(def.type)) return 'Group'\n  if (/^\\[.*SlicesType\\]$/.test(def.type)) return 'Slices'\n\n  return def.type\n}\n\nconst normalizeField = async (id, value, depth, context) => {\n  const {\n    doc,\n    typePaths,\n    createNode,\n    createNodeId,\n    createContentDigest,\n    normalizeImageField,\n    normalizeLinkField,\n    normalizeSlicesField,\n    normalizeStructuredTextField,\n  } = context\n\n  const type = getTypeForPath([...depth, id], typePaths)\n\n  switch (type) {\n    case 'PrismicImageType':\n      const base = await compose(\n        baseValue => normalizeImageField(id, baseValue, depth, context),\n        pick(IMAGE_FIELD_KEYS),\n      )(value)\n\n      // Thumbnail image data are siblings of the base image data so we need to\n      // smartly extract and normalize the key-value pairs.\n      const thumbs = await compose(\n        mapObj(async ([k, v]) => [\n          k,\n          await normalizeImageField(id, v, depth, context),\n        ]),\n        omit(IMAGE_FIELD_KEYS),\n      )(value)\n\n      return {\n        ...base,\n        ...thumbs,\n      }\n\n    case 'PrismicStructuredTextType':\n      return await normalizeStructuredTextField(id, value, depth, context)\n\n    case 'PrismicLinkType':\n      return await normalizeLinkField(id, value, depth, context)\n\n    case 'Group':\n      return await normalizeObjs(value, [...depth, id], context)\n\n    case 'Slices':\n      const sliceNodeIds = await Promise.all(\n        value.map(async (v, idx) => {\n          const sliceNodeId = createNodeId(`${doc.type} ${doc.id} ${id} ${idx}`)\n\n          const normalizedPrimary = await normalizeObj(\n            v.primary || {},\n            [...depth, id, v.slice_type, 'primary'],\n            context,\n          )\n\n          const normalizedItems = await normalizeObjs(\n            v.items || [],\n            [...depth, id, v.slice_type, 'items'],\n            context,\n          )\n\n          createNode({\n            ...v,\n            id: sliceNodeId,\n            primary: normalizedPrimary,\n            items: normalizedItems,\n            internal: {\n              type: pascalcase(`Prismic ${doc.type} ${id} ${v.slice_type}`),\n              contentDigest: createContentDigest(v),\n            },\n          })\n\n          return sliceNodeId\n        }),\n      )\n\n      return await normalizeSlicesField(\n        id,\n        sliceNodeIds,\n        [...depth, id],\n        context,\n      )\n\n    default:\n      return value\n  }\n}\n\n// Returns a promise that resolves after normalizing each property in an\n// object.\nconst normalizeObj = async (obj = {}, depth, context) =>\n  await mapObj(async ([k, v]) => [\n    k,\n    await normalizeField(k, v, depth, context),\n  ])(obj)\n\n// Returns a promise that resolves after normalizing a list of objects.\nconst normalizeObjs = (objs = [], depth, context) =>\n  Promise.all(objs.map(obj => normalizeObj(obj, depth, context)))\n\nexport const documentToNodes = async (doc, context) => {\n  const {\n    createNodeId,\n    createContentDigest,\n    createNode,\n    pluginOptions,\n  } = context\n  const { linkResolver } = pluginOptions\n\n  const docNodeId = createNodeId(`${doc.type} ${doc.id}`)\n  const normalizedData = await normalizeObj(doc.data, [doc.type, 'data'], {\n    ...context,\n    doc,\n    docNodeId,\n  })\n\n  const linkResolverForDoc = linkResolver({ node: doc })\n\n  createNode({\n    ...doc,\n    id: docNodeId,\n    prismicId: doc.id,\n    data: normalizedData,\n    dataString: JSON.stringify(doc.data),\n    dataRaw: doc.data,\n    url: linkResolverForDoc(doc),\n    internal: {\n      type: pascalcase(`Prismic ${doc.type}`),\n      contentDigest: createContentDigest(doc),\n    },\n  })\n\n  return docNodeId\n}\n","import PrismicDOM from 'prismic-dom'\nimport { createRemoteFileNode } from 'gatsby-source-filesystem'\n\n// Normalizes a PrismicStructuredTextType field by providing HTML and text\n// versions of the value using `prismic-dom` on the `html` and `text` keys,\n// respectively. The raw value is provided on the `raw` key.\nexport const normalizeStructuredTextField = async (\n  id,\n  value,\n  _depth,\n  context,\n) => {\n  const { doc, pluginOptions } = context\n  const { linkResolver, htmlSerializer } = pluginOptions\n\n  const linkResolverForField = linkResolver({ key: id, value, node: doc })\n  const htmlSerializerForField = htmlSerializer({ key: id, value, node: doc })\n\n  return {\n    html: PrismicDOM.RichText.asHtml(\n      value,\n      linkResolverForField,\n      htmlSerializerForField,\n    ),\n    text: PrismicDOM.RichText.asText(value),\n    raw: value,\n  }\n}\n\n// Normalizes a PrismicLinkType field by providing a resolved URL using\n// `prismic-dom` on the `url` field. If the value is a document link, the\n// document's data is provided on the `document` key.\n//\n// NOTE: The document field is set to a node ID but this will be resolved to\n// the node in the GraphQL resolver.\nexport const normalizeLinkField = async (id, value, _depth, context) => {\n  const { doc, createNodeId, pluginOptions } = context\n  const { linkResolver } = pluginOptions\n\n  const linkResolverForField = linkResolver({ key: id, value, node: doc })\n\n  let documentId = null\n  if (value.link_type === 'Document')\n    documentId = createNodeId(`${value.type} ${value.id}`)\n\n  return {\n    ...value,\n    url: PrismicDOM.Link.url(value, linkResolverForField),\n    document: documentId,\n    raw: value,\n  }\n}\n\n// Normalizes a PrismicImageType field by creating a File node using\n// `gatsby-source-filesystem`. This allows for `gatsby-transformer-sharp` and\n// `gatsby-image` integration. The linked node data is provided on the\n// `localFile` key.\n//\n// NOTE: The document field is set to a node ID but this will be resolved to\n// the node in the GraphQL resolver.\nexport const normalizeImageField = async (id, value, _depth, context) => {\n  const { doc, docNodeId, gatsbyContext, pluginOptions } = context\n  const { createNodeId, store, cache, actions } = gatsbyContext\n  const { createNode } = actions\n  const { shouldNormalizeImage } = pluginOptions\n\n  const shouldAttemptToCreateRemoteFileNode = await shouldNormalizeImage({\n    key: id,\n    value,\n    node: doc,\n  })\n\n  let fileNode\n\n  if (shouldAttemptToCreateRemoteFileNode)\n    try {\n      fileNode = await createRemoteFileNode({\n        url: value.url,\n        parentNodeId: docNodeId,\n        store,\n        cache,\n        createNode,\n        createNodeId,\n      })\n    } catch (error) {\n      // Ignore\n    }\n\n  return {\n    ...value,\n    localFile: fileNode ? fileNode.id : null,\n  }\n}\n\n// Normalizes a SlicesType field by returning the value as-is.\nexport const normalizeSlicesField = (_id, value) => value\n","import fs from 'fs'\nimport path from 'path'\nimport * as R from 'ramda'\nimport * as RA from 'ramda-adjunct'\nimport md5 from 'md5'\n\nimport { validatePluginOptions } from '../common/validatePluginOptions'\nimport { fetchAllDocuments } from './fetchAllDocuments'\nimport {\n  generateTypeDefsForCustomType,\n  generateTypeDefForLinkType,\n} from './generateTypeDefsForCustomType'\nimport { documentToNodes } from '../common/documentToNodes'\nimport {\n  normalizeImageField,\n  normalizeLinkField,\n  normalizeSlicesField,\n  normalizeStructuredTextField,\n} from './normalizers'\nimport standardTypes from '../common/standardTypes.graphql'\nimport { name as pkgName } from '../../package.json'\n\nconst msg = s => `${pkgName} - ${s}`\n\nexport const sourceNodes = async (gatsbyContext, rawPluginOptions) => {\n  const { actions, reporter } = gatsbyContext\n  const { createTypes } = actions\n\n  const createTypesActivity = reporter.activityTimer(msg('create types'))\n  const fetchDocumentsActivity = reporter.activityTimer(msg('fetch documents'))\n  const createNodesActivity = reporter.activityTimer(msg('create nodes'))\n  const writeTypePathsActivity = reporter.activityTimer(\n    msg('write out type paths'),\n  )\n\n  /***\n   * Validate plugin options. Set default options where necessary. If any\n   * plugin options are invalid, stop immediately.\n   */\n\n  let pluginOptions\n\n  try {\n    pluginOptions = await validatePluginOptions(rawPluginOptions)\n  } catch (error) {\n    reporter.error(msg('invalid plugin options'))\n    reporter.panic(msg(error.errors.join(', ')))\n  }\n\n  /***\n   * Create types derived from Prismic custom type schemas.\n   */\n\n  createTypesActivity.start()\n  reporter.verbose(msg('starting to create types'))\n\n  const typeVals = R.compose(\n    R.values,\n    R.mapObjIndexed((json, id) =>\n      generateTypeDefsForCustomType(id, json, {\n        gatsbyContext,\n        pluginOptions,\n      }),\n    ),\n  )(pluginOptions.schemas)\n\n  const typeDefs = R.compose(\n    R.flatten,\n    R.map(R.prop('typeDefs')),\n  )(typeVals)\n\n  const typePaths = R.compose(\n    R.flatten,\n    R.map(R.prop('typePaths')),\n  )(typeVals)\n\n  const linkTypeDef = generateTypeDefForLinkType(typeDefs, { gatsbyContext })\n\n  createTypes(standardTypes)\n  createTypes(linkTypeDef)\n  createTypes(typeDefs)\n\n  createTypesActivity.end()\n\n  /***\n   * Fetch documents from Prismic.\n   */\n\n  fetchDocumentsActivity.start()\n  reporter.verbose(msg('starting to fetch documents'))\n\n  const documents = await fetchAllDocuments(gatsbyContext, pluginOptions)\n\n  reporter.verbose(msg(`fetched ${documents.length} documents`))\n  fetchDocumentsActivity.end()\n\n  /***\n   * Create nodes for all documents\n   */\n\n  createNodesActivity.start()\n  reporter.verbose(msg('starting to create nodes'))\n\n  await R.compose(\n    RA.allP,\n    R.map(doc =>\n      documentToNodes(doc, {\n        createNode: node => {\n          reporter.verbose(\n            msg(\n              `creating node ${JSON.stringify({\n                id: node.id,\n                type: node.internal.type,\n                prismicId: node.prismicId,\n              })}`,\n            ),\n          )\n          gatsbyContext.actions.createNode(node)\n        },\n        createNodeId: gatsbyContext.createNodeId,\n        createContentDigest: gatsbyContext.createContentDigest,\n        normalizeImageField,\n        normalizeLinkField,\n        normalizeSlicesField,\n        normalizeStructuredTextField,\n        typePaths,\n        gatsbyContext,\n        pluginOptions,\n      }),\n    ),\n  )(documents)\n\n  createNodesActivity.end()\n\n  /***\n   * Write type paths to public for use in Prismic previews.\n   */\n\n  writeTypePathsActivity.start()\n  reporter.verbose(msg('starting to write out type paths'))\n\n  const schemasDigest = md5(JSON.stringify(pluginOptions.schemas))\n  const typePathsFilename = path.resolve(\n    'public',\n    pluginOptions.typePathsFilenamePrefix + schemasDigest + '.json',\n  )\n\n  reporter.verbose(msg(`writing out type paths to: ${typePathsFilename}`))\n  fs.writeFileSync(typePathsFilename, JSON.stringify(typePaths))\n\n  writeTypePathsActivity.end()\n}\n"],"names":["isFunction","x","constructor","call","apply","pick","fields","obj","Object","keys","reduce","acc","key","includes","omit","mapObj","fn","entries","pairs","Promise","all","map","resolve","result","i","length","k","v","baseValidations","repositoryName","yupString","nullable","required","accessToken","linkResolver","yupMixed","test","default","fetchLinks","yupArray","of","htmlSerializer","schemas","yupObject","lang","shouldNormalizeImage","plugins","max","validatePluginOptions","pluginOptions","requireSchemas","schema","shape","undefined","typePathsFilenamePrefix","validate","abortEarly","msg","s","pkgName","pagedGet","client","queryOptions","context","pageSize","page","gatsbyContext","reporter","verbose","response","query","concat","results","total_results_size","fetchAllDocuments","apiEndpoint","Prismic","api","IMAGE_FIELD_KEYS","fieldToType","id","value","depth","customTypeId","enqueueTypeDef","enqueueTypePath","gatsbySchema","createNodeId","type","description","parent","args","info","path","getFileNode","nodeModel","getNodeById","baseValue","R","localFile","thumbValues","document","pascalcase","groupName","subfields","config","buildObjectType","name","subfield","subfieldId","sliceZoneId","primaryFields","repeat","itemsFields","sliceFields","slice_type","primaryName","primaryField","primaryFieldId","primary","itemName","itemField","itemFieldId","items","sliceName","interfaces","choiceTypes","choice","choiceId","choices","slicesName","buildUnionType","types","getNodesByIds","ids","console","log","generateTypeDefsForCustomType","json","typeDefs","typeDef","push","typePaths","uid","uidField","dataFields","uidFieldType","dataFieldTypes","field","fieldId","dataName","customTypeName","customTypeFields","data","dataRaw","dataString","deprecationReason","first_publication_date","href","url","last_publication_date","tags","prismicId","generateTypeDefForLinkType","allTypeDefs","documentTypeNames","getTypeForPath","stringifiedPath","JSON","stringify","def","find","normalizeField","doc","createNode","createContentDigest","normalizeImageField","normalizeLinkField","normalizeSlicesField","normalizeStructuredTextField","base","compose","thumbs","normalizeObjs","sliceNodeIds","idx","sliceNodeId","normalizedPrimary","normalizeObj","normalizedItems","internal","contentDigest","objs","documentToNodes","docNodeId","normalizedData","linkResolverForDoc","node","_depth","linkResolverForField","htmlSerializerForField","html","PrismicDOM","RichText","asHtml","text","asText","raw","documentId","link_type","Link","store","cache","actions","shouldAttemptToCreateRemoteFileNode","fileNode","createRemoteFileNode","parentNodeId","error","_id","sourceNodes","rawPluginOptions","createTypes","createTypesActivity","activityTimer","fetchDocumentsActivity","createNodesActivity","writeTypePathsActivity","panic","errors","join","start","typeVals","linkTypeDef","standardTypes","end","documents","RA","schemasDigest","md5","typePathsFilename","fs","writeFileSync"],"mappings":"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"}