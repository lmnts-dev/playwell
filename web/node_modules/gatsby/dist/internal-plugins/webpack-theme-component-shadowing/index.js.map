{"version":3,"sources":["../../../src/internal-plugins/webpack-theme-component-shadowing/index.js"],"names":["path","require","debug","fs","_","pathWithoutExtension","fullPath","parsed","parse","join","dir","name","module","exports","GatsbyThemeComponentShadowingResolverPlugin","constructor","projectRoot","themes","map","themeName","apply","resolver","plugin","request","callback","matchingThemes","getMatchingThemesForPath","length","Error","theme","split","themeDir","component","context","issuer","requestPathIsIssuerShadowPath","requestPath","issuerPath","userSiteDir","resolve","doResolve","builtComponentPath","resolveComponentPath","matchingTheme","ogThemes","filter","cache","concat","Array","from","reverse","find","possibleComponentPath","readdirSync","dirname","e","exists","filepath","ext","extname","filenameWithoutExtension","basename","includes","allMatchingThemes","uniqBy","getBaseShadowDirsForThemes","shadowFiles"],"mappings":"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","sourcesContent":["const path = require(`path`)\nconst debug = require(`debug`)(`gatsby:component-shadowing`)\nconst fs = require(`fs`)\nconst _ = require(`lodash`)\n\nconst pathWithoutExtension = fullPath => {\n  const parsed = path.parse(fullPath)\n  return path.join(parsed.dir, parsed.name)\n}\n\nmodule.exports = class GatsbyThemeComponentShadowingResolverPlugin {\n  cache = {}\n\n  constructor({ projectRoot, themes }) {\n    debug(`themes list`, themes.map(({ themeName }) => themeName))\n    this.themes = themes\n    this.projectRoot = projectRoot\n  }\n\n  apply(resolver) {\n    resolver.plugin(`relative`, (request, callback) => {\n      const matchingThemes = this.getMatchingThemesForPath(request.path)\n\n      // 0 matching themes happens a lot for paths we don't want to handle\n      // > 1 matching theme means we have a path like\n      //   `gatsby-theme-blog/src/components/gatsby-theme-something/src/components`\n      if (matchingThemes.length > 1) {\n        throw new Error(\n          `Gatsby can't differentiate between themes ${matchingThemes\n            .map(theme => theme.themeName)\n            .join(` and `)} for path ${request.path}`\n        )\n      }\n\n      if (matchingThemes.length !== 1) {\n        return callback()\n      }\n\n      // theme is the theme package from which we're requiring the relative component\n      const [theme] = matchingThemes\n      // get the location of the component relative to src/\n      const [, component] = request.path.split(path.join(theme.themeDir, `src`))\n\n      if (\n        /**\n         * if someone adds\n         * ```\n         * modules: [path.resolve(__dirname, 'src'), 'node_modules'],\n         * ```\n         * to the webpack config, `issuer` is `null`, so we skip this check.\n         * note that it's probably a bad idea in general to set `modules`\n         * like this in a theme, but we also shouldn't artificially break\n         * people that do.\n         */\n        request.context.issuer &&\n        /**\n         * An issuer is the file making the require request. It can\n         * be in a user's site or a theme. If the issuer is requesting\n         * a path in the shadow chain that it participates in, then we\n         * will let the request through as normal. Otherwise, we\n         * engage the shadowing algorithm.\n         */\n        this.requestPathIsIssuerShadowPath({\n          requestPath: request.path,\n          issuerPath: request.context.issuer,\n          userSiteDir: path.resolve(`.`),\n        })\n      ) {\n        return resolver.doResolve(\n          `describedRelative`,\n          request,\n          null,\n          {},\n          callback\n        )\n      }\n\n      // This is the shadowing algorithm.\n      const builtComponentPath = this.resolveComponentPath({\n        matchingTheme: theme.themeName,\n        themes: this.themes,\n        component,\n      })\n\n      return resolver.doResolve(\n        `describedRelative`,\n        { ...request, path: builtComponentPath || request.path },\n        null,\n        {},\n        callback\n      )\n    })\n  }\n\n  // check the cache, the user's project, and finally the theme files\n  resolveComponentPath({ matchingTheme: theme, themes: ogThemes, component }) {\n    // don't include matching theme in possible shadowing paths\n    const themes = ogThemes.filter(({ themeName }) => themeName !== theme)\n    if (!this.cache[`${theme}-${component}`]) {\n      this.cache[`${theme}-${component}`] = [\n        path.join(path.resolve(`.`), `src`, theme),\n      ]\n        .concat(\n          Array.from(themes)\n            .reverse()\n            .map(({ themeDir }) => path.join(themeDir, `src`, theme))\n        )\n        .map(dir => path.join(dir, component))\n        .find(possibleComponentPath => {\n          debug(`possibleComponentPath`, possibleComponentPath)\n          let dir\n          try {\n            // we use fs/path instead of require.resolve to work with\n            // TypeScript and alternate syntaxes\n            dir = fs.readdirSync(path.dirname(possibleComponentPath))\n          } catch (e) {\n            return false\n          }\n          const exists = dir\n            .map(filepath => {\n              const ext = path.extname(filepath)\n              const filenameWithoutExtension = path.basename(filepath, ext)\n              return filenameWithoutExtension\n            })\n            .includes(\n              path.basename(\n                possibleComponentPath,\n                path.extname(possibleComponentPath)\n              )\n            )\n          return exists\n        })\n    }\n\n    return this.cache[`${theme}-${component}`]\n  }\n\n  getMatchingThemesForPath(filepath) {\n    // find out which theme's src/components dir we're requiring from\n    const allMatchingThemes = this.themes.filter(({ themeDir }) =>\n      filepath.includes(path.join(themeDir, `src`))\n    )\n\n    // The same theme can be included twice in the themes list causing multiple\n    // matches. This case should only be counted as a single match for that theme.\n    return _.uniqBy(allMatchingThemes, `themeName`)\n  }\n\n  // given a theme name, return all of the possible shadow locations\n  getBaseShadowDirsForThemes(theme) {\n    return Array.from(this.themes)\n      .reverse()\n      .map(({ themeName, themeDir }) => {\n        if (themeName === theme) {\n          return path.join(themeDir, `src`)\n        } else {\n          return path.join(themeDir, `src`, theme)\n        }\n      })\n  }\n\n  requestPathIsIssuerShadowPath({ requestPath, issuerPath, userSiteDir }) {\n    // get the issuer's theme\n    const matchingThemes = this.getMatchingThemesForPath(requestPath)\n    if (matchingThemes.length !== 1) {\n      return false\n    }\n    const [theme] = matchingThemes\n\n    // get the location of the component relative to src/\n    const [, component] = requestPath.split(path.join(theme.themeDir, `src`))\n\n    // get list of potential shadow locations\n    const shadowFiles = this.getBaseShadowDirsForThemes(theme.themeName)\n      .concat(path.join(userSiteDir, `src`, theme.themeName))\n      .map(dir => path.join(dir, component))\n\n    // if the issuer is requesting a path that is a potential shadow path of itself\n    return shadowFiles.includes(pathWithoutExtension(issuerPath))\n  }\n}\n"],"file":"index.js"}