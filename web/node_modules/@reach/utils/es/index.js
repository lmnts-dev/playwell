var checkedPkgs = {};

var checkStyles = function checkStyles() {};

if (process.env.NODE_ENV !== "production") {
  checkStyles = function checkStyles(pkg) {
    // only check once per package
    if (checkedPkgs[pkg]) return;
    checkedPkgs[pkg] = true;

    if (parseInt(window.getComputedStyle(document.body).getPropertyValue("--reach-" + pkg), 10) !== 1) {
      console.warn("@reach/" + pkg + " styles not found. If you are using a bundler like webpack or parcel include this in the entry file of your app before any of your own styles:\n\n    import \"@reach/" + pkg + "/styles.css\";\n\n  Otherwise you'll need to include them some other way:\n\n    <link rel=\"stylesheet\" type=\"text/css\" href=\"node_modules/@reach/" + pkg + "/styles.css\" />\n\n  For more information visit https://ui.reach.tech/styling.\n  ");
    }
  };
}

export { checkStyles };

export var wrapEvent = function wrapEvent(handler, cb) {
  return function (event) {
    handler && handler(event);
    if (!event.defaultPrevented) {
      return cb(event);
    }
  };
};

export var assignRef = function assignRef(ref, value) {
  if (ref == null) return;
  if (typeof ref === "function") {
    ref(value);
  } else {
    try {
      ref.current = value;
    } catch (error) {
      throw new Error("Cannot assign value \"" + value + "\" to ref \"" + ref + "\"");
    }
  }
};

// This suuuuuuuuuuuucks but I can't think of anything better rn, we could use
// a default React Context, but I don't see how that's any different.
//
// If a Tooltip wraps a MenuButton and the menu returns focus to the button it
// triggers the tooltip focus event and pops up the tooltip and that's gross
// and this is a run-on sentence.  So, we've got this kind of global context
// for tooltip to know if it should respond to focus or not.
var ignoreTooltips = false;

export function disableTooltips() {
  ignoreTooltips = true;
}

export function enableTooltips() {
  ignoreTooltips = false;
}

export function shouldIgnoreTooltips() {
  return ignoreTooltips;
}