{
    "page": 2,
    "results_per_page": 20,
    "results_size": 20,
    "total_results_size": 228,
    "total_pages": 12,
    "next_page": "http://localhost:3000/api/v2/documents/search?ref=WYx9HB8AAB8AmX7z&page=3&pageSize=20",
    "prev_page": "http://localhost:3000/api/v2/documents/search?ref=WYx9HB8AAB8AmX7z&page=1&pageSize=20",
    "results": [
        {
            "id": "WW4bKScAAMAqmluX",
            "uid": "renaudbressand",
            "type": "author",
            "href": "http://localhost:3000/api/v2/documents/search?ref=WYx9HB8AAB8AmX7z&q=%5B%5B%3Ad+%3D+at%28document.id%2C+%22WW4bKScAAMAqmluX%22%29+%5D%5D",
            "tags": ["tagA", "tagB"],
            "first_publication_date": "2017-07-18T14:29:39+0000",
            "last_publication_date": "2017-08-10T15:34:52+0000",
            "slugs": [
                "renaud-bressand"
            ],
            "linked_documents": [],
            "lang": "en-us",
            "alternate_languages": [],
            "data": {
                "author": {
                    "name": {
                        "type": "Text",
                        "value": "Renaud Bressand"
                    },
                    "description": {
                        "type": "Text",
                        "value": "Renaud focuses on user experience and onboarding our users. He also helps out with Support and even codes in @scala. A real Swiss army knife! Passionate about good food as well as a skilled dancer!"
                    },
                    "photobogoss": {
                        "type": "Image",
                        "value": {
                            "main": {
                                "dimensions": {
                                    "width": 180,
                                    "height": 180
                                },
                                "alt": null,
                                "copyright": null,
                                "url": "https://prismic-io.s3.amazonaws.com/wroom/071a2d77065531fabb2bb887bf74f2a4892b03e1_builder.png"
                            },
                            "views": {
                            }
                        }
                    },
                    "picture-profile": {
                        "type": "Image",
                        "value": {
                            "main": {
                                "dimensions": {
                                    "width": 180,
                                    "height": 180
                                },
                                "alt": null,
                                "copyright": null,
                                "url": "https://prismic-io.s3.amazonaws.com/wroom/65661798758002e7f7a6092544fba5ce3dce28df_renaud-bressand.jpg"
                            },
                            "views": {
                            }
                        }
                    }
                }
            }
        },
        {
            "id": "U1kTRgEAAC8A5ldS",
            "uid": null,
            "type": "faq",
            "href": "http://localhost:3000/api/v2/documents/search?ref=WYx9HB8AAB8AmX7z&q=%5B%5B%3Ad+%3D+at%28document.id%2C+%22U1kTRgEAAC8A5ldS%22%29+%5D%5D",
            "tags": [
                "pricing"
            ],
            "first_publication_date": "2016-08-04T14:21:20+0000",
            "last_publication_date": "2017-04-06T14:30:23+0000",
            "slugs": [
                "is-there-any-storage-or-usage-limit-for-a-content-repository"
            ],
            "linked_documents": [],
            "lang": "en-us",
            "alternate_languages": [],
            "data": {
                "faq": {
                    "question": {
                        "type": "StructuredText",
                        "value": [
                            {
                                "type": "heading1",
                                "text": "Is there any storage or usage limit for a content repository? ",
                                "spans": []
                            }
                        ]
                    },
                    "answer": {
                        "type": "StructuredText",
                        "value": [
                            {
                                "type": "paragraph",
                                "text": "There is no hard limit on how much you can store in a production content repository, or on how much you use the Writing Room and the Content Query API.",
                                "spans": []
                            },
                            {
                                "type": "paragraph",
                                "text": "However, we've tuned our content repository for fair normal use. We will reach out to you if we think your project will go beyond this. You can also contact us if you have any further inquiries.",
                                "spans": []
                            }
                        ]
                    },
                    "priority": {
                        "type": "Number",
                        "value": 810.0
                    }
                }
            }
        },
        {
            "id": "UkTEpLO53-4AY1ER",
            "uid": null,
            "type": "doc",
            "href": "http://localhost:3000/api/v2/documents/search?ref=WYx9HB8AAB8AmX7z&q=%5B%5B%3Ad+%3D+at%28document.id%2C+%22UkTEpLO53-4AY1ER%22%29+%5D%5D",
            "tags": [
                "api"
            ],
            "first_publication_date": null,
            "last_publication_date": null,
            "slugs": [
                "predicate-operators",
                "predicates-syntax"
            ],
            "linked_documents": [
                {
                    "id": "UkTEpLO53-4AY1ER",
                    "tags": [
                        "api"
                    ],
                    "type": "doc",
                    "slug": "predicate-operators",
                    "lang": "en-us"
                }
            ],
            "lang": "en-us",
            "alternate_languages": [],
            "data": {
                "doc": {
                    "title": {
                        "type": "StructuredText",
                        "value": [
                            {
                                "type": "heading1",
                                "text": "Predicate operators",
                                "spans": []
                            }
                        ]
                    },
                    "content": {
                        "type": "StructuredText",
                        "value": [
                            {
                                "type": "heading2",
                                "text": "Predicate operators",
                                "spans": []
                            },
                            {
                                "type": "paragraph",
                                "text": "The operator in a predicate is the part that defines how the fragment is matched to the value. For instance, in the predicate above that we just mentioned, the operator is \"at\", and the operator's namespace is \"root\" (which is the one that you don't have to write):",
                                "spans": []
                            },
                            {
                                "type": "preformatted",
                                "text": "[:d = at(document.type, \"product\")]",
                                "spans": []
                            },
                            {
                                "type": "heading3",
                                "text": "The root namespace",
                                "spans": []
                            },
                            {
                                "type": "paragraph",
                                "text": "Operators on the root namespace tend to be for basic tasks that work for all relevant fragment types.",
                                "spans": []
                            },
                            {
                                "type": "paragraph",
                                "text": "The at operator is the equality operator, checking that the fragment matches the described value exactly. It takes as a value:",
                                "spans": [
                                    {
                                        "start": 4,
                                        "end": 6,
                                        "type": "strong"
                                    }
                                ]
                            },
                            {
                                "type": "list-item",
                                "text": "either an array of strings if you're applying it on tags, in which case it checks that ALL the listed tags are part of the document;",
                                "spans": []
                            },
                            {
                                "type": "preformatted",
                                "text": "[:d = at(document.tags, [\"Macaron\", \"Cupcake\"])]",
                                "spans": []
                            },
                            {
                                "type": "list-item",
                                "text": "or a string for any other case (text fragment, document type, document id, ...).",
                                "spans": []
                            },
                            {
                                "type": "preformatted",
                                "text": "[:d = at(document.type, \"product\")]",
                                "spans": []
                            },
                            {
                                "type": "paragraph",
                                "text": "Warning: you shouldn't apply the \"at\" predicate to a structured text fragment, comparing its value to a full text string, as it won't match it. This is pretty logical: your structured text fragment contains so much more than just its full text value!",
                                "spans": [
                                    {
                                        "start": 0,
                                        "end": 249,
                                        "type": "em"
                                    }
                                ]
                            },
                            {
                                "type": "paragraph",
                                "text": "The any operator takes an array of strings as a value. It works exactly the same way as the at operator, but checks whether the fragment matches either one of the values in the array. You can use it with all fragment types; for instance, if you want to get the documents that are either a macaron or a cupcake:",
                                "spans": [
                                    {
                                        "start": 4,
                                        "end": 7,
                                        "type": "strong"
                                    }
                                ]
                            },
                            {
                                "type": "preformatted",
                                "text": "[:d = any(document.tags, [\"Macaron\", \"Cupcake\"])]",
                                "spans": []
                            },
                            {
                                "type": "paragraph",
                                "text": "The fulltext operator provides two capabilities: either you want to check if a certain string is anywhere inside a document (this is what you should use to make your project's search engine feature), or if the string is contained inside a specific document's structured text fragment. Checking whether a string is contained in the document would therefore look like this:",
                                "spans": [
                                    {
                                        "start": 4,
                                        "end": 12,
                                        "type": "strong"
                                    }
                                ]
                            },
                            {
                                "type": "preformatted",
                                "text": "[:d = fulltext(document, \"delight\")]",
                                "spans": []
                            },
                            {
                                "type": "paragraph",
                                "text": "And checking whether it is contained in a given structured text fragment would look like this:",
                                "spans": []
                            },
                            {
                                "type": "preformatted",
                                "text": "[:d = fulltext(my.product.short_lede, \"delight\")]",
                                "spans": []
                            },
                            {
                                "type": "paragraph",
                                "text": "The similar operator is especially smart, since it takes an ID of a document, and returns a list of documents whose contents are similar. This allows to build an automated content discovery feature (for instance, a \"Related posts\" block) at almost no cost. Also, remember that you can combine it with other predicates, and search for the \"similar blog posts\" for instance, of even the \"similar blog posts that mention chocolate\". The additional max parameter allows you to narrow the search in order to get more accurate results; it is especially interesting when you have a lot of documents talking about the same broad subject.",
                                "spans": [
                                    {
                                        "start": 4,
                                        "end": 11,
                                        "type": "strong"
                                    },
                                    {
                                        "start": 445,
                                        "end": 448,
                                        "type": "em"
                                    }
                                ]
                            },
                            {
                                "type": "preformatted",
                                "text": "[:d = similar(\"idOfSomeDocument\", 10)]",
                                "spans": []
                            },
                            {
                                "type": "paragraph",
                                "text": "The has and missing operators check whether a fragment has a value or not. Note that the missing operator will restrict the results to the type implied in the fragment path.",
                                "spans": [
                                    {
                                        "start": 4,
                                        "end": 7,
                                        "type": "strong"
                                    },
                                    {
                                        "start": 12,
                                        "end": 19,
                                        "type": "strong"
                                    }
                                ]
                            },
                            {
                                "type": "preformatted",
                                "text": "[:d = has(my.blog-post.author)]\n[:d = missing(my.blog-post.author)]",
                                "spans": []
                            },
                            {
                                "type": "heading3",
                                "text": "The number namespace",
                                "spans": []
                            },
                            {
                                "type": "paragraph",
                                "text": "Operators that belong to the number namespace are meant to be applied on number fragments.",
                                "spans": []
                            },
                            {
                                "type": "paragraph",
                                "text": "The gt operator tests whether a Number fragment is strictly greater than a numeric value:",
                                "spans": [
                                    {
                                        "start": 4,
                                        "end": 6,
                                        "type": "strong"
                                    }
                                ]
                            },
                            {
                                "type": "preformatted",
                                "text": "[[:d = number.gt(my.product.price, 2)]]",
                                "spans": []
                            },
                            {
                                "type": "paragraph",
                                "text": "The lt operator tests whether a Number fragment is strictly lower than a numeric value:",
                                "spans": [
                                    {
                                        "start": 4,
                                        "end": 6,
                                        "type": "strong"
                                    }
                                ]
                            },
                            {
                                "type": "preformatted",
                                "text": "[[:d = number.lt(my.product.price, 4.2)]]",
                                "spans": []
                            },
                            {
                                "type": "paragraph",
                                "text": "The inRange operator tests whether the Number fragment is between two numeric values; this is one of those operators that take more than just one value:",
                                "spans": [
                                    {
                                        "start": 4,
                                        "end": 11,
                                        "type": "strong"
                                    }
                                ]
                            },
                            {
                                "type": "preformatted",
                                "text": "[[:d = number.inRange(my.product.price, 2, 4)]]",
                                "spans": []
                            },
                            {
                                "type": "heading3",
                                "text": "The date namespace",
                                "spans": []
                            },
                            {
                                "type": "paragraph",
                                "text": "Operators that belong to the date namespace are meant to be applied on Date fragments. Values for dates are potentially:",
                                "spans": []
                            },
                            {
                                "type": "list-item",
                                "text": "dates following the ISO 8601 standard: \"2013-09-25\"",
                                "spans": [
                                    {
                                        "start": 39,
                                        "end": 51,
                                        "type": "strong"
                                    }
                                ]
                            },
                            {
                                "type": "list-item",
                                "text": "datetimes following the ISO 8601 standard: \"2013-11-19T15:30:59z\"",
                                "spans": [
                                    {
                                        "start": 43,
                                        "end": 65,
                                        "type": "strong"
                                    }
                                ]
                            },
                            {
                                "type": "list-item",
                                "text": "or a numerical timestamp: 1384872209277",
                                "spans": [
                                    {
                                        "start": 26,
                                        "end": 39,
                                        "type": "strong"
                                    }
                                ]
                            },
                            {
                                "type": "paragraph",
                                "text": "All of these formats are allowed when this documentation uses the placeholder <date>.",
                                "spans": [
                                    {
                                        "start": 78,
                                        "end": 84,
                                        "type": "em"
                                    }
                                ]
                            },
                            {
                                "type": "paragraph",
                                "text": "The date.before and date.after operators test whether the Date fragment is before/after the specified date:",
                                "spans": [
                                    {
                                        "start": 4,
                                        "end": 15,
                                        "type": "strong"
                                    },
                                    {
                                        "start": 20,
                                        "end": 30,
                                        "type": "strong"
                                    }
                                ]
                            },
                            {
                                "type": "preformatted",
                                "text": "[\n  [:d = date.after(my.blog-post.publication-date, <date>)]\n  [:d = date.before(my.blog-post.publication-date, <date>)]\n]",
                                "spans": []
                            },
                            {
                                "type": "paragraph",
                                "text": "The date.between operator tests whether the Date fragment is between the specified two dates:",
                                "spans": [
                                    {
                                        "start": 4,
                                        "end": 16,
                                        "type": "strong"
                                    }
                                ]
                            },
                            {
                                "type": "preformatted",
                                "text": "[:d = date.between(my.blog-post.publication-date, <date>, <date>)]",
                                "spans": []
                            },
                            {
                                "type": "paragraph",
                                "text": "These three predicates are strict inequalities, in other words the date corresponding to the bounds is not returned in the results. If you need an inclusive query, you should offset the bound by one day. ",
                                "spans": []
                            },
                            {
                                "type": "paragraph",
                                "text": "The date.day-of-month operator tests whether the Date fragment matches the specified day of the month. The value must be between 1 and 31.",
                                "spans": [
                                    {
                                        "start": 4,
                                        "end": 21,
                                        "type": "strong"
                                    }
                                ]
                            },
                            {
                                "type": "preformatted",
                                "text": "[:d = date.day-of-month(my.blog-post.publication-date, 10)]",
                                "spans": []
                            },
                            {
                                "type": "paragraph",
                                "text": "The date.day-of-month-before and date.day-of-month-after operators operators test whether the day of month of the Date fragment is strictly lower/greater than the specified day of the month. The value must be between 1 and 31.",
                                "spans": [
                                    {
                                        "start": 4,
                                        "end": 28,
                                        "type": "strong"
                                    },
                                    {
                                        "start": 33,
                                        "end": 66,
                                        "type": "strong"
                                    }
                                ]
                            },
                            {
                                "type": "preformatted",
                                "text": "[\n  [:d = date.day-of-month-after(my.blog-post.publication-date, 10)]\n  [:d = date.day-of-month-before(my.blog-post.publication-date, 10)]\n]",
                                "spans": []
                            },
                            {
                                "type": "paragraph",
                                "text": "The date.day-of-week operator tests whether the Date fragment matches the specified day of the week. The value must either be between 1 and 7, or between \"Monday\" and \"Sunday\".",
                                "spans": [
                                    {
                                        "start": 4,
                                        "end": 20,
                                        "type": "strong"
                                    }
                                ]
                            },
                            {
                                "type": "preformatted",
                                "text": "[\n  [:d = date.day-of-week(my.blog-post.publication-date, 2)]\n  [:d = date.day-of-week(my.blog-post.publication-date,  \"Tuesday\")]\n]",
                                "spans": []
                            },
                            {
                                "type": "paragraph",
                                "text": "The date.day-of-week-before and date.day-of-week-after operators test whether the day of week of the Date fragment is strictly lower/greater than the specified day of the week. The value must either be between 1 and 7, or between \"Monday\" and \"Sunday\".",
                                "spans": [
                                    {
                                        "start": 4,
                                        "end": 27,
                                        "type": "strong"
                                    },
                                    {
                                        "start": 32,
                                        "end": 54,
                                        "type": "strong"
                                    }
                                ]
                            },
                            {
                                "type": "preformatted",
                                "text": "[\n  [:d = date.day-of-week-after(my.blog-post.publication-date, 4)]\n  [:d = date.day-of-week-before(my.blog-post.publication-date, \"Friday\")]\n]",
                                "spans": []
                            },
                            {
                                "type": "paragraph",
                                "text": "The date.month operator tests whether the Date fragment matches the specified month. The value must be either between 1 and 12, or between \"January\" and \"December\".",
                                "spans": [
                                    {
                                        "start": 4,
                                        "end": 23,
                                        "type": "strong"
                                    }
                                ]
                            },
                            {
                                "type": "preformatted",
                                "text": "[\n  [:d = date.month(my.blog-post.publication-date, 2)]\n  [:d = date.month(my.blog-post.publication-date, \"May\")]\n]",
                                "spans": []
                            },
                            {
                                "type": "paragraph",
                                "text": "The date.month-before and date.month-after operator tests whether the month of the Date fragment is strictly lower/greater that the specified month. The value must be either between 1 and 12, or between \"January\" and \"December\".",
                                "spans": [
                                    {
                                        "start": 4,
                                        "end": 21,
                                        "type": "strong"
                                    },
                                    {
                                        "start": 26,
                                        "end": 42,
                                        "type": "strong"
                                    }
                                ]
                            },
                            {
                                "type": "preformatted",
                                "text": "[\n  [:d = date.month-after(my.blog-post.publication-date, 4)]\n  [:d = date.month-before(my.blog-post.publication-date, \"December\")]\n]",
                                "spans": []
                            },
                            {
                                "type": "paragraph",
                                "text": "The date.year function tests whether the Date fragment matches the specified year.",
                                "spans": [
                                    {
                                        "start": 4,
                                        "end": 13,
                                        "type": "strong"
                                    }
                                ]
                            },
                            {
                                "type": "preformatted",
                                "text": "[\n  [:d = date.year(my.blog-post.publication-date, 2013)]\n]",
                                "spans": []
                            },
                            {
                                "type": "paragraph",
                                "text": "The date.year-before and date.year-after operators test whether the year of the Date fragment is strictly lower/greater that the specified year.",
                                "spans": [
                                    {
                                        "start": 4,
                                        "end": 20,
                                        "type": "strong"
                                    },
                                    {
                                        "start": 25,
                                        "end": 40,
                                        "type": "strong"
                                    }
                                ]
                            },
                            {
                                "type": "preformatted",
                                "text": "[\n  [:d = date.year-after(my.blog-post.publication-date, 2011)]\n  [:d = date.year-before(my.blog-post.publication-date, 2013)]\n]",
                                "spans": []
                            },
                            {
                                "type": "paragraph",
                                "text": "The date.hour operator tests whether the Date fragment matches the specified hour. The value must be between 0 and 23.",
                                "spans": [
                                    {
                                        "start": 4,
                                        "end": 13,
                                        "type": "strong"
                                    }
                                ]
                            },
                            {
                                "type": "preformatted",
                                "text": "[\n  [:d = date.hour(my.blog-post.publication-date, 2)]\n]",
                                "spans": []
                            },
                            {
                                "type": "paragraph",
                                "text": "The date.hour-before and date.hour-after operators test whether the hour of the Date fragment is strictly lower/greater than the specified hour. The value must be between 0 and 23.",
                                "spans": [
                                    {
                                        "start": 4,
                                        "end": 20,
                                        "type": "strong"
                                    },
                                    {
                                        "start": 25,
                                        "end": 40,
                                        "type": "strong"
                                    }
                                ]
                            },
                            {
                                "type": "preformatted",
                                "text": "[\n  [:d = date.hour-after(my.blog-post.publication-date, 17)]\n  [:d = date.hour-before(my.blog-post.publication-date, 12)]\n]",
                                "spans": []
                            }
                        ]
                    },
                    "category": {
                        "type": "Link.document",
                        "value": {
                            "document": {
                                "id": "UjBe8bGIJ3EKtgBZ",
                                "type": "documentation-categoy",
                                "tags": [
                                    "api"
                                ],
                                "lang": "en-us",
                                "slug": "api-documentation",
                                "uid": "api-documentation"
                            },
                            "isBroken": false
                        }
                    }
                }
            }
        },
        {
            "id": "Vc34yhwAAIcID8AG",
            "uid": null,
            "type": "plan",
            "href": "http://localhost:3000/api/v2/documents/search?ref=WYx9HB8AAB8AmX7z&q=%5B%5B%3Ad+%3D+at%28document.id%2C+%22Vc34yhwAAIcID8AG%22%29+%5D%5D",
            "tags": [
                "new"
            ],
            "first_publication_date": null,
            "last_publication_date": null,
            "slugs": [
                "starter",
                "small"
            ],
            "linked_documents": [],
            "lang": "en-us",
            "alternate_languages": [],
            "data": {
                "plan": {
                    "name": {
                        "type": "StructuredText",
                        "value": [
                            {
                                "type": "heading1",
                                "text": "Starter",
                                "spans": []
                            }
                        ]
                    },
                    "users": {
                        "type": "Text",
                        "value": "3 Users"
                    },
                    "price": {
                        "type": "Number",
                        "value": 9.0
                    },
                    "support": {
                        "type": "Text",
                        "value": "Basic Support"
                    },
                    "annualPrice": {
                        "type": "Number",
                        "value": 7.0
                    },
                    "recommended": {
                        "type": "Select",
                        "value": ""
                    },
                    "features": {
                        "type": "StructuredText",
                        "value": [
                            {
                                "type": "paragraph",
                                "text": "All core writing room\nFeatures",
                                "spans": []
                            }
                        ]
                    }
                }
            }
        },
        {
            "id": "UfeAtt_mqSFd3EEs",
            "uid": null,
            "type": "argument-feature",
            "href": "http://localhost:3000/api/v2/documents/search?ref=WYx9HB8AAB8AmX7z&q=%5B%5B%3Ad+%3D+at%28document.id%2C+%22UfeAtt_mqSFd3EEs%22%29+%5D%5D",
            "tags": [
                "topargument",
                "developers"
            ],
            "first_publication_date": null,
            "last_publication_date": null,
            "slugs": [
                "get-started-in-no-time"
            ],
            "linked_documents": [],
            "lang": "en-us",
            "alternate_languages": [],
            "data": {
                "argument-feature": {
                    "title": {
                        "type": "StructuredText",
                        "value": [
                            {
                                "type": "heading1",
                                "text": "Get started in no time",
                                "spans": []
                            }
                        ]
                    },
                    "catcher": {
                        "type": "StructuredText",
                        "value": [
                            {
                                "type": "paragraph",
                                "text": "Get your project up and running in seconds. Nothing to install.",
                                "spans": []
                            }
                        ]
                    },
                    "priority": {
                        "type": "Number",
                        "value": 400.0
                    },
                    "image": {
                        "type": "Image",
                        "value": {
                            "main": {
                                "dimensions": {
                                    "width": 160,
                                    "height": 160
                                },
                                "alt": null,
                                "copyright": null,
                                "url": "https://prismic-io.s3.amazonaws.com/wroom/a1636efe83467ac13459c2667bb7078acbbac426.png"
                            },
                            "views": {
                            }
                        }
                    }
                }
            }
        },
        {
            "id": "UotrJknM01Itg9Ul",
            "uid": "structuring-content-leads-to-powerful-content-query",
            "type": "blog",
            "href": "http://localhost:3000/api/v2/documents/search?ref=WYx9HB8AAB8AmX7z&q=%5B%5B%3Ad+%3D+at%28document.id%2C+%22UotrJknM01Itg9Ul%22%29+%5D%5D",
            "tags": [],
            "first_publication_date": null,
            "last_publication_date": "2017-07-19T15:00:34+0000",
            "slugs": [
                "structuring-content-leads-to-powerful-content-query-api",
                "prismicio-api",
                "api-in-depth"
            ],
            "linked_documents": [
                {
                    "id": "UotrJknM01Itg9Ul",
                    "tags": [],
                    "type": "blog",
                    "slug": "structuring-content-leads-to-powerful-content-query-api",
                    "lang": "en-us"
                },
                {
                    "id": "UotrJknM01Itg9Ul",
                    "tags": [],
                    "type": "blog",
                    "slug": "structuring-content-leads-to-powerful-content-query-api",
                    "lang": "en-us"
                }
            ],
            "lang": "en-us",
            "alternate_languages": [],
            "data": {
                "blog": {
                    "image": {
                        "type": "Image",
                        "value": {
                            "main": {
                                "dimensions": {
                                    "width": 700,
                                    "height": 200
                                },
                                "alt": null,
                                "copyright": null,
                                "url": "https://prismic-io.s3.amazonaws.com/wroom/45d2182ac451d38447db4df81cdee38e099c9da7_wroom2fe6895dfd-e087-4fd5-8660-587f4f7881a5_icon-api-sre.png"
                            },
                            "views": {
                            }
                        }
                    },
                    "title": {
                        "type": "StructuredText",
                        "value": [
                            {
                                "type": "heading1",
                                "text": "Structuring Content leads to Powerful Content Query API",
                                "spans": []
                            }
                        ]
                    },
                    "body": {
                        "type": "StructuredText",
                        "value": [
                            {
                                "type": "paragraph",
                                "text": "One of the things that got me interested when joining the prismic.io team, is the possibilities behind the concept of clean separation between content management from one side and the query api from the other side. This is what we call Writing Room and Content Query API.",
                                "spans": [
                                    {
                                        "start": 0,
                                        "end": 214,
                                        "type": "label",
                                        "data": {
                                            "label": "excerpt"
                                        }
                                    }
                                ]
                            },
                            {
                                "type": "paragraph",
                                "text": "Not only does it allow content writers to author, manage and publish content with a dedicated tool, but it also opens a lot of possibilities by making all content queryable in all kinds of ways through the API.",
                                "spans": []
                            },
                            {
                                "type": "paragraph",
                                "text": "This is why I thought of writing a blog post on how structuring content in the Writing Room enables a powerful query API for finding content and integrating it in projects.",
                                "spans": []
                            },
                            {
                                "type": "heading2",
                                "text": "Content structure: breaking content into pieces",
                                "spans": []
                            },
                            {
                                "type": "paragraph",
                                "text": "Structuring content simply means going away from authoring opaque, mixed with style, content blocks that can hardly be analyzed. Instead, we cut or structure content documents into more meaningful parts (we call them fragments).",
                                "spans": []
                            },
                            {
                                "type": "paragraph",
                                "text": "Let's take an example of a Cup Cake document: instead of creating a huge html document with all the description of a cupcake all mixed together, we rather structure that document to have different fields for title, flavor, price, main image, color, etc.",
                                "spans": []
                            },
                            {
                                "type": "paragraph",
                                "text": "Not only we structure our documents in different fields, but we also specify the kinds of these fields: title is text, price is a number, etc.  This allows us to better organize our content, and more importantly to further exploit the power of the Content Query Api.",
                                "spans": []
                            },
                            {
                                "type": "image",
                                "url": "https://prismic-io.s3.amazonaws.com/wroom/e48c917a296f405334f8a58bc0d41040cb76404c_fragments.png",
                                "alt": null,
                                "copyright": null,
                                "dimensions": {
                                    "width": 700,
                                    "height": 435
                                }
                            },
                            {
                                "type": "heading2",
                                "text": "Querying content: retrieve documents",
                                "spans": []
                            },
                            {
                                "type": "paragraph",
                                "text": "Now that we structured our cupcake into different fragments. Let's search for pastries with the flavor \"Chocolate\". In prismic.io, we use predicates to express a search. Here is the predicate for finding documents with a flavor:",
                                "spans": []
                            },
                            {
                                "type": "preformatted",
                                "text": ":d = at(my.product.flavour, \"Chocolate\")",
                                "spans": []
                            },
                            {
                                "type": "paragraph",
                                "text": "Basically here we are saying that we're looking for documents containing \"Chocolate\" in their flavor fragment. In every repository there is an API browser allowing you to experiment with queries on your content. You can try the flavor predicate yourself in the \"Les Bonnes Choses\" API browser.",
                                "spans": [
                                    {
                                        "start": 94,
                                        "end": 101,
                                        "type": "em"
                                    },
                                    {
                                        "start": 261,
                                        "end": 293,
                                        "type": "hyperlink",
                                        "data": {
                                            "type": "Link.web",
                                            "value": {
                                                "url": "https://prismic.io/docs/how-query-predicates-work"
                                            }
                                        }
                                    }
                                ]
                            },
                            {
                                "type": "paragraph",
                                "text": "In the structure we described above, we saw that we have a price fragment which is a number. This simply means that we can, for instance, search all products with a specific price:",
                                "spans": [
                                    {
                                        "start": 163,
                                        "end": 179,
                                        "type": "hyperlink",
                                        "data": {
                                            "type": "Link.web",
                                            "value": {
                                                "url": "https://prismic.io/docs/query-by-field"
                                            }
                                        }
                                    }
                                ]
                            },
                            {
                                "type": "preformatted",
                                "text": ":d = at(my.product.price, 2.5)",
                                "spans": []
                            },
                            {
                                "type": "paragraph",
                                "text": "To make more useful let's rather search a range of price:",
                                "spans": [
                                    {
                                        "start": 40,
                                        "end": 56,
                                        "type": "hyperlink",
                                        "data": {
                                            "type": "Link.web",
                                            "value": {
                                                "url": "https://prismic.io/docs/query-by-field"
                                            }
                                        }
                                    }
                                ]
                            },
                            {
                                "type": "preformatted",
                                "text": ":d = number.inRange(my.product.price, 2, 4)",
                                "spans": []
                            },
                            {
                                "type": "paragraph",
                                "text": "Of course you can use other number predicates, and in the same way other kinds of fragments like date, color, link, etc.",
                                "spans": []
                            },
                            {
                                "type": "heading2",
                                "text": "Full-text search",
                                "spans": []
                            },
                            {
                                "type": "paragraph",
                                "text": "One of the important feature of a website or app is the famous search box. It allows user to quickly find what they're looking for. A search box uses what is called full-text search: the capacity to search some words inside a lot of content base, and find all relevant documents.",
                                "spans": []
                            },
                            {
                                "type": "paragraph",
                                "text": "If you have ever tried to implement a search box, and so provide full-text search capability to your project, you know how tedious and inefficient it is to do with classic CMS approaches. Structuring content naturally solves that.",
                                "spans": []
                            },
                            {
                                "type": "paragraph",
                                "text": "For example, our cupcakes have a textual fragment \"Description\". This means that we can search over descriptions of pastries for, say, \"chocolate cream\":",
                                "spans": [
                                    {
                                        "start": 135,
                                        "end": 152,
                                        "type": "hyperlink",
                                        "data": {
                                            "type": "Link.web",
                                            "value": {
                                                "url": "https://prismic.io/docs/query-by-field"
                                            }
                                        }
                                    }
                                ]
                            },
                            {
                                "type": "preformatted",
                                "text": ":d = fulltext(my.product.description, \"chocolate cream\")",
                                "spans": []
                            },
                            {
                                "type": "paragraph",
                                "text": "Since a document can contain several text fragments, we can choose to do a full-text search in all fragments of a document:",
                                "spans": [
                                    {
                                        "start": 92,
                                        "end": 108,
                                        "type": "hyperlink",
                                        "data": {
                                            "type": "Link.web",
                                            "value": {
                                                "url": "https://prismic.io/docs/fulltext-search"
                                            }
                                        }
                                    }
                                ]
                            },
                            {
                                "type": "preformatted",
                                "text": ":d = fulltext(document, \"chocolate cream\")",
                                "spans": []
                            },
                            {
                                "type": "paragraph",
                                "text": "In prismic.io, all text and more particularly Rich Text, fragments are analysed and indexed for a full-text search. Moreover, the structure of the text is taken into account for boosting important terms, and to calculate how relevant a search result is.",
                                "spans": [
                                    {
                                        "start": 46,
                                        "end": 55,
                                        "type": "hyperlink",
                                        "data": {
                                            "type": "Link.document",
                                            "value": {
                                                "document": {
                                                    "id": "VielxhwAAB4AvKGJ",
                                                    "type": "doc-fields",
                                                    "tags": [],
                                                    "lang": "en-us",
                                                    "slug": "rich-text",
                                                    "uid": "richtext"
                                                },
                                                "isBroken": false
                                            }
                                        }
                                    }
                                ]
                            },
                            {
                                "type": "heading2",
                                "text": "Combine different predicates",
                                "spans": []
                            },
                            {
                                "type": "paragraph",
                                "text": "What if we want to look for pastries with the \"Chocolate\" flavor in a certain price range? We simply combine the different predicates in the same search:",
                                "spans": [
                                    {
                                        "start": 37,
                                        "end": 89,
                                        "type": "hyperlink",
                                        "data": {
                                            "type": "Link.web",
                                            "value": {
                                                "url": "https://prismic.io/docs/query-by-field"
                                            }
                                        }
                                    }
                                ]
                            },
                            {
                                "type": "preformatted",
                                "text": "[\n  :d = at(my.product.flavour, \"Chocolate\")\n  :d = number.inRange(my.product.price, 2, 4)\n]",
                                "spans": []
                            },
                            {
                                "type": "paragraph",
                                "text": "What about searching all products with \"Chocolate Cream\" in a certain range of price? We can combine these too:",
                                "spans": [
                                    {
                                        "start": 34,
                                        "end": 84,
                                        "type": "hyperlink",
                                        "data": {
                                            "type": "Link.web",
                                            "value": {
                                                "url": "https://prismic.io/docs/fulltext-search"
                                            }
                                        }
                                    }
                                ]
                            },
                            {
                                "type": "preformatted",
                                "text": "[\n  :d = fulltext(document, \"chocolate cream\")\n  :d = number.inRange(my.product.price, 2, 5)\n]",
                                "spans": []
                            },
                            {
                                "type": "heading2",
                                "text": "More to explore",
                                "spans": []
                            },
                            {
                                "type": "paragraph",
                                "text": "Structuring content and combining different predicates provides a powerful way to lookup a repository content and integrate it into a project. We've seen a few examples of possible predicates, but there are many other interesting ones.",
                                "spans": []
                            },
                            {
                                "type": "paragraph",
                                "text": "There is so much search power one can provide by simply structuring correctly their content, think of geo-localisation, color range, related documents, etc. Predicates certainly provide a flexible mechanism to increasingly integrate more search power.",
                                "spans": []
                            }
                        ]
                    },
                    "date": {
                        "type": "Date",
                        "value": "2014-03-26"
                    },
                    "author": {
                        "type": "Text",
                        "value": "Sébastien Renault"
                    },
                    "authorlink": {
                        "type": "Link.document",
                        "value": {
                            "document": {
                                "id": "WW9tRycAADmWoC-i",
                                "type": "author",
                                "tags": [],
                                "lang": "en-us",
                                "slug": "sebastien-renault",
                                "uid": "sebastien-renault"
                            },
                            "isBroken": false
                        }
                    },
                    "category": {
                        "type": "Select",
                        "value": "concept"
                    },
                    "allow_comments": {
                        "type": "Select",
                        "value": "Yes"
                    },
                    "metaTitle": {
                        "type": "StructuredText",
                        "value": [
                            {
                                "type": "heading1",
                                "text": "Structuring Content leads to Powerful Content Query API",
                                "spans": []
                            }
                        ]
                    },
                    "metaDescription": {
                        "type": "StructuredText",
                        "value": [
                            {
                                "type": "paragraph",
                                "text": "One of the things that got me interested when joining the prismic.io team, is the possibilities behind the concept of clean separation between content management from one side and the query api from the other side.",
                                "spans": []
                            }
                        ]
                    }
                }
            }
        },
        {
            "id": "UmlghEnM00YhgHUB",
            "uid": null,
            "type": "doc",
            "href": "http://localhost:3000/api/v2/documents/search?ref=WYx9HB8AAB8AmX7z&q=%5B%5B%3Ad+%3D+at%28document.id%2C+%22UmlghEnM00YhgHUB%22%29+%5D%5D",
            "tags": [
                "api"
            ],
            "first_publication_date": null,
            "last_publication_date": null,
            "slugs": [
                "orderings",
                "orderings-and-paging"
            ],
            "linked_documents": [
                {
                    "id": "UmlghEnM00YhgHUB",
                    "tags": [
                        "api"
                    ],
                    "type": "doc",
                    "slug": "orderings",
                    "lang": "en-us"
                }
            ],
            "lang": "en-us",
            "alternate_languages": [],
            "data": {
                "doc": {
                    "title": {
                        "type": "StructuredText",
                        "value": [
                            {
                                "type": "heading1",
                                "text": "Orderings",
                                "spans": []
                            }
                        ]
                    },
                    "content": {
                        "type": "StructuredText",
                        "value": [
                            {
                                "type": "heading2",
                                "text": "Orderings",
                                "spans": []
                            },
                            {
                                "type": "paragraph",
                                "text": "Predicates help you get the right set of content, but you might want the JSON presented in a specific order, so you can use it as is, in your project.",
                                "spans": []
                            },
                            {
                                "type": "paragraph",
                                "text": "To order a collection by a given fragment, you simply need to tell which fragment, between brackets (see our \"Writing your expressions\" paragraph above):",
                                "spans": []
                            },
                            {
                                "type": "preformatted",
                                "text": "[my.product.price]",
                                "spans": []
                            },
                            {
                                "type": "paragraph",
                                "text": "If you want to order it from greatest to lowest, you can simply add \"desc\" next to the fragment's name:",
                                "spans": []
                            },
                            {
                                "type": "preformatted",
                                "text": "[my.product.price desc]",
                                "spans": []
                            },
                            {
                                "type": "paragraph",
                                "text": "Depending on your query, your collection may contain documents of several different types. If some returned documents do not contain this fragment, you can specify as many fragments as you want, in order to address all of the documents you are querying:",
                                "spans": []
                            },
                            {
                                "type": "preformatted",
                                "text": "[my.product.price desc,my.blog-post.date desc,my.store.country]",
                                "spans": []
                            },
                            {
                                "type": "paragraph",
                                "text": "This can also be useful if, on a given type, several documents have the same value for your ordered fragment; you can then tell them apart by setting secondary orderings, that easily:",
                                "spans": []
                            },
                            {
                                "type": "preformatted",
                                "text": "[my.product.price desc,my.product.name,my.blog-post.date desc,my.store.country,my.store.city]",
                                "spans": []
                            },
                            {
                                "type": "paragraph",
                                "text": "Be careful: since your fragments are typed, you do have to list them all even when they have the same name for different types. For instance:",
                                "spans": []
                            },
                            {
                                "type": "preformatted",
                                "text": "[my.product.name,my.job-offer.name]",
                                "spans": []
                            },
                            {
                                "type": "paragraph",
                                "text": "At the moment, it is possible to order by those fragment types:",
                                "spans": []
                            },
                            {
                                "type": "list-item",
                                "text": "Text",
                                "spans": []
                            },
                            {
                                "type": "list-item",
                                "text": "Date",
                                "spans": []
                            },
                            {
                                "type": "list-item",
                                "text": "Number",
                                "spans": []
                            },
                            {
                                "type": "list-item",
                                "text": "Range",
                                "spans": []
                            },
                            {
                                "type": "list-item",
                                "text": "Select",
                                "spans": []
                            },
                            {
                                "type": "list-item",
                                "text": "StructuredText (the order will be based on the first Text block found inside the fragment)",
                                "spans": []
                            }
                        ]
                    },
                    "category": {
                        "type": "Link.document",
                        "value": {
                            "document": {
                                "id": "UjBe8bGIJ3EKtgBZ",
                                "type": "documentation-categoy",
                                "tags": [
                                    "api"
                                ],
                                "lang": "en-us",
                                "slug": "api-documentation",
                                "uid": "api-documentation"
                            },
                            "isBroken": false
                        }
                    }
                }
            }
        },
        {
            "id": "WIIhhyIAANgCOPNL",
            "uid": "query-document-by-id-or-uid",
            "type": "doc-page",
            "href": "http://localhost:3000/api/v2/documents/search?ref=WYx9HB8AAB8AmX7z&q=%5B%5B%3Ad+%3D+at%28document.id%2C+%22WIIhhyIAANgCOPNL%22%29+%5D%5D",
            "tags": [],
            "first_publication_date": "2017-01-26T14:18:02+0000",
            "last_publication_date": "2017-04-11T15:04:03+0000",
            "slugs": [
                "query-documents-by-id-or-uid",
                "query-document-by-id-or-uid"
            ],
            "linked_documents": [],
            "lang": "en-us",
            "alternate_languages": [],
            "data": {
                "doc-page": {
                    "title": {
                        "type": "StructuredText",
                        "value": [
                            {
                                "type": "heading1",
                                "text": "Query Documents by ID or UID",
                                "spans": []
                            }
                        ]
                    },
                    "description": {
                        "type": "StructuredText",
                        "value": [
                            {
                                "type": "paragraph",
                                "text": "You can retrieve either multiple documents or a single one by their document id. It is also possible to query a document by its uid.",
                                "spans": []
                            }
                        ]
                    },
                    "body": {
                        "type": "SliceZone",
                        "value": [
                            {
                                "type": "Slice",
                                "slice_type": "text",
                                "slice_label": null,
                                "value": {
                                    "type": "Group",
                                    "value": [
                                        {
                                            "content": {
                                                "type": "StructuredText",
                                                "value": [
                                                    {
                                                        "type": "paragraph",
                                                        "text": "Query a document by its id using the helper function",
                                                        "spans": []
                                                    }
                                                ]
                                            }
                                        }
                                    ]
                                }
                            },
                            {
                                "type": "Slice",
                                "slice_type": "code",
                                "slice_label": null,
                                "value": {
                                    "type": "Group",
                                    "value": [
                                        {
                                            "technology": {
                                                "type": "Select",
                                                "value": "javascript"
                                            },
                                            "snippet": {
                                                "type": "StructuredText",
                                                "value": [
                                                    {
                                                        "type": "preformatted",
                                                        "text": "api.getByID('WAjgAygABN3B0a-a').then(function(pageContent) {\n    // pageContent contains the document content\n});",
                                                        "spans": []
                                                    }
                                                ]
                                            }
                                        },
                                        {
                                            "technology": {
                                                "type": "Select",
                                                "value": "php"
                                            },
                                            "snippet": {
                                                "type": "StructuredText",
                                                "value": [
                                                    {
                                                        "type": "preformatted",
                                                        "text": "$pageContent = $api->getByID('WAjgAygABN3B0a-a');\n// $pageContent contains the document object",
                                                        "spans": []
                                                    }
                                                ]
                                            }
                                        },
                                        {
                                            "technology": {
                                                "type": "Select",
                                                "value": "ruby"
                                            },
                                            "snippet": {
                                                "type": "StructuredText",
                                                "value": [
                                                    {
                                                        "type": "preformatted",
                                                        "text": "page_content = api.getByID(\"WAjgAygABN3B0a-a\")\n# page_content contains the document content",
                                                        "spans": []
                                                    }
                                                ]
                                            }
                                        }
                                    ]
                                }
                            },
                            {
                                "type": "Slice",
                                "slice_type": "text",
                                "slice_label": null,
                                "value": {
                                    "type": "Group",
                                    "value": [
                                        {
                                            "content": {
                                                "type": "StructuredText",
                                                "value": [
                                                    {
                                                        "type": "paragraph",
                                                        "text": "Query a document by its id without the helper function",
                                                        "spans": []
                                                    }
                                                ]
                                            }
                                        }
                                    ]
                                }
                            },
                            {
                                "type": "Slice",
                                "slice_type": "code",
                                "slice_label": null,
                                "value": {
                                    "type": "Group",
                                    "value": [
                                        {
                                            "technology": {
                                                "type": "Select",
                                                "value": "javascript"
                                            },
                                            "snippet": {
                                                "type": "StructuredText",
                                                "value": [
                                                    {
                                                        "type": "preformatted",
                                                        "text": "api.query(\n    Prismic.Predicates.at('document.id', 'WAjgAygAAN3B0a-a')\n).then(function(pageContent) {\n    // pageContent.results[0] contains the document content\n});",
                                                        "spans": []
                                                    }
                                                ]
                                            }
                                        },
                                        {
                                            "technology": {
                                                "type": "Select",
                                                "value": "php"
                                            },
                                            "snippet": {
                                                "type": "StructuredText",
                                                "value": [
                                                    {
                                                        "type": "preformatted",
                                                        "text": "$pageContent = $api->query(Predicates::at('document.id', 'WAjgAygAAN3B0a-a'));\n// $pageContent->getResults()[0] contains the document content",
                                                        "spans": []
                                                    }
                                                ]
                                            }
                                        },
                                        {
                                            "technology": {
                                                "type": "Select",
                                                "value": "ruby"
                                            },
                                            "snippet": {
                                                "type": "StructuredText",
                                                "value": [
                                                    {
                                                        "type": "preformatted",
                                                        "text": "page_content = api.query(Prismic::Predicates.at(\"document.id\", \"WAjgAygAAN3B0a-a\"))\n# page_content.results[0] contains the document content",
                                                        "spans": []
                                                    }
                                                ]
                                            }
                                        }
                                    ]
                                }
                            },
                            {
                                "type": "Slice",
                                "slice_type": "text",
                                "slice_label": null,
                                "value": {
                                    "type": "Group",
                                    "value": [
                                        {
                                            "content": {
                                                "type": "StructuredText",
                                                "value": [
                                                    {
                                                        "type": "paragraph",
                                                        "text": "Query multiple documents by their ids using the helper function",
                                                        "spans": []
                                                    }
                                                ]
                                            }
                                        }
                                    ]
                                }
                            },
                            {
                                "type": "Slice",
                                "slice_type": "code",
                                "slice_label": null,
                                "value": {
                                    "type": "Group",
                                    "value": [
                                        {
                                            "technology": {
                                                "type": "Select",
                                                "value": "javascript"
                                            },
                                            "snippet": {
                                                "type": "StructuredText",
                                                "value": [
                                                    {
                                                        "type": "preformatted",
                                                        "text": "var ids = ['WAjgAygAAN3B0a-a', 'WC7GECUAAHBHQd-Y', 'WEE_gikAAC2feA-z'];\napi.getByIDs(ids).then(function(content) {\n    // content is the response object, content.results holds the documents\n});",
                                                        "spans": []
                                                    }
                                                ]
                                            }
                                        },
                                        {
                                            "technology": {
                                                "type": "Select",
                                                "value": "php"
                                            },
                                            "snippet": {
                                                "type": "StructuredText",
                                                "value": [
                                                    {
                                                        "type": "preformatted",
                                                        "text": "$ids = ['WAjgAygAAN3B0a-a', 'WC7GECUAAHBHQd-Y', 'WEE_gikAAC2feA-z'];\n$content = $api->getByIDs($ids);\n// $content contains the response object, $content->getResults() holds the documents",
                                                        "spans": []
                                                    }
                                                ]
                                            }
                                        },
                                        {
                                            "technology": {
                                                "type": "Select",
                                                "value": "ruby"
                                            },
                                            "snippet": {
                                                "type": "StructuredText",
                                                "value": [
                                                    {
                                                        "type": "preformatted",
                                                        "text": "ids = [ \"WAjgAygAAN3B0a-a\", \"WC7GECUAAHBHQd-Y\", \"WEE_gikAAC2feA-z\" ]\ncontent = api.getByIDs(ids)\n# content is the response object, content.results holds the documents",
                                                        "spans": []
                                                    }
                                                ]
                                            }
                                        }
                                    ]
                                }
                            },
                            {
                                "type": "Slice",
                                "slice_type": "text",
                                "slice_label": null,
                                "value": {
                                    "type": "Group",
                                    "value": [
                                        {
                                            "content": {
                                                "type": "StructuredText",
                                                "value": [
                                                    {
                                                        "type": "paragraph",
                                                        "text": "Query multiple documents by their ids without the helper function",
                                                        "spans": []
                                                    }
                                                ]
                                            }
                                        }
                                    ]
                                }
                            },
                            {
                                "type": "Slice",
                                "slice_type": "code",
                                "slice_label": null,
                                "value": {
                                    "type": "Group",
                                    "value": [
                                        {
                                            "technology": {
                                                "type": "Select",
                                                "value": "javascript"
                                            },
                                            "snippet": {
                                                "type": "StructuredText",
                                                "value": [
                                                    {
                                                        "type": "preformatted",
                                                        "text": "var ids = ['WAjgAygAAN3B0a-a', 'WC7GECUAAHBHQd-Y', 'WEE_gikAAC2feA-z'];\napi.query(\n    Prismic.Predicates.in('document.id', ids)\n).then(function(content) {\n    // content is the response object, content.results holds the documents\n});",
                                                        "spans": []
                                                    }
                                                ]
                                            }
                                        },
                                        {
                                            "technology": {
                                                "type": "Select",
                                                "value": "php"
                                            },
                                            "snippet": {
                                                "type": "StructuredText",
                                                "value": [
                                                    {
                                                        "type": "preformatted",
                                                        "text": "$ids = ['WAjgAygAAN3B0a-a', 'WC7GECUAAHBHQd-Y', 'WEE_gikAAC2feA-z'];\n$content = $api->query(\n    Predicates::in('document.id', $ids)\n);\n// $content is the response object, $content->getResults() holds the documents",
                                                        "spans": []
                                                    }
                                                ]
                                            }
                                        },
                                        {
                                            "technology": {
                                                "type": "Select",
                                                "value": "ruby"
                                            },
                                            "snippet": {
                                                "type": "StructuredText",
                                                "value": [
                                                    {
                                                        "type": "preformatted",
                                                        "text": "ids = [ \"WAjgAygAAN3B0a-a\", \"WC7GECUAAHBHQd-Y\", \"WEE_gikAAC2feA-z\" ]\ncontent = api.query(Prismic::Predicates.in(\"document.id\", ids))\n# content is the response object, content.results holds the documents",
                                                        "spans": []
                                                    }
                                                ]
                                            }
                                        }
                                    ]
                                }
                            },
                            {
                                "type": "Slice",
                                "slice_type": "text",
                                "slice_label": null,
                                "value": {
                                    "type": "Group",
                                    "value": [
                                        {
                                            "content": {
                                                "type": "StructuredText",
                                                "value": [
                                                    {
                                                        "type": "paragraph",
                                                        "text": "Query a document of the type “page” by its uid “about-us”.",
                                                        "spans": []
                                                    }
                                                ]
                                            }
                                        }
                                    ]
                                }
                            },
                            {
                                "type": "Slice",
                                "slice_type": "code",
                                "slice_label": null,
                                "value": {
                                    "type": "Group",
                                    "value": [
                                        {
                                            "technology": {
                                                "type": "Select",
                                                "value": "javascript"
                                            },
                                            "snippet": {
                                                "type": "StructuredText",
                                                "value": [
                                                    {
                                                        "type": "preformatted",
                                                        "text": "api.getByUID('page', 'about-us').then(function(pageContent) {\n    // pageContent contains the document content\n});",
                                                        "spans": []
                                                    }
                                                ]
                                            }
                                        },
                                        {
                                            "technology": {
                                                "type": "Select",
                                                "value": "php"
                                            },
                                            "snippet": {
                                                "type": "StructuredText",
                                                "value": [
                                                    {
                                                        "type": "preformatted",
                                                        "text": "$pageContent = $api->getByUID('page', 'about-us');\n// $pageContent contains the document content",
                                                        "spans": []
                                                    }
                                                ]
                                            }
                                        },
                                        {
                                            "technology": {
                                                "type": "Select",
                                                "value": "ruby"
                                            },
                                            "snippet": {
                                                "type": "StructuredText",
                                                "value": [
                                                    {
                                                        "type": "preformatted",
                                                        "text": "page_content = api.getByUID(\"page\", \"about-us\")\n# page_content contains the document content",
                                                        "spans": []
                                                    }
                                                ]
                                            }
                                        }
                                    ]
                                }
                            },
                            {
                                "type": "Slice",
                                "slice_type": "text",
                                "slice_label": null,
                                "value": {
                                    "type": "Group",
                                    "value": [
                                        {
                                            "content": {
                                                "type": "StructuredText",
                                                "value": [
                                                    {
                                                        "type": "paragraph",
                                                        "text": "Query a document of the type \"page\" by its uid \"about us\" without using the helper function",
                                                        "spans": []
                                                    }
                                                ]
                                            }
                                        }
                                    ]
                                }
                            },
                            {
                                "type": "Slice",
                                "slice_type": "code",
                                "slice_label": null,
                                "value": {
                                    "type": "Group",
                                    "value": [
                                        {
                                            "technology": {
                                                "type": "Select",
                                                "value": "javascript"
                                            },
                                            "snippet": {
                                                "type": "StructuredText",
                                                "value": [
                                                    {
                                                        "type": "preformatted",
                                                        "text": "api.query(\n    Prismic.Predicates.at('my.page.uid', 'about-us')\n).then(function(pageContent) {\n    // pageContent is the response object, pageContent.results holds the documents\n});",
                                                        "spans": []
                                                    }
                                                ]
                                            }
                                        },
                                        {
                                            "technology": {
                                                "type": "Select",
                                                "value": "php"
                                            },
                                            "snippet": {
                                                "type": "StructuredText",
                                                "value": [
                                                    {
                                                        "type": "preformatted",
                                                        "text": "$pageContent = $api->query(Predicates::at('my.page.uid', 'about-us'));\n// $pageContent->getResults()[0] contains the document content",
                                                        "spans": []
                                                    }
                                                ]
                                            }
                                        },
                                        {
                                            "technology": {
                                                "type": "Select",
                                                "value": "ruby"
                                            },
                                            "snippet": {
                                                "type": "StructuredText",
                                                "value": [
                                                    {
                                                        "type": "preformatted",
                                                        "text": "page_content = api.query(Prismic::Predicates.at(\"my.page.uid\", \"about-us\"))\n# page_content.results[0] contains the document content",
                                                        "spans": []
                                                    }
                                                ]
                                            }
                                        }
                                    ]
                                }
                            }
                        ]
                    },
                    "metaTitle": {
                        "type": "StructuredText",
                        "value": [
                            {
                                "type": "heading1",
                                "text": "Query Documents by ID or UID",
                                "spans": []
                            }
                        ]
                    },
                    "metaDescription": {
                        "type": "StructuredText",
                        "value": [
                            {
                                "type": "paragraph",
                                "text": "Here is how to query prismic.io documents by their ID or UID. Presented are the different methods to query them both using the helper functions and using regular predicates.",
                                "spans": []
                            }
                        ]
                    }
                }
            }
        },
        {
            "id": "UjBh78uvzeMJvE4o",
            "uid": null,
            "type": "kit",
            "href": "http://localhost:3000/api/v2/documents/search?ref=WYx9HB8AAB8AmX7z&q=%5B%5B%3Ad+%3D+at%28document.id%2C+%22UjBh78uvzeMJvE4o%22%29+%5D%5D",
            "tags": [],
            "first_publication_date": null,
            "last_publication_date": null,
            "slugs": [
                "python"
            ],
            "linked_documents": [],
            "lang": "en-us",
            "alternate_languages": [],
            "data": {
                "kit": {
                    "name": {
                        "type": "StructuredText",
                        "value": [
                            {
                                "type": "heading1",
                                "text": "Python",
                                "spans": []
                            }
                        ]
                    },
                    "logo": {
                        "type": "Image",
                        "value": {
                            "main": {
                                "dimensions": {
                                    "width": 400,
                                    "height": 400
                                },
                                "alt": null,
                                "copyright": null,
                                "url": "https://prismic-io.s3.amazonaws.com/wroom/dc7fd534afb79ad2c23adb46451652cfcb56c9b7.png"
                            },
                            "views": {
                                "icon": {
                                    "dimensions": {
                                        "width": 150,
                                        "height": 150
                                    },
                                    "alt": null,
                                    "copyright": null,
                                    "url": "https://prismic-io.s3.amazonaws.com/wroom/34a2a7e1be841451d5b95c82d726ee856bbdcf2d.png"
                                }
                            }
                        }
                    },
                    "description": {
                        "type": "StructuredText",
                        "value": [
                            {
                                "type": "heading1",
                                "text": "Work with Python and prismic.io",
                                "spans": []
                            },
                            {
                                "type": "heading2",
                                "text": "Python kit built and maintained by us",
                                "spans": []
                            },
                            {
                                "type": "paragraph",
                                "text": "We provide a kit that requires no external dependency and can be inserted into any kind of Python project.",
                                "spans": []
                            },
                            {
                                "type": "paragraph",
                                "text": "For, now you have to install it from the git repository:",
                                "spans": []
                            },
                            {
                                "type": "preformatted",
                                "text": "pip install git+https://github.com/prismicio/python-kit.git",
                                "spans": []
                            },
                            {
                                "type": "heading3",
                                "text": "Kit's source code and documentation",
                                "spans": []
                            },
                            {
                                "type": "paragraph",
                                "text": "Please check the Python Kit GitHub repository for more source code, documentation or to report any issues.",
                                "spans": [
                                    {
                                        "start": 17,
                                        "end": 34,
                                        "type": "hyperlink",
                                        "data": {
                                            "type": "Link.web",
                                            "value": {
                                                "url": "https://github.com/prismicio/python-kit"
                                            }
                                        }
                                    }
                                ]
                            },
                            {
                                "type": "heading2",
                                "text": "Work with Python and Django",
                                "spans": []
                            },
                            {
                                "type": "paragraph",
                                "text": "You can use this Python Kit along with Django to create your application. We have a ready to use Starter Project that you can connect to any repository to bootstrap your project. You can find it here.",
                                "spans": [
                                    {
                                        "start": 39,
                                        "end": 45,
                                        "type": "hyperlink",
                                        "data": {
                                            "type": "Link.web",
                                            "value": {
                                                "url": "https://www.djangoproject.com/"
                                            }
                                        }
                                    },
                                    {
                                        "start": 179,
                                        "end": 199,
                                        "type": "hyperlink",
                                        "data": {
                                            "type": "Link.web",
                                            "value": {
                                                "url": "https://github.com/prismicio/python-django-starter"
                                            }
                                        }
                                    }
                                ]
                            },
                            {
                                "type": "paragraph",
                                "text": "We also started a Django version of our « Les Bonnes Choses » example you can look at.",
                                "spans": [
                                    {
                                        "start": 18,
                                        "end": 69,
                                        "type": "hyperlink",
                                        "data": {
                                            "type": "Link.web",
                                            "value": {
                                                "url": "https://github.com/prismicio/python-django-lesbonneschoses"
                                            }
                                        }
                                    }
                                ]
                            }
                        ]
                    }
                }
            }
        },
        {
            "id": "VWbQHSsAACoA0aoy",
            "uid": "disclosure-of-issues-and-vulnerabilities",
            "type": "documentation-categoy",
            "href": "http://localhost:3000/api/v2/documents/search?ref=WYx9HB8AAB8AmX7z&q=%5B%5B%3Ad+%3D+at%28document.id%2C+%22VWbQHSsAACoA0aoy%22%29+%5D%5D",
            "tags": [],
            "first_publication_date": null,
            "last_publication_date": null,
            "slugs": [
                "disclosure-of-issues-and-vulnerabilities",
                "disclosure-of-security-vulnerabilities"
            ],
            "linked_documents": [
                {
                    "id": "VWbQHSsAACoA0aoy",
                    "tags": [],
                    "type": "documentation-categoy",
                    "slug": "disclosure-of-issues-and-vulnerabilities",
                    "lang": "en-us"
                }
            ],
            "lang": "en-us",
            "alternate_languages": [],
            "data": {
                "documentation-categoy": {
                    "headline": {
                        "type": "StructuredText",
                        "value": [
                            {
                                "type": "heading1",
                                "text": "Disclosure of Issues and Vulnerabilities",
                                "spans": []
                            }
                        ]
                    },
                    "priority": {
                        "type": "Number",
                        "value": 50.0
                    },
                    "pages": {
                        "type": "Group",
                        "value": [
                            {
                                "page": {
                                    "type": "Link.document",
                                    "value": {
                                        "document": {
                                            "id": "VWbWbisAACkA0cmX",
                                            "type": "doc",
                                            "tags": [],
                                            "lang": "en-us",
                                            "slug": "disclosure-of-issues-and-vulnerabilities"
                                        },
                                        "isBroken": false
                                    }
                                }
                            }
                        ]
                    }
                }
            }
        },
        {
            "id": "VBAPijEAAGoJ_-35",
            "uid": null,
            "type": "doc",
            "href": "http://localhost:3000/api/v2/documents/search?ref=WYx9HB8AAB8AmX7z&q=%5B%5B%3Ad+%3D+at%28document.id%2C+%22VBAPijEAAGoJ_-35%22%29+%5D%5D",
            "tags": [
                "doc-developers"
            ],
            "first_publication_date": null,
            "last_publication_date": null,
            "slugs": [
                "the-api-object",
                "developing-a-front-end-for-prismicio",
                "getting-started-with-a-kit"
            ],
            "linked_documents": [
                {
                    "id": "VBAPijEAAGoJ_-35",
                    "tags": [
                        "doc-developers"
                    ],
                    "type": "doc",
                    "slug": "the-api-object",
                    "lang": "en-us"
                }
            ],
            "lang": "en-us",
            "alternate_languages": [],
            "data": {
                "doc": {
                    "title": {
                        "type": "StructuredText",
                        "value": [
                            {
                                "type": "heading1",
                                "text": "The API object",
                                "spans": []
                            }
                        ]
                    },
                    "content": {
                        "type": "StructuredText",
                        "value": [
                            {
                                "type": "heading1",
                                "text": "The API object",
                                "spans": []
                            },
                            {
                                "type": "paragraph",
                                "text": "To access your content, you will need to fetch the API information. Information about your repository will be retrieved, such as references and bookmarks. Depending on the language it can be asynchronous or synchronous.",
                                "spans": []
                            },
                            {
                                "type": "embed",
                                "oembed": {
                                    "version": "1.0",
                                    "type": "rich",
                                    "provider_name": "GitHub",
                                    "provider_url": "https://gist.github.com",
                                    "html": "<script src=\"https://gist.github.com/erwan/b253d8fddfdd4cceef7a.js\"></script>",
                                    "gist": "erwan/b253d8fddfdd4cceef7a",
                                    "embed_url": "https://gist.github.com/erwan/b253d8fddfdd4cceef7a",
                                    "title": "erwan/prismic-api-js"
                                },
                                "label": "javascript"
                            },
                            {
                                "type": "embed",
                                "oembed": {
                                    "version": "1.0",
                                    "type": "rich",
                                    "provider_name": "GitHub",
                                    "provider_url": "https://gist.github.com",
                                    "html": "<script src=\"https://gist.github.com/erwan/f5c7c0a59790bed0b3b7.js\"></script>",
                                    "gist": "erwan/f5c7c0a59790bed0b3b7",
                                    "embed_url": "https://gist.github.com/erwan/f5c7c0a59790bed0b3b7",
                                    "title": "erwan/prismic-api.scala"
                                },
                                "label": "scala"
                            },
                            {
                                "type": "embed",
                                "oembed": {
                                    "version": "1.0",
                                    "type": "rich",
                                    "provider_name": "GitHub",
                                    "provider_url": "https://gist.github.com",
                                    "html": "<script src=\"https://gist.github.com/erwan/9b08c18ad53ba62736b7.js\"></script>",
                                    "gist": "erwan/9b08c18ad53ba62736b7",
                                    "embed_url": "https://gist.github.com/erwan/9b08c18ad53ba62736b7",
                                    "title": "erwan/prismic-api.java"
                                },
                                "label": "java"
                            },
                            {
                                "type": "embed",
                                "oembed": {
                                    "version": "1.0",
                                    "type": "rich",
                                    "provider_name": "GitHub",
                                    "provider_url": "https://gist.github.com",
                                    "html": "<script src=\"https://gist.github.com/erwan/d496c58cd598372c4dca.js\"></script>",
                                    "gist": "erwan/d496c58cd598372c4dca",
                                    "embed_url": "https://gist.github.com/erwan/d496c58cd598372c4dca",
                                    "title": "erwan/prismic-api.php"
                                },
                                "label": "php"
                            },
                            {
                                "type": "embed",
                                "oembed": {
                                    "version": "1.0",
                                    "type": "rich",
                                    "provider_name": "GitHub",
                                    "provider_url": "https://gist.github.com",
                                    "html": "<script src=\"https://gist.github.com/erwan/31cf4b514778d5d9d9cc.js\"></script>",
                                    "gist": "erwan/31cf4b514778d5d9d9cc",
                                    "embed_url": "https://gist.github.com/erwan/31cf4b514778d5d9d9cc",
                                    "title": "erwan/prismic-api.rb"
                                },
                                "label": "ruby"
                            },
                            {
                                "type": "embed",
                                "oembed": {
                                    "version": "1.0",
                                    "type": "rich",
                                    "provider_name": "GitHub",
                                    "provider_url": "https://gist.github.com",
                                    "html": "<script src=\"https://gist.github.com/erwan/13972e11d41ca29c0171.js\"></script>",
                                    "gist": "erwan/13972e11d41ca29c0171",
                                    "embed_url": "https://gist.github.com/erwan/13972e11d41ca29c0171",
                                    "title": "erwan/prismic-api.py"
                                },
                                "label": "python"
                            },
                            {
                                "type": "embed",
                                "oembed": {
                                    "version": "1.0",
                                    "type": "rich",
                                    "provider_name": "GitHub",
                                    "provider_url": "https://gist.github.com",
                                    "html": "<script src=\"https://gist.github.com/erwan/c023234afbc20303f792.js\"></script>",
                                    "gist": "erwan/c023234afbc20303f792",
                                    "embed_url": "https://gist.github.com/erwan/c023234afbc20303f792",
                                    "title": "erwan/prismic-api.cs"
                                },
                                "label": "c#"
                            }
                        ]
                    },
                    "category": {
                        "type": "Link.document",
                        "value": {
                            "document": {
                                "id": "VBgeDDYAADMAz2Rw",
                                "type": "documentation-categoy",
                                "tags": [
                                    "doc-developers"
                                ],
                                "lang": "en-us",
                                "slug": "developers-manual",
                                "uid": "developers-manual"
                            },
                            "isBroken": false
                        }
                    }
                }
            }
        },
        {
            "id": "UfkX5t_mqWEA3EG2",
            "uid": null,
            "type": "faq",
            "href": "http://localhost:3000/api/v2/documents/search?ref=WYx9HB8AAB8AmX7z&q=%5B%5B%3Ad+%3D+at%28document.id%2C+%22UfkX5t_mqWEA3EG2%22%29+%5D%5D",
            "tags": [
                "main_faq",
                "featured"
            ],
            "first_publication_date": "2016-08-04T14:21:20+0000",
            "last_publication_date": "2016-08-04T14:21:20+0000",
            "slugs": [
                "how-is-it-faster-and-easier-to-use"
            ],
            "linked_documents": [],
            "lang": "en-us",
            "alternate_languages": [],
            "data": {
                "faq": {
                    "question": {
                        "type": "StructuredText",
                        "value": [
                            {
                                "type": "heading1",
                                "text": "How is it faster and easier to use?",
                                "spans": []
                            }
                        ]
                    },
                    "answer": {
                        "type": "StructuredText",
                        "value": [
                            {
                                "type": "paragraph",
                                "text": "Getting started with prismic.io takes no more than 2 minutes, and you're all set up. Really.",
                                "spans": [
                                    {
                                        "start": 32,
                                        "end": 60,
                                        "type": "strong"
                                    }
                                ]
                            },
                            {
                                "type": "paragraph",
                                "text": "Choose your favorite technology, create your prismic.io repository, create a blank app, and you're ready to start!",
                                "spans": []
                            },
                            {
                                "type": "paragraph",
                                "text": "We take all of the content's technical complexity off your plate. Therefore you don't have to install anything new, or worry about it at all.",
                                "spans": [
                                    {
                                        "start": 0,
                                        "end": 65,
                                        "type": "strong"
                                    }
                                ]
                            },
                            {
                                "type": "paragraph",
                                "text": "And then what is left to do? Developing / modifying what you want, with the technology you're the most comfortable with. We told you it would be faster first, and then easier!",
                                "spans": []
                            },
                            {
                                "type": "paragraph",
                                "text": "With the technology and design constraints gone, and no technical strings attached, you will never again have to choose between either a CMS that takes you ages and constricts what you can do, or non-manageable content (and therefore a lot of lost time and energy) in order to work with the technology you want.",
                                "spans": [
                                    {
                                        "start": 84,
                                        "end": 310,
                                        "type": "strong"
                                    }
                                ]
                            }
                        ]
                    },
                    "priority": {
                        "type": "Number",
                        "value": 1600.0
                    },
                    "short_answer": {
                        "type": "StructuredText",
                        "value": [
                            {
                                "type": "paragraph",
                                "text": "You had two limited options so far, with many downsides. prismic.io takes the best of both worlds.",
                                "spans": []
                            }
                        ]
                    },
                    "link_label": {
                        "type": "Text",
                        "value": "How does it do that?"
                    }
                }
            }
        },
        {
            "id": "VDuknDIAAC8AMsPH",
            "uid": null,
            "type": "doc",
            "href": "http://localhost:3000/api/v2/documents/search?ref=WYx9HB8AAB8AmX7z&q=%5B%5B%3Ad+%3D+at%28document.id%2C+%22VDuknDIAAC8AMsPH%22%29+%5D%5D",
            "tags": [
                "doc-developers"
            ],
            "first_publication_date": null,
            "last_publication_date": null,
            "slugs": [
                "text-fragments"
            ],
            "linked_documents": [],
            "lang": "en-us",
            "alternate_languages": [],
            "data": {
                "doc": {
                    "title": {
                        "type": "StructuredText",
                        "value": [
                            {
                                "type": "heading1",
                                "text": "Text fragments",
                                "spans": []
                            }
                        ]
                    },
                    "content": {
                        "type": "StructuredText",
                        "value": [
                            {
                                "type": "heading2",
                                "text": "Text fragments",
                                "spans": []
                            },
                            {
                                "type": "paragraph",
                                "text": "This is a simple String field, usually short, without any formatting.",
                                "spans": [
                                    {
                                        "start": 17,
                                        "end": 23,
                                        "type": "label",
                                        "data": {
                                            "label": "codespan"
                                        }
                                    }
                                ]
                            },
                            {
                                "type": "embed",
                                "oembed": {
                                    "version": "1.0",
                                    "type": "rich",
                                    "provider_name": "GitHub",
                                    "provider_url": "https://gist.github.com",
                                    "html": "<script src=\"https://gist.github.com/erwan/897048416603f89272bf.js\"></script>",
                                    "gist": "erwan/897048416603f89272bf",
                                    "embed_url": "https://gist.github.com/erwan/897048416603f89272bf",
                                    "title": "erwan/prismic-getText.js"
                                },
                                "label": "javascript"
                            },
                            {
                                "type": "embed",
                                "oembed": {
                                    "version": "1.0",
                                    "type": "rich",
                                    "provider_name": "GitHub",
                                    "provider_url": "https://gist.github.com",
                                    "html": "<script src=\"https://gist.github.com/erwan/eebd75b2cee2bd8a73fa.js\"></script>",
                                    "gist": "erwan/eebd75b2cee2bd8a73fa",
                                    "embed_url": "https://gist.github.com/erwan/eebd75b2cee2bd8a73fa",
                                    "title": "erwan/prismic-getText.scala"
                                },
                                "label": "scala"
                            },
                            {
                                "type": "embed",
                                "oembed": {
                                    "version": "1.0",
                                    "type": "rich",
                                    "provider_name": "GitHub",
                                    "provider_url": "https://gist.github.com",
                                    "html": "<script src=\"https://gist.github.com/erwan/a16e6a29ad84110a46b8.js\"></script>",
                                    "gist": "erwan/a16e6a29ad84110a46b8",
                                    "embed_url": "https://gist.github.com/erwan/a16e6a29ad84110a46b8",
                                    "title": "erwan/prismic-getText.java"
                                },
                                "label": "java"
                            },
                            {
                                "type": "embed",
                                "oembed": {
                                    "version": "1.0",
                                    "type": "rich",
                                    "provider_name": "GitHub",
                                    "provider_url": "https://gist.github.com",
                                    "html": "<script src=\"https://gist.github.com/erwan/3c0a7a0781c8f8e0df77.js\"></script>",
                                    "gist": "erwan/3c0a7a0781c8f8e0df77",
                                    "embed_url": "https://gist.github.com/erwan/3c0a7a0781c8f8e0df77",
                                    "title": "erwan/prismic-getText.php"
                                },
                                "label": "php"
                            },
                            {
                                "type": "embed",
                                "oembed": {
                                    "version": "1.0",
                                    "type": "rich",
                                    "provider_name": "GitHub",
                                    "provider_url": "https://gist.github.com",
                                    "html": "<script src=\"https://gist.github.com/erwan/cd0d4559870f5f88b90f.js\"></script>",
                                    "gist": "erwan/cd0d4559870f5f88b90f",
                                    "embed_url": "https://gist.github.com/erwan/cd0d4559870f5f88b90f",
                                    "title": "erwan/prismic-getText.rb"
                                },
                                "label": "ruby"
                            },
                            {
                                "type": "embed",
                                "oembed": {
                                    "version": "1.0",
                                    "type": "rich",
                                    "provider_name": "GitHub",
                                    "provider_url": "https://gist.github.com",
                                    "html": "<script src=\"https://gist.github.com/erwan/d06042ce84f6002c055d.js\"></script>",
                                    "gist": "erwan/d06042ce84f6002c055d",
                                    "embed_url": "https://gist.github.com/erwan/d06042ce84f6002c055d",
                                    "title": "erwan/prismic-getText.py"
                                },
                                "label": "python"
                            },
                            {
                                "type": "embed",
                                "oembed": {
                                    "version": "1.0",
                                    "type": "rich",
                                    "provider_name": "GitHub",
                                    "provider_url": "https://gist.github.com",
                                    "html": "<script src=\"https://gist.github.com/erwan/7869828eaa8c1b8555d3.js\"></script>",
                                    "gist": "erwan/7869828eaa8c1b8555d3",
                                    "embed_url": "https://gist.github.com/erwan/7869828eaa8c1b8555d3",
                                    "title": "erwan/prismic-getText.cs"
                                },
                                "label": "c#"
                            }
                        ]
                    }
                }
            }
        },
        {
            "id": "VGS_QCQAAHEDqxnn",
            "uid": null,
            "type": "doc",
            "href": "http://localhost:3000/api/v2/documents/search?ref=WYx9HB8AAB8AmX7z&q=%5B%5B%3Ad+%3D+at%28document.id%2C+%22VGS_QCQAAHEDqxnn%22%29+%5D%5D",
            "tags": [],
            "first_publication_date": null,
            "last_publication_date": null,
            "slugs": [
                "prismic-toolbar",
                "preview-bar",
                "integrating-preview-bar",
                "integrating-in-site-preview"
            ],
            "linked_documents": [
                {
                    "id": "VGS_QCQAAHEDqxnn",
                    "tags": [],
                    "type": "doc",
                    "slug": "prismic-toolbar",
                    "lang": "en-us"
                }
            ],
            "lang": "en-us",
            "alternate_languages": [],
            "data": {
                "doc": {
                    "title": {
                        "type": "StructuredText",
                        "value": [
                            {
                                "type": "heading1",
                                "text": "Prismic toolbar",
                                "spans": []
                            }
                        ]
                    },
                    "content": {
                        "type": "StructuredText",
                        "value": [
                            {
                                "type": "heading1",
                                "text": "Integrating the prismic toolbar into your website",
                                "spans": []
                            },
                            {
                                "type": "paragraph",
                                "text": "The prismic toolbar allows content writers to easily locate published documents, navigate planned releases or experiment variations, and to preview draft documents even when they are not saved yet. It can also expose an \"edit\" button to logged in users on any document on your public website.",
                                "spans": []
                            },
                            {
                                "type": "paragraph",
                                "text": "It works by using a preview token: when a user requests a preview from the Writing Room, a temporary and secure ref is generated for the preview session. Your website can then use this temporary ref to query the prismic.io API. It will allow your website to display pending changes to preview, typically a single change for a draft, and several related changes for a release.",
                                "spans": [
                                    {
                                        "start": 112,
                                        "end": 115,
                                        "type": "label",
                                        "data": {
                                            "label": "codespan"
                                        }
                                    },
                                    {
                                        "start": 195,
                                        "end": 198,
                                        "type": "label",
                                        "data": {
                                            "label": "codespan"
                                        }
                                    }
                                ]
                            },
                            {
                                "type": "paragraph",
                                "text": "Additionnally the prismic.js script automatically detects when a user is browsing the website in a preview session, and displays the preview bar.",
                                "spans": [
                                    {
                                        "start": 18,
                                        "end": 28,
                                        "type": "label",
                                        "data": {
                                            "label": "codespan"
                                        }
                                    },
                                    {
                                        "start": 133,
                                        "end": 144,
                                        "type": "em"
                                    }
                                ]
                            },
                            {
                                "type": "paragraph",
                                "text": "All the required code is already available out-of-the-box in our starter projects, but if you want to include it into a custom developpement, here are the 3 simple steps to integrate it into your website:",
                                "spans": []
                            },
                            {
                                "type": "heading3",
                                "text": "1)  Include prismic.js in your pages",
                                "spans": []
                            },
                            {
                                "type": "paragraph",
                                "text": "You must include this script in every pages of your website. If you are using a web framework with a templating system, you will typically include it once in your master layout:",
                                "spans": []
                            },
                            {
                                "type": "embed",
                                "oembed": {
                                    "version": "1.0",
                                    "type": "rich",
                                    "provider_name": "GitHub",
                                    "provider_url": "https://gist.github.com",
                                    "html": "<script src=\"https://gist.github.com/erwan/a02e3e62aa4ee71a7c16.js\"></script>",
                                    "gist": "erwan/a02e3e62aa4ee71a7c16",
                                    "embed_url": "https://gist.github.com/erwan/a02e3e62aa4ee71a7c16",
                                    "title": "erwan/preview-js.html"
                                },
                                "label": "javascript"
                            },
                            {
                                "type": "heading3",
                                "text": "2) Create a preview endpoint",
                                "spans": []
                            },
                            {
                                "type": "paragraph",
                                "text": "This is a special URL of your website that prismic will call to request a preview, passing the preview token in the query string.  You will configure this URL in the settings of your repository. ",
                                "spans": []
                            },
                            {
                                "type": "paragraph",
                                "text": "When requested this endpoint must:",
                                "spans": []
                            },
                            {
                                "type": "list-item",
                                "text": "Retrieve the preview token looking at the token parameter in the query string.",
                                "spans": [
                                    {
                                        "start": 42,
                                        "end": 47,
                                        "type": "label",
                                        "data": {
                                            "label": "codespan"
                                        }
                                    }
                                ]
                            },
                            {
                                "type": "list-item",
                                "text": "Call the prismic.io development kit with this token and the linkResolver to retrieve the best URL for this preview.",
                                "spans": [
                                    {
                                        "start": 46,
                                        "end": 51,
                                        "type": "label",
                                        "data": {
                                            "label": "codespan"
                                        }
                                    },
                                    {
                                        "start": 60,
                                        "end": 72,
                                        "type": "label",
                                        "data": {
                                            "label": "codespan"
                                        }
                                    }
                                ]
                            },
                            {
                                "type": "list-item",
                                "text": "Store the preview token in the io.prismic.preview cookie (typically for 30 minutes max, since the token will expire after that), and redirect to the given URL.",
                                "spans": [
                                    {
                                        "start": 31,
                                        "end": 49,
                                        "type": "label",
                                        "data": {
                                            "label": "codespan"
                                        }
                                    }
                                ]
                            },
                            {
                                "type": "embed",
                                "oembed": {
                                    "version": "1.0",
                                    "type": "rich",
                                    "provider_name": "GitHub",
                                    "provider_url": "https://gist.github.com",
                                    "html": "<script src=\"https://gist.github.com/erwan/ee4c46bcc635829e286f.js\"></script>",
                                    "gist": "erwan/ee4c46bcc635829e286f",
                                    "embed_url": "https://gist.github.com/erwan/ee4c46bcc635829e286f",
                                    "title": "erwan/endpoint-js.js"
                                },
                                "label": "javascript"
                            },
                            {
                                "type": "heading3",
                                "text": "3) Use the preview token as ref when available to make your queries",
                                "spans": [
                                    {
                                        "start": 28,
                                        "end": 31,
                                        "type": "label",
                                        "data": {
                                            "label": "codespan"
                                        }
                                    }
                                ]
                            },
                            {
                                "type": "paragraph",
                                "text": "The preview token you just saved into the io.prismic.preview cookie can be used as a valid ref to make prismic API queries. So when you select the proper ref to use to make the queries you must use this one if the cookie exists.",
                                "spans": [
                                    {
                                        "start": 42,
                                        "end": 60,
                                        "type": "label",
                                        "data": {
                                            "label": "codespan"
                                        }
                                    },
                                    {
                                        "start": 91,
                                        "end": 94,
                                        "type": "label",
                                        "data": {
                                            "label": "codespan"
                                        }
                                    },
                                    {
                                        "start": 154,
                                        "end": 157,
                                        "type": "label",
                                        "data": {
                                            "label": "codespan"
                                        }
                                    }
                                ]
                            },
                            {
                                "type": "embed",
                                "oembed": {
                                    "version": "1.0",
                                    "type": "rich",
                                    "provider_name": "GitHub",
                                    "provider_url": "https://gist.github.com",
                                    "html": "<script src=\"https://gist.github.com/erwan/6ad513d7d0f784de36d9.js\"></script>",
                                    "gist": "erwan/6ad513d7d0f784de36d9",
                                    "embed_url": "https://gist.github.com/erwan/6ad513d7d0f784de36d9",
                                    "title": "erwan/preview-ref.js"
                                },
                                "label": "javascript"
                            },
                            {
                                "type": "heading3",
                                "text": "4) Provide document ids in your markup for the edit button",
                                "spans": []
                            },
                            {
                                "type": "paragraph",
                                "text": "Everywhere you want an \"edit\" button, just add a data-wio-id attribute to the corresponding tag:",
                                "spans": []
                            },
                            {
                                "type": "preformatted",
                                "text": "<article data-wio-id=\"{insert document id}\">\n(...)\n</article>",
                                "spans": []
                            },
                            {
                                "type": "paragraph",
                                "text": "The prismic toolbar will add a link inside the tag, you're free to style it as you want to integrate it in your design.",
                                "spans": []
                            },
                            {
                                "type": "paragraph",
                                "text": "",
                                "spans": []
                            }
                        ]
                    },
                    "category": {
                        "type": "Link.document",
                        "value": {
                            "document": {
                                "id": "VBgeDDYAADMAz2Rw",
                                "type": "documentation-categoy",
                                "tags": [
                                    "doc-developers"
                                ],
                                "lang": "en-us",
                                "slug": "developers-manual",
                                "uid": "developers-manual"
                            },
                            "isBroken": false
                        }
                    }
                }
            }
        },
        {
            "id": "WW9yICcAAKeVoEUx",
            "uid": "rudy-rigot",
            "type": "author",
            "href": "http://localhost:3000/api/v2/documents/search?ref=WYx9HB8AAB8AmX7z&q=%5B%5B%3Ad+%3D+at%28document.id%2C+%22WW9yICcAAKeVoEUx%22%29+%5D%5D",
            "tags": [],
            "first_publication_date": "2017-07-19T14:52:19+0000",
            "last_publication_date": "2017-07-28T10:08:46+0000",
            "slugs": [
                "rudy-rigot"
            ],
            "linked_documents": [],
            "lang": "en-us",
            "alternate_languages": [],
            "data": {
                "author": {
                    "name": {
                        "type": "Text",
                        "value": "Rudy Rigot"
                    },
                    "description": {
                        "type": "Text",
                        "value": "Rudy is developer evangelist, and promote prismic.io to our developer community."
                    },
                    "picture-profile": {
                        "type": "Image",
                        "value": {
                            "main": {
                                "dimensions": {
                                    "width": 180,
                                    "height": 180
                                },
                                "alt": null,
                                "copyright": null,
                                "url": "https://prismic-io.s3.amazonaws.com/wroom/d0c4d49817873a60992e87e0e3e2cd6317d1de6a_rudy-rigot.jpg"
                            },
                            "views": {
                            }
                        }
                    }
                }
            }
        },
        {
            "id": "UhYRRd_mqU0JvVg2",
            "uid": null,
            "type": "doc",
            "href": "http://localhost:3000/api/v2/documents/search?ref=WYx9HB8AAB8AmX7z&q=%5B%5B%3Ad+%3D+at%28document.id%2C+%22UhYRRd_mqU0JvVg2%22%29+%5D%5D",
            "tags": [
                "contentwriter"
            ],
            "first_publication_date": null,
            "last_publication_date": null,
            "slugs": [
                "document-tools",
                "document-tools-diff-collaboration"
            ],
            "linked_documents": [
                {
                    "id": "UhYRRd_mqU0JvVg2",
                    "tags": [
                        "contentwriter"
                    ],
                    "type": "doc",
                    "slug": "document-tools",
                    "lang": "en-us"
                }
            ],
            "lang": "en-us",
            "alternate_languages": [],
            "data": {
                "doc": {
                    "title": {
                        "type": "StructuredText",
                        "value": [
                            {
                                "type": "heading1",
                                "text": "Document tools",
                                "spans": []
                            }
                        ]
                    },
                    "content": {
                        "type": "StructuredText",
                        "value": [
                            {
                                "type": "heading2",
                                "text": "Document tools (diff, collaboration, ...)",
                                "spans": []
                            },
                            {
                                "type": "image",
                                "url": "https://prismic-io.s3.amazonaws.com/wroom/bf88678695db236781f08438b0cf5ee329d459dd.png",
                                "alt": null,
                                "copyright": null,
                                "dimensions": {
                                    "width": 800,
                                    "height": 576
                                }
                            },
                            {
                                "type": "paragraph",
                                "text": "The document tools are meant to allow you to perform other operations on a document than editing the fields and the tags.",
                                "spans": []
                            },
                            {
                                "type": "paragraph",
                                "text": "The document tools are presented here in the order of the buttons.",
                                "spans": []
                            },
                            {
                                "type": "heading3",
                                "text": "Compare",
                                "spans": []
                            },
                            {
                                "type": "paragraph",
                                "text": "This document tool allows you to answer the question \"What changed since last time?\" visually. By clicking on this document tool, you'll get a visually understandable difference between the current version and the previous one.",
                                "spans": []
                            },
                            {
                                "type": "paragraph",
                                "text": "Note: there are other ways to end up on a visual diff. For instance, in the \"Activity\", if you click on a recent change, you'll see the change visually too; also, in \"Planned releases\", you can see the changes to come.",
                                "spans": []
                            },
                            {
                                "type": "paragraph",
                                "text": "To exit the compare tool, and get back to the latest version of the document, you can click the cross at the top right.",
                                "spans": []
                            },
                            {
                                "type": "image",
                                "url": "https://prismic-io.s3.amazonaws.com/wroom/7abb6add9c279ad69d187b7d4cbbc25c8d6a3ed3.png",
                                "alt": null,
                                "copyright": null,
                                "dimensions": {
                                    "width": 800,
                                    "height": 535
                                }
                            },
                            {
                                "type": "heading3",
                                "text": "Activity",
                                "spans": []
                            },
                            {
                                "type": "paragraph",
                                "text": "The same way the \"Activity\" menu item (in the left navigation) gives you a strong glimpse at what's been going on lately in your whole repository, this document tool addresses the same question, but limited to the current document.",
                                "spans": []
                            },
                            {
                                "type": "paragraph",
                                "text": "It displays everything, from the changes people have made, the moments the document was published, or the comments people have made. The idea is for you to keep track in a social kind of way.",
                                "spans": []
                            },
                            {
                                "type": "image",
                                "url": "https://prismic-io.s3.amazonaws.com/wroom/6cc9b855ed266fe7a6f8fe4e4a6ce1d684a4a202.png",
                                "alt": null,
                                "copyright": null,
                                "dimensions": {
                                    "width": 800,
                                    "height": 530
                                }
                            },
                            {
                                "type": "paragraph",
                                "text": "Note: comments on activity items are only available if you have the \"Collaboration\" feature (starting from the \"Team\" plan).",
                                "spans": []
                            },
                            {
                                "type": "heading3",
                                "text": "History",
                                "spans": []
                            },
                            {
                                "type": "paragraph",
                                "text": "This document tool gives you access to all the previous versions of the document that have existed. The idea is for you to never lose anything that was done.",
                                "spans": []
                            },
                            {
                                "type": "paragraph",
                                "text": "At first, prismic.io displays only the most relevant past versions, and hides the least relevant; but it always tells you when it hides anything, with a \"~\" clickable line to reveal everything back (see red arrow below).",
                                "spans": []
                            },
                            {
                                "type": "image",
                                "url": "https://prismic-io.s3.amazonaws.com/wroom/1eaf8f5c0084ebeadc4f1a56df7fb7ec3c79bb27.png",
                                "alt": null,
                                "copyright": null,
                                "dimensions": {
                                    "width": 800,
                                    "height": 455
                                }
                            },
                            {
                                "type": "heading3",
                                "text": "Media library",
                                "spans": []
                            },
                            {
                                "type": "paragraph",
                                "text": "This document tool displays the media files (images, PDFs, ...) that are attached to the current document. It opens up the same media library interface than when you wish to select or upload an image (whether in a structured text, or in a separate image field), so you'll also get to see the media files attached to documents in the same collections, or all simply all media files in the repository.",
                                "spans": []
                            },
                            {
                                "type": "image",
                                "url": "https://prismic-io.s3.amazonaws.com/wroom/967619e566aa958477f18272216757f12c17be28.png",
                                "alt": null,
                                "copyright": null,
                                "dimensions": {
                                    "width": 800,
                                    "height": 455
                                }
                            }
                        ]
                    },
                    "category": {
                        "type": "Link.document",
                        "value": {
                            "document": {
                                "id": "UjBdfsuvzdIHvE4K",
                                "type": "documentation-categoy",
                                "tags": [
                                    "contentwriter"
                                ],
                                "lang": "en-us",
                                "slug": "content-writers-manual",
                                "uid": "content-writers-manual"
                            },
                            "isBroken": false
                        }
                    },
                    "priority": {
                        "type": "Number",
                        "value": 600.0
                    },
                    "section": {
                        "type": "Select",
                        "value": "Content writer's manual"
                    }
                }
            }
        },
        {
            "id": "Uo1P5AEAAP9P2eQO",
            "uid": null,
            "type": "doc",
            "href": "http://localhost:3000/api/v2/documents/search?ref=WYx9HB8AAB8AmX7z&q=%5B%5B%3Ad+%3D+at%28document.id%2C+%22Uo1P5AEAAP9P2eQO%22%29+%5D%5D",
            "tags": [
                "publisher"
            ],
            "first_publication_date": null,
            "last_publication_date": null,
            "slugs": [
                "managing-releases",
                "reviewing-releases"
            ],
            "linked_documents": [
                {
                    "id": "Uo1P5AEAAP9P2eQO",
                    "tags": [
                        "publisher"
                    ],
                    "type": "doc",
                    "slug": "managing-releases",
                    "lang": "en-us"
                },
                {
                    "id": "Uo1P5AEAAP9P2eQO",
                    "tags": [
                        "publisher"
                    ],
                    "type": "doc",
                    "slug": "managing-releases",
                    "lang": "en-us"
                }
            ],
            "lang": "en-us",
            "alternate_languages": [],
            "data": {
                "doc": {
                    "title": {
                        "type": "StructuredText",
                        "value": [
                            {
                                "type": "heading1",
                                "text": "Managing releases",
                                "spans": []
                            }
                        ]
                    },
                    "content": {
                        "type": "StructuredText",
                        "value": [
                            {
                                "type": "heading2",
                                "text": "Managing releases",
                                "spans": []
                            },
                            {
                                "type": "paragraph",
                                "text": "Content releases are a great way for you to plan on your content, and they are really easy to use: just create a release and push documents' draft versions onto it. For instance, we advise that you create a content release for every upcoming event you might have that will affect your content (\"Announcement of new shop\", \"release of the iPhone 7\", ...)",
                                "spans": []
                            },
                            {
                                "type": "paragraph",
                                "text": "Once you created a release, there are a few cool things you can do to manage it effectively.",
                                "spans": []
                            },
                            {
                                "type": "heading3",
                                "text": "Review requested changes",
                                "spans": []
                            },
                            {
                                "type": "paragraph",
                                "text": "Content writers don't have the right to push changes onto a release, but they can request this push, and you're the one who can accept it. When you go to the \"Releases\" panel, you can immediately see the releases that have pending requested changes, as they display a red dot with the number of requests.",
                                "spans": []
                            },
                            {
                                "type": "image",
                                "url": "https://prismic-io.s3.amazonaws.com/wroom/289b4ee8400ac517f85e17deaef57a1a4e1da23d_changerequest.png",
                                "alt": null,
                                "copyright": null,
                                "dimensions": {
                                    "width": 800,
                                    "height": 478
                                }
                            },
                            {
                                "type": "paragraph",
                                "text": "Looking at the release itself, you can review each change thanks to our powerful diff viewer, and decide whether you wish to include it or not. one by one.",
                                "spans": []
                            },
                            {
                                "type": "heading3",
                                "text": "Publish or plan the content release",
                                "spans": []
                            },
                            {
                                "type": "paragraph",
                                "text": "Click on the \"Manage\" selectbox under the release's title, and you'll be able to apply the content release now (publishing it live instantly, with no cache delay), to apply it at a later given date and time, or potentially to delete the content release (all the scheduled document versions will go back to draft).",
                                "spans": []
                            },
                            {
                                "type": "heading3",
                                "text": "Preview the content release in your project",
                                "spans": []
                            },
                            {
                                "type": "paragraph",
                                "text": "If you started your project from one of our official starter kits you got from our developers' portal, then this feature is natively available in your project. All you have to do to activate it is configure the preview URL in Settings -> Previews. The preview URL depends on the language, but it is usually the absolute URL to /preview on your site.",
                                "spans": [
                                    {
                                        "start": 79,
                                        "end": 101,
                                        "type": "hyperlink",
                                        "data": {
                                            "type": "Link.document",
                                            "value": {
                                                "document": {
                                                    "id": "UjBJcsuvzdIHvE3_",
                                                    "type": "developers-home",
                                                    "tags": [],
                                                    "lang": "en-us",
                                                    "slug": "working-with-prismic.io"
                                                },
                                                "isBroken": false
                                            }
                                        }
                                    },
                                    {
                                        "start": 327,
                                        "end": 335,
                                        "type": "label",
                                        "data": {
                                            "label": "codespan"
                                        }
                                    }
                                ]
                            },
                            {
                                "type": "paragraph",
                                "text": "Once configured, a preview button (with an eye icon) will appear in the writing room editor toolbar. You can then preview any page, published or not, in your front-end.",
                                "spans": []
                            },
                            {
                                "type": "paragraph",
                                "text": "Note that you can configure several sites in the \"Previews\" settings. This is useful if you have several installations of your site (e.g. dev, stage and production) or if you use the same Prismic content on different sites.",
                                "spans": []
                            },
                            {
                                "type": "paragraph",
                                "text": "",
                                "spans": []
                            }
                        ]
                    },
                    "category": {
                        "type": "Link.document",
                        "value": {
                            "document": {
                                "id": "Uo0-2wEAAApN2eP6",
                                "type": "documentation-categoy",
                                "tags": [
                                    "publisher"
                                ],
                                "lang": "en-us",
                                "slug": "content-publishers-manual",
                                "uid": "content-publishers-manual"
                            },
                            "isBroken": false
                        }
                    }
                }
            }
        },
        {
            "id": "UknpcrO53y0BSOL3",
            "uid": null,
            "type": "faq",
            "href": "http://localhost:3000/api/v2/documents/search?ref=WYx9HB8AAB8AmX7z&q=%5B%5B%3Ad+%3D+at%28document.id%2C+%22UknpcrO53y0BSOL3%22%29+%5D%5D",
            "tags": [],
            "first_publication_date": "2016-08-04T14:21:20+0000",
            "last_publication_date": "2016-08-04T14:21:20+0000",
            "slugs": [
                "is-your-website-itself-built-using-prismic.io",
                "is-your-website-itself-built-using-prismicio"
            ],
            "linked_documents": [],
            "lang": "en-us",
            "alternate_languages": [],
            "data": {
                "faq": {
                    "question": {
                        "type": "StructuredText",
                        "value": [
                            {
                                "type": "heading1",
                                "text": "Is your website itself built using prismic.io?",
                                "spans": []
                            }
                        ]
                    },
                    "answer": {
                        "type": "StructuredText",
                        "value": [
                            {
                                "type": "paragraph",
                                "text": "Of course! It's the best tool out there to do content, so why would we use anything else?",
                                "spans": [
                                    {
                                        "start": 0,
                                        "end": 10,
                                        "type": "strong"
                                    }
                                ]
                            }
                        ]
                    }
                }
            }
        },
        {
            "id": "UjBh0MuvzeMJvE4g",
            "uid": null,
            "type": "kit",
            "href": "http://localhost:3000/api/v2/documents/search?ref=WYx9HB8AAB8AmX7z&q=%5B%5B%3Ad+%3D+at%28document.id%2C+%22UjBh0MuvzeMJvE4g%22%29+%5D%5D",
            "tags": [],
            "first_publication_date": null,
            "last_publication_date": null,
            "slugs": [
                "java"
            ],
            "linked_documents": [
                {
                    "id": "UjBh0MuvzeMJvE4g",
                    "tags": [],
                    "type": "kit",
                    "slug": "java",
                    "lang": "en-us"
                }
            ],
            "lang": "en-us",
            "alternate_languages": [],
            "data": {
                "kit": {
                    "name": {
                        "type": "StructuredText",
                        "value": [
                            {
                                "type": "heading1",
                                "text": "Java",
                                "spans": []
                            }
                        ]
                    },
                    "logo": {
                        "type": "Image",
                        "value": {
                            "main": {
                                "dimensions": {
                                    "width": 400,
                                    "height": 400
                                },
                                "alt": null,
                                "copyright": null,
                                "url": "https://prismic-io.s3.amazonaws.com/wroom/c5cb5a0d32ce03e2c410d888b01c44fb3f354562.png"
                            },
                            "views": {
                                "icon": {
                                    "dimensions": {
                                        "width": 150,
                                        "height": 150
                                    },
                                    "alt": null,
                                    "copyright": null,
                                    "url": "https://prismic-io.s3.amazonaws.com/wroom/326ceaee5445c48c0a5403fc4f2384c20ff17172.png"
                                }
                            }
                        }
                    },
                    "description": {
                        "type": "StructuredText",
                        "value": [
                            {
                                "type": "heading1",
                                "text": "Work with Java and prismic.io",
                                "spans": []
                            },
                            {
                                "type": "heading2",
                                "text": "Java kit built and maintained by us",
                                "spans": []
                            },
                            {
                                "type": "paragraph",
                                "text": "We provide a Java library with the minimum required dependency set (Jackson for JSON parsing, JodaTime for date management and Apache Commons collections).",
                                "spans": []
                            },
                            {
                                "type": "heading3",
                                "text": "Maven repository",
                                "spans": []
                            },
                            {
                                "type": "paragraph",
                                "text": "You can find this library in our own Maven repository; read the instructions in the kit's README file to find out how.",
                                "spans": [
                                    {
                                        "start": 77,
                                        "end": 101,
                                        "type": "hyperlink",
                                        "data": {
                                            "type": "Link.web",
                                            "value": {
                                                "url": "https://github.com/prismicio/java-kit#install-the-kit-for-your-project-through-maven"
                                            }
                                        }
                                    }
                                ]
                            },
                            {
                                "type": "heading3",
                                "text": "Source code and documentation",
                                "spans": []
                            },
                            {
                                "type": "paragraph",
                                "text": "Please check the Java Kit GitHub repository for more source code, documentation and issues.",
                                "spans": [
                                    {
                                        "start": 17,
                                        "end": 43,
                                        "type": "hyperlink",
                                        "data": {
                                            "type": "Link.web",
                                            "value": {
                                                "url": "https://github.com/prismicio/java-kit"
                                            }
                                        }
                                    }
                                ]
                            },
                            {
                                "type": "heading2",
                                "text": "Work with Java and Play framework",
                                "spans": []
                            },
                            {
                                "type": "paragraph",
                                "text": "You can use this Java Kit along with the Play framework to create your application. We have a ready to use Starter Kit for Play & Java that you can connect to any repository to bootstrap your project. You can find it here.",
                                "spans": [
                                    {
                                        "start": 41,
                                        "end": 55,
                                        "type": "hyperlink",
                                        "data": {
                                            "type": "Link.web",
                                            "value": {
                                                "url": "http://www.playframework.org/"
                                            }
                                        }
                                    },
                                    {
                                        "start": 201,
                                        "end": 222,
                                        "type": "hyperlink",
                                        "data": {
                                            "type": "Link.web",
                                            "value": {
                                                "url": "https://github.com/prismicio/java-play-starter"
                                            }
                                        }
                                    }
                                ]
                            },
                            {
                                "type": "paragraph",
                                "text": "We also have a complete « Les Bonnes Choses » example built with Play & Java you can look at.",
                                "spans": [
                                    {
                                        "start": 24,
                                        "end": 76,
                                        "type": "hyperlink",
                                        "data": {
                                            "type": "Link.web",
                                            "value": {
                                                "url": "https://github.com/prismicio/java-play-lesbonneschoses"
                                            }
                                        }
                                    }
                                ]
                            },
                            {
                                "type": "heading2",
                                "text": "Work with Java and Spring MVC",
                                "spans": []
                            },
                            {
                                "type": "paragraph",
                                "text": "You can use this Java Kit along with the Spring framework to create your application. We have a ready-to-use Starter Kit for Spring MVC & Java that you can connect to any repository to bootstrap your projec. You can find it here.",
                                "spans": [
                                    {
                                        "start": 41,
                                        "end": 57,
                                        "type": "hyperlink",
                                        "data": {
                                            "type": "Link.web",
                                            "value": {
                                                "url": "http://projects.spring.io/spring-framework"
                                            }
                                        }
                                    },
                                    {
                                        "start": 208,
                                        "end": 229,
                                        "type": "hyperlink",
                                        "data": {
                                            "type": "Link.web",
                                            "value": {
                                                "url": "https://github.com/prismicio/java-springmvc-starter"
                                            }
                                        }
                                    }
                                ]
                            },
                            {
                                "type": "heading2",
                                "text": "Work with Java and the Android SDK",
                                "spans": []
                            },
                            {
                                "type": "paragraph",
                                "text": "If you think that prismic.io is ideal to work with native apps, then you understand an interesting part of how powerful prismic.io is!",
                                "spans": []
                            },
                            {
                                "type": "paragraph",
                                "text": "We think like you, and therefore are currently working on an Android starter project that is to be released soon... Stay tuned!!",
                                "spans": []
                            },
                            {
                                "type": "paragraph",
                                "text": "If you want to know more about it, get in touch with us.",
                                "spans": [
                                    {
                                        "start": 35,
                                        "end": 47,
                                        "type": "hyperlink",
                                        "data": {
                                            "type": "Link.document",
                                            "value": {
                                                "document": {
                                                    "id": "UiYZpsuvzXwFMOzj",
                                                    "type": "article",
                                                    "tags": [],
                                                    "lang": "en-us",
                                                    "slug": "contact"
                                                },
                                                "isBroken": false
                                            }
                                        }
                                    }
                                ]
                            }
                        ]
                    }
                }
            }
        },
        {
            "id": "WHT6MCgAAAUYJMjN",
            "uid": "how-to-query-the-api",
            "type": "doc-page",
            "href": "http://localhost:3000/api/v2/documents/search?ref=WYx9HB8AAB8AmX7z&q=%5B%5B%3Ad+%3D+at%28document.id%2C+%22WHT6MCgAAAUYJMjN%22%29+%5D%5D",
            "tags": [],
            "first_publication_date": "2017-01-26T14:18:02+0000",
            "last_publication_date": "2017-04-11T15:04:03+0000",
            "slugs": [
                "how-to-query-the-api",
                "queries"
            ],
            "linked_documents": [
                {
                    "id": "WHT6MCgAAAUYJMjN",
                    "tags": [],
                    "type": "doc-page",
                    "slug": "how-to-query-the-api",
                    "lang": "en-us"
                },
                {
                    "id": "WHT6MCgAAAUYJMjN",
                    "tags": [],
                    "type": "doc-page",
                    "slug": "how-to-query-the-api",
                    "lang": "en-us"
                },
                {
                    "id": "WHT6MCgAAAUYJMjN",
                    "tags": [],
                    "type": "doc-page",
                    "slug": "how-to-query-the-api",
                    "lang": "en-us"
                }
            ],
            "lang": "en-us",
            "alternate_languages": [],
            "data": {
                "doc-page": {
                    "title": {
                        "type": "StructuredText",
                        "value": [
                            {
                                "type": "heading1",
                                "text": "How to Query the API",
                                "spans": []
                            }
                        ]
                    },
                    "body": {
                        "type": "SliceZone",
                        "value": [
                            {
                                "type": "Slice",
                                "slice_type": "text",
                                "slice_label": null,
                                "value": {
                                    "type": "Group",
                                    "value": [
                                        {
                                            "content": {
                                                "type": "StructuredText",
                                                "value": [
                                                    {
                                                        "type": "paragraph",
                                                        "text": "In order to retrieve the content from your repository, you will need to query the repository API. When you create your query you will specify exactly what it is you are looking for. You could query the repository for all the documents of certain type or retrieve the one specific document you need.",
                                                        "spans": []
                                                    },
                                                    {
                                                        "type": "paragraph",
                                                        "text": "Let’s take a look at how to put together queries for whatever case you need.",
                                                        "spans": []
                                                    },
                                                    {
                                                        "type": "heading2",
                                                        "text": "The Basics",
                                                        "spans": []
                                                    },
                                                    {
                                                        "type": "paragraph",
                                                        "text": "When retrieving content from your prismic.io repository, here’s what a typical query looks like:",
                                                        "spans": []
                                                    }
                                                ]
                                            }
                                        }
                                    ]
                                }
                            },
                            {
                                "type": "Slice",
                                "slice_type": "code",
                                "slice_label": null,
                                "value": {
                                    "type": "Group",
                                    "value": [
                                        {
                                            "technology": {
                                                "type": "Select",
                                                "value": "javascript"
                                            },
                                            "snippet": {
                                                "type": "StructuredText",
                                                "value": [
                                                    {
                                                        "type": "preformatted",
                                                        "text": "api.query(\n    Prismic.Predicates.at('document.type', 'blog-post'),\n    { orderings : '[my.blog-post.date desc]' }\n).then(function(blogPosts) {\n    // blogPosts is the response object, blogPosts.results holds the documents\n});",
                                                        "spans": []
                                                    }
                                                ]
                                            }
                                        },
                                        {
                                            "technology": {
                                                "type": "Select",
                                                "value": "php"
                                            },
                                            "snippet": {
                                                "type": "StructuredText",
                                                "value": [
                                                    {
                                                        "type": "preformatted",
                                                        "text": "$blogPosts = $api->query(\n    Predicates::at('document.type', 'blog-post'),\n    [ \"orderings\" => '[my.blog-post.date desc]' ]\n); \n// $blogPosts contains the response object, $blogPosts->getResults() holds the documents",
                                                        "spans": []
                                                    }
                                                ]
                                            }
                                        },
                                        {
                                            "technology": {
                                                "type": "Select",
                                                "value": "ruby"
                                            },
                                            "snippet": {
                                                "type": "StructuredText",
                                                "value": [
                                                    {
                                                        "type": "preformatted",
                                                        "text": "blog_posts = api.query(\n    Prismic::Predicates.at(\"document.type\", \"blog-post\"),\n    { \"orderings\" => \"[my.blog-post.date desc]\" }\n)\n# blog_posts is the response object, blog_posts.results holds the documents",
                                                        "spans": []
                                                    }
                                                ]
                                            }
                                        }
                                    ]
                                }
                            },
                            {
                                "type": "Slice",
                                "slice_type": "text",
                                "slice_label": null,
                                "value": {
                                    "type": "Group",
                                    "value": [
                                        {
                                            "content": {
                                                "type": "StructuredText",
                                                "value": [
                                                    {
                                                        "type": "paragraph",
                                                        "text": "This is the basic format of a query. In the query you have two parts, the Predicate and the options. ",
                                                        "spans": []
                                                    },
                                                    {
                                                        "type": "heading3",
                                                        "text": "Predicates",
                                                        "spans": []
                                                    },
                                                    {
                                                        "type": "paragraph",
                                                        "text": "In the above example we had the following predicate:",
                                                        "spans": []
                                                    }
                                                ]
                                            }
                                        }
                                    ]
                                }
                            },
                            {
                                "type": "Slice",
                                "slice_type": "code",
                                "slice_label": null,
                                "value": {
                                    "type": "Group",
                                    "value": [
                                        {
                                            "technology": {
                                                "type": "Select",
                                                "value": "javascript"
                                            },
                                            "snippet": {
                                                "type": "StructuredText",
                                                "value": [
                                                    {
                                                        "type": "preformatted",
                                                        "text": "Prismic.Predicates.at('document.type', 'blog-post')",
                                                        "spans": []
                                                    }
                                                ]
                                            }
                                        },
                                        {
                                            "technology": {
                                                "type": "Select",
                                                "value": "php"
                                            },
                                            "snippet": {
                                                "type": "StructuredText",
                                                "value": [
                                                    {
                                                        "type": "preformatted",
                                                        "text": "Predicates::at('document.type', 'blog-post')",
                                                        "spans": []
                                                    }
                                                ]
                                            }
                                        },
                                        {
                                            "technology": {
                                                "type": "Select",
                                                "value": "ruby"
                                            },
                                            "snippet": {
                                                "type": "StructuredText",
                                                "value": [
                                                    {
                                                        "type": "preformatted",
                                                        "text": "Prismic::Predicates.at(\"document.type\", \"blog-post\")",
                                                        "spans": []
                                                    }
                                                ]
                                            }
                                        }
                                    ]
                                }
                            },
                            {
                                "type": "Slice",
                                "slice_type": "text",
                                "slice_label": null,
                                "value": {
                                    "type": "Group",
                                    "value": [
                                        {
                                            "content": {
                                                "type": "StructuredText",
                                                "value": [
                                                    {
                                                        "type": "paragraph",
                                                        "text": "The predicate(s) will define which documents are retrieved from the content repository.  This particular example will retrieve all of the documents of the type “blog-post”. ",
                                                        "spans": []
                                                    },
                                                    {
                                                        "type": "paragraph",
                                                        "text": "The first part, “document.type” is the path, or what the query will be looking for. You will find a list and description of the available paths on the Query Predicates page. The second part the predicate in the above example is “blog-post” this is the value that the query is looking for.",
                                                        "spans": [
                                                            {
                                                                "start": 39,
                                                                "end": 43,
                                                                "type": "strong"
                                                            },
                                                            {
                                                                "start": 151,
                                                                "end": 172,
                                                                "type": "hyperlink",
                                                                "data": {
                                                                    "type": "Link.document",
                                                                    "value": {
                                                                        "document": {
                                                                            "id": "WIibHiUAAB8a7L4T",
                                                                            "type": "doc-page",
                                                                            "tags": [],
                                                                            "lang": "en-us",
                                                                            "slug": "how-query-predicates-work",
                                                                            "uid": "how-query-predicates-work"
                                                                        },
                                                                        "isBroken": false
                                                                    }
                                                                }
                                                            }
                                                        ]
                                                    },
                                                    {
                                                        "type": "paragraph",
                                                        "text": "You can combine more than one predicate together to refine your query. You just need to put all your predicates into a comma-separated array like the following example:",
                                                        "spans": []
                                                    }
                                                ]
                                            }
                                        }
                                    ]
                                }
                            },
                            {
                                "type": "Slice",
                                "slice_type": "code",
                                "slice_label": null,
                                "value": {
                                    "type": "Group",
                                    "value": [
                                        {
                                            "technology": {
                                                "type": "Select",
                                                "value": "javascript"
                                            },
                                            "snippet": {
                                                "type": "StructuredText",
                                                "value": [
                                                    {
                                                        "type": "preformatted",
                                                        "text": "[ Prismic.Predicates.at('document.type', 'blog-post'),\n  Prismic.Predicates.at('document.tags', ['featured']) ]",
                                                        "spans": []
                                                    }
                                                ]
                                            }
                                        },
                                        {
                                            "technology": {
                                                "type": "Select",
                                                "value": "php"
                                            },
                                            "snippet": {
                                                "type": "StructuredText",
                                                "value": [
                                                    {
                                                        "type": "preformatted",
                                                        "text": "[ Predicates::at('document.type', 'blog-post'),\n  Predicates::at('document.tags', ['featured']) ]",
                                                        "spans": []
                                                    }
                                                ]
                                            }
                                        },
                                        {
                                            "technology": {
                                                "type": "Select",
                                                "value": "ruby"
                                            },
                                            "snippet": {
                                                "type": "StructuredText",
                                                "value": [
                                                    {
                                                        "type": "preformatted",
                                                        "text": "[ Prismic::Predicates.at(\"document.type\", \"blog-post\"),\n  Prismic::Predicates.at(\"document.tags\", [\"featured\"]) ]",
                                                        "spans": []
                                                    }
                                                ]
                                            }
                                        }
                                    ]
                                }
                            },
                            {
                                "type": "Slice",
                                "slice_type": "text",
                                "slice_label": null,
                                "value": {
                                    "type": "Group",
                                    "value": [
                                        {
                                            "content": {
                                                "type": "StructuredText",
                                                "value": [
                                                    {
                                                        "type": "paragraph",
                                                        "text": "This particular query will retrieve all the documents of the “blog-post” type that also have the tag “featured”.",
                                                        "spans": []
                                                    },
                                                    {
                                                        "type": "paragraph",
                                                        "text": "You will find a list and description of all the available predicates on the Query Predicates page.",
                                                        "spans": [
                                                            {
                                                                "start": 76,
                                                                "end": 97,
                                                                "type": "hyperlink",
                                                                "data": {
                                                                    "type": "Link.document",
                                                                    "value": {
                                                                        "document": {
                                                                            "id": "WIibHiUAAB8a7L4T",
                                                                            "type": "doc-page",
                                                                            "tags": [],
                                                                            "lang": "en-us",
                                                                            "slug": "how-query-predicates-work",
                                                                            "uid": "how-query-predicates-work"
                                                                        },
                                                                        "isBroken": false
                                                                    }
                                                                }
                                                            }
                                                        ]
                                                    },
                                                    {
                                                        "type": "heading3",
                                                        "text": "Options",
                                                        "spans": []
                                                    },
                                                    {
                                                        "type": "paragraph",
                                                        "text": "In the second part of the query, you can include the options needed for that query. In the above example we had the following options\n",
                                                        "spans": []
                                                    }
                                                ]
                                            }
                                        }
                                    ]
                                }
                            },
                            {
                                "type": "Slice",
                                "slice_type": "code",
                                "slice_label": null,
                                "value": {
                                    "type": "Group",
                                    "value": [
                                        {
                                            "technology": {
                                                "type": "Select",
                                                "value": "javascript"
                                            },
                                            "snippet": {
                                                "type": "StructuredText",
                                                "value": [
                                                    {
                                                        "type": "preformatted",
                                                        "text": "{ orderings : '[my.blog-post.date desc]' }",
                                                        "spans": []
                                                    }
                                                ]
                                            }
                                        },
                                        {
                                            "technology": {
                                                "type": "Select",
                                                "value": "php"
                                            },
                                            "snippet": {
                                                "type": "StructuredText",
                                                "value": [
                                                    {
                                                        "type": "preformatted",
                                                        "text": "[ \"orderings\" => '[my.blog-post.date desc]' ]",
                                                        "spans": []
                                                    }
                                                ]
                                            }
                                        },
                                        {
                                            "technology": {
                                                "type": "Select",
                                                "value": "ruby"
                                            },
                                            "snippet": {
                                                "type": "StructuredText",
                                                "value": [
                                                    {
                                                        "type": "preformatted",
                                                        "text": "{ \"orderings\" => \"[my.blog-post.date desc]\" }",
                                                        "spans": []
                                                    }
                                                ]
                                            }
                                        }
                                    ]
                                }
                            },
                            {
                                "type": "Slice",
                                "slice_type": "text",
                                "slice_label": null,
                                "value": {
                                    "type": "Group",
                                    "value": [
                                        {
                                            "content": {
                                                "type": "StructuredText",
                                                "value": [
                                                    {
                                                        "type": "paragraph",
                                                        "text": "This specifies how the returned list of documents will be ordered. You can include more than one option, by comma separating them as shown below:",
                                                        "spans": []
                                                    }
                                                ]
                                            }
                                        }
                                    ]
                                }
                            },
                            {
                                "type": "Slice",
                                "slice_type": "code",
                                "slice_label": null,
                                "value": {
                                    "type": "Group",
                                    "value": [
                                        {
                                            "technology": {
                                                "type": "Select",
                                                "value": "javascript"
                                            },
                                            "snippet": {
                                                "type": "StructuredText",
                                                "value": [
                                                    {
                                                        "type": "preformatted",
                                                        "text": "{ pageSize : 10, page : 2 }",
                                                        "spans": []
                                                    }
                                                ]
                                            }
                                        },
                                        {
                                            "technology": {
                                                "type": "Select",
                                                "value": "php"
                                            },
                                            "snippet": {
                                                "type": "StructuredText",
                                                "value": [
                                                    {
                                                        "type": "preformatted",
                                                        "text": "[ 'pageSize' => 10, 'page' => 2 ]",
                                                        "spans": []
                                                    }
                                                ]
                                            }
                                        },
                                        {
                                            "technology": {
                                                "type": "Select",
                                                "value": "ruby"
                                            },
                                            "snippet": {
                                                "type": "StructuredText",
                                                "value": [
                                                    {
                                                        "type": "preformatted",
                                                        "text": "{ \"pageSize\" => 10, \"page\" => 2 }",
                                                        "spans": []
                                                    }
                                                ]
                                            }
                                        }
                                    ]
                                }
                            },
                            {
                                "type": "Slice",
                                "slice_type": "text",
                                "slice_label": null,
                                "value": {
                                    "type": "Group",
                                    "value": [
                                        {
                                            "content": {
                                                "type": "StructuredText",
                                                "value": [
                                                    {
                                                        "type": "paragraph",
                                                        "text": "You will find a list and description of all the available options on the Query Predicates page.",
                                                        "spans": [
                                                            {
                                                                "start": 73,
                                                                "end": 94,
                                                                "type": "hyperlink",
                                                                "data": {
                                                                    "type": "Link.document",
                                                                    "value": {
                                                                        "document": {
                                                                            "id": "WIibHiUAAB8a7L4T",
                                                                            "type": "doc-page",
                                                                            "tags": [],
                                                                            "lang": "en-us",
                                                                            "slug": "how-query-predicates-work",
                                                                            "uid": "how-query-predicates-work"
                                                                        },
                                                                        "isBroken": false
                                                                    }
                                                                }
                                                            }
                                                        ]
                                                    },
                                                    {
                                                        "type": "paragraph",
                                                        "text": "Here’s another example of a more advanced query with multiple predicates and multiple options:",
                                                        "spans": []
                                                    }
                                                ]
                                            }
                                        }
                                    ]
                                }
                            },
                            {
                                "type": "Slice",
                                "slice_type": "code",
                                "slice_label": null,
                                "value": {
                                    "type": "Group",
                                    "value": [
                                        {
                                            "technology": {
                                                "type": "Select",
                                                "value": "javascript"
                                            },
                                            "snippet": {
                                                "type": "StructuredText",
                                                "value": [
                                                    {
                                                        "type": "preformatted",
                                                        "text": "api.query([\n    Prismic.Predicates.at('document.type', 'blog-post'),\n    Prismic.Predicates.at('document.tags', ['featured'])\n], { pageSize : 25, page : 1, orderings : '[my.blog-post.date desc]' }\n).then(function(featuredPosts) {\n    // featuredPosts is the response object, featuredPosts.results holds the documents\n});",
                                                        "spans": []
                                                    }
                                                ]
                                            }
                                        },
                                        {
                                            "technology": {
                                                "type": "Select",
                                                "value": "php"
                                            },
                                            "snippet": {
                                                "type": "StructuredText",
                                                "value": [
                                                    {
                                                        "type": "preformatted",
                                                        "text": "$featuredPosts = $api->query(\n    [ Predicates::at('document.type', 'blog-post'),\n      Predicates::at('document.tags', ['featured']) ],\n    [ 'pageSize' => 25, 'page' => 1, 'orderings' => '[my.blog-post.date desc]' ]\n); \n// $featuredPosts contains the response object, $featuredPosts->getResults() holds the documents",
                                                        "spans": []
                                                    }
                                                ]
                                            }
                                        },
                                        {
                                            "technology": {
                                                "type": "Select",
                                                "value": "ruby"
                                            },
                                            "snippet": {
                                                "type": "StructuredText",
                                                "value": [
                                                    {
                                                        "type": "preformatted",
                                                        "text": "featured_posts = api.query(\n    [ Prismic::Predicates.at(\"document.type\", \"blog-post\"),\n      Prismic::Predicates.at(\"document.tags\", [\"featured\"]) ], \n    { \"pageSize\" => 10, \"page\" => 1, \"orderings\" => \"[my.blog-post.date desc]\" }\n)\n# featured_posts is the response object, featured_posts.results holds the documents",
                                                        "spans": []
                                                    }
                                                ]
                                            }
                                        }
                                    ]
                                }
                            },
                            {
                                "type": "Slice",
                                "slice_type": "text",
                                "slice_label": null,
                                "value": {
                                    "type": "Group",
                                    "value": [
                                        {
                                            "content": {
                                                "type": "StructuredText",
                                                "value": [
                                                    {
                                                        "type": "paragraph",
                                                        "text": "Whenever you query your content, you end up with the response object stored in the defined variable.",
                                                        "spans": []
                                                    }
                                                ]
                                            }
                                        }
                                    ]
                                }
                            }
                        ]
                    },
                    "metaTitle": {
                        "type": "StructuredText",
                        "value": [
                            {
                                "type": "heading1",
                                "text": "How to Query the API",
                                "spans": []
                            }
                        ]
                    },
                    "metaDescription": {
                        "type": "StructuredText",
                        "value": [
                            {
                                "type": "paragraph",
                                "text": "Learn about the basics of prismic.io queries.  Querying the API allow you to retrieve your content from your prismic.io repository. ",
                                "spans": []
                            }
                        ]
                    }
                }
            }
        }
    ],
    "version": "4b678d2",
    "license": "All Rights Reserved"
}
