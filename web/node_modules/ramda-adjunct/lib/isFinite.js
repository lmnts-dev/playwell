"use strict";

exports.__esModule = true;
exports["default"] = exports.isFinitePolyfill = void 0;

var _ramda = require("ramda");

var _curry = _interopRequireDefault(require("ramda/src/internal/_curry1"));

var _isFunction = _interopRequireDefault(require("./isFunction"));

var _Number = _interopRequireDefault(require("./internal/polyfills/Number.isFinite"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

var isFinitePolyfill = (0, _curry["default"])(_Number["default"]);
/**
 * Checks whether the passed value is a finite `Number`.
 *
 * @func isFinite
 * @memberOf RA
 * @since {@link https://char0n.github.io/ramda-adjunct/0.7.0|v0.7.0}
 * @category Type
 * @sig * -> Boolean
 * @param {*} val The value to test
 * @return {boolean}
 * @see {@link RA.isNotFinite|isNotFinite}
 * @example
 *
 * RA.isFinite(Infinity); //=> false
 * RA.isFinite(NaN); //=> false
 * RA.isFinite(-Infinity); //=> false
 *
 * RA.isFinite(0); // true
 * RA.isFinite(2e64); // true
 *
 * RA.isFinite('0');  // => false
 *                    // would've been true with global isFinite('0')
 * RA.isFinite(null); // => false
 *                    // would've been true with global isFinite(null)
 */

exports.isFinitePolyfill = isFinitePolyfill;

var _isFinite = (0, _isFunction["default"])(Number.isFinite) ? (0, _curry["default"])((0, _ramda.bind)(Number.isFinite, Number)) : isFinitePolyfill;

var _default = _isFinite;
exports["default"] = _default;