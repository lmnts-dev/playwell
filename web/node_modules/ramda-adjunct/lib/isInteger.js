"use strict";

exports.__esModule = true;
exports["default"] = exports.isIntegerPolyfill = void 0;

var _ramda = require("ramda");

var _curry = _interopRequireDefault(require("ramda/src/internal/_curry1"));

var _isFunction = _interopRequireDefault(require("./isFunction"));

var _Number = _interopRequireDefault(require("./internal/polyfills/Number.isInteger"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

var isIntegerPolyfill = (0, _curry["default"])(_Number["default"]);
/**
 * Checks whether the passed value is an `integer`.
 *
 * @func isInteger
 * @memberOf RA
 * @since {@link https://char0n.github.io/ramda-adjunct/0.7.0|v0.7.0}
 * @category Type
 * @sig * -> Boolean
 * @param {*} val The value to test
 * @return {boolean}
 * @see {@link RA.isNotInteger|isNotInteger}
 * @example
 *
 * RA.isInteger(0); //=> true
 * RA.isInteger(1); //=> true
 * RA.isInteger(-100000); //=> true
 *
 * RA.isInteger(0.1);       //=> false
 * RA.isInteger(Math.PI);   //=> false
 *
 * RA.isInteger(NaN);       //=> false
 * RA.isInteger(Infinity);  //=> false
 * RA.isInteger(-Infinity); //=> false
 * RA.isInteger('10');      //=> false
 * RA.isInteger(true);      //=> false
 * RA.isInteger(false);     //=> false
 * RA.isInteger([1]);       //=> false
 */

exports.isIntegerPolyfill = isIntegerPolyfill;
var isInteger = (0, _isFunction["default"])(Number.isInteger) ? (0, _curry["default"])((0, _ramda.bind)(Number.isInteger, Number)) : isIntegerPolyfill;
var _default = isInteger;
exports["default"] = _default;