"use strict";

var _ = require("lodash");

var fs = require("fs");

var React = require("react");

var _require = require("guess-webpack/api"),
    guess = _require.guess;

function urlJoin() {
  for (var _len = arguments.length, parts = new Array(_len), _key = 0; _key < _len; _key++) {
    parts[_key] = arguments[_key];
  }

  return parts.reduce(function (r, next) {
    var segment = next == null ? "" : String(next).replace(/^\/+/, "");
    return segment ? r.replace(/\/$/, "") + "/" + segment : r;
  }, "");
}

var s;

var readStats = function readStats() {
  if (s) {
    return s;
  } else {
    s = JSON.parse(fs.readFileSync(process.cwd() + "/public/webpack.stats.json", "utf-8"));
    return s;
  }
};

exports.onRenderBody = function (_ref, pluginOptions) {
  var setHeadComponents = _ref.setHeadComponents,
      pathname = _ref.pathname,
      pathPrefix = _ref.pathPrefix,
      loadPageDataSync = _ref.loadPageDataSync;

  if (process.env.NODE_ENV === "production" || process.env.NODE_ENV === "test") {
    var stats = readStats();
    var matchedPaths = Object.keys(guess({
      path: pathname,
      threshold: pluginOptions.minimumThreshold
    }));

    if (!_.isEmpty(matchedPaths)) {
      var matchedPages = matchedPaths.map(loadPageDataSync);
      var componentUrls = [];
      matchedPages.forEach(function (p) {
        if (p && p.componentChunkName) {
          var fetchKey = "assetsByChunkName[" + p.componentChunkName + "]";

          var chunks = _.get(stats, fetchKey);

          componentUrls = [].concat(componentUrls, chunks);
        }
      });
      componentUrls = _.uniq(componentUrls);
      var components = componentUrls.map(function (c) {
        return React.createElement("Link", {
          as: c.slice(-2) === "js" ? "script" : undefined,
          rel: c.slice(-2) === "js" ? "prefetch" : "prefetch alternate stylesheet",
          key: c,
          href: urlJoin(pathPrefix, c)
        });
      });
      setHeadComponents(components);
    }

    return true;
  }

  return false;
};