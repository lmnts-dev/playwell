import { GraphQLFieldConfig } from 'gatsby/graphql';
import { GatsbyContext, GatsbyOnNodeTypeContext, GatsbyResolversCreator } from './types/gatsby';
export interface PluginConfig {
    projectId: string;
    dataset: string;
    token?: string;
    version?: string;
    graphqlApi: string;
    overlayDrafts?: boolean;
    watchMode?: boolean;
}
export declare const onPreBootstrap: (context: GatsbyContext, pluginConfig: PluginConfig) => Promise<void>;
export declare const createResolvers: (actions: {
    createResolvers: GatsbyResolversCreator;
}, pluginConfig: PluginConfig) => void;
export declare const sourceNodes: (context: GatsbyContext, pluginConfig: PluginConfig) => Promise<void>;
export declare const onPreExtractQueries: (context: GatsbyContext, pluginConfig: PluginConfig) => Promise<void>;
export declare const setFieldsOnGraphQLNodeType: (context: GatsbyContext & GatsbyOnNodeTypeContext, pluginConfig: PluginConfig) => Promise<{
    [key: string]: GraphQLFieldConfig<any, any, {
        [argName: string]: any;
    }>;
}>;
