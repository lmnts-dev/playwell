"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const lodash_1 = require("lodash");
const graphql_1 = require("gatsby/graphql");
const normalize_1 = require("./normalize");
const conflictPrefix = 'sanity';
const builtins = ['ID', 'String', 'Boolean', 'Int', 'Float', 'JSON', 'DateTime', 'Date'];
const wantedNodeTypes = ['ObjectTypeDefinition', 'UnionTypeDefinition', 'InterfaceTypeDefinition'];
exports.rewriteGraphQLSchema = (schemaSdl, config) => {
    const ast = graphql_1.parse(schemaSdl);
    const transformedAst = transformAst(ast, config);
    const transformed = graphql_1.print(transformedAst);
    return transformed;
};
function transformAst(ast, config) {
    return Object.assign({}, ast, { definitions: ast.definitions.filter(isWantedAstNode).map(transformDefinitionNode) });
}
function isWantedAstNode(astNode) {
    const node = astNode;
    return wantedNodeTypes.includes(node.kind) && node.name.value !== 'RootQuery';
}
function transformDefinitionNode(node) {
    switch (node.kind) {
        case 'ObjectTypeDefinition':
            return transformObjectTypeDefinition(node);
        case 'UnionTypeDefinition':
            return transformUnionTypeDefinition(node);
        case 'InterfaceTypeDefinition':
            return transformInterfaceTypeDefinition(node);
        default:
            return node;
    }
}
function transformObjectTypeDefinition(node) {
    const fields = node.fields || [];
    const jsonTargets = fields.map(getJsonAliasTargets).filter(Boolean);
    const blockFields = jsonTargets.map(makeBlockField);
    const interfaces = (node.interfaces || []).map(maybeRewriteType);
    const isDocumentType = interfaces.some(item => item.kind === 'NamedType' && item.name.value === 'SanityDocument');
    // Implement Gatsby node interface if it is a document
    if (isDocumentType) {
        interfaces.push({ kind: 'NamedType', name: { kind: 'Name', value: 'Node' } });
    }
    return Object.assign({}, node, { name: Object.assign({}, node.name, { value: getTypeName(node.name.value) }), interfaces, directives: [{ kind: 'Directive', name: { kind: 'Name', value: 'dontInfer' } }], fields: [
            ...fields.filter(field => !getJsonAliasTargets(field)).map(transformFieldNodeAst),
            ...blockFields,
        ] });
}
function transformUnionTypeDefinition(node) {
    return Object.assign({}, node, { types: (node.types || []).map(maybeRewriteType), name: Object.assign({}, node.name, { value: getTypeName(node.name.value) }) });
}
function transformInterfaceTypeDefinition(node) {
    const fields = node.fields || [];
    return Object.assign({}, node, { fields: fields.map(transformFieldNodeAst), name: Object.assign({}, node.name, { value: getTypeName(node.name.value) }) });
}
function unwrapType(typeNode) {
    if (['NonNullType', 'ListType'].includes(typeNode.kind)) {
        const wrappedType = typeNode;
        return unwrapType(wrappedType.type);
    }
    return typeNode;
}
function getJsonAliasTargets(field) {
    const alias = (field.directives || []).find(dir => dir.name.value === 'jsonAlias');
    if (!alias) {
        return null;
    }
    const forArg = (alias.arguments || []).find(arg => arg.name.value === 'for');
    if (!forArg) {
        return null;
    }
    return graphql_1.valueFromAST(forArg.value, graphql_1.GraphQLString, {});
}
function makeBlockField(name) {
    return {
        kind: 'FieldDefinition',
        name: {
            kind: 'Name',
            value: name,
        },
        arguments: [],
        directives: [],
        type: {
            kind: 'ListType',
            type: {
                kind: 'NamedType',
                name: {
                    kind: 'Name',
                    value: 'SanityBlock',
                },
            },
        },
    };
}
function makeNullable(nodeType) {
    if (nodeType.kind === 'NamedType') {
        return maybeRewriteType(nodeType);
    }
    if (nodeType.kind === 'ListType') {
        const unwrapped = maybeRewriteType(unwrapType(nodeType));
        return {
            kind: 'ListType',
            type: makeNullable(unwrapped),
        };
    }
    return maybeRewriteType(nodeType.type);
}
function transformFieldNodeAst(node) {
    const field = Object.assign({}, node, { name: maybeRewriteFieldName(node), type: rewireIdType(makeNullable(node.type)), description: undefined, directives: [] });
    if (field.type.kind === 'NamedType' && field.type.name.value === 'Date') {
        field.directives.push({ kind: 'Directive', name: { kind: 'Name', value: 'dateformat' } });
    }
    return field;
}
function rewireIdType(nodeType) {
    if (nodeType.kind === 'NamedType' && nodeType.name.value === 'ID') {
        return Object.assign({}, nodeType, { name: { kind: 'Name', value: 'String' } });
    }
    return nodeType;
}
function maybeRewriteType(nodeType) {
    const type = nodeType;
    if (typeof type.name === 'undefined') {
        return nodeType;
    }
    // Gatsby has a date type, but not a datetime, so rewire it
    if (type.name.value === 'DateTime') {
        return Object.assign({}, type, { name: { kind: 'Name', value: 'Date' } });
    }
    if (builtins.includes(type.name.value)) {
        return type;
    }
    return Object.assign({}, type, { name: { kind: 'Name', value: getTypeName(type.name.value) } });
}
function maybeRewriteFieldName(field) {
    if (!normalize_1.RESTRICTED_NODE_FIELDS.includes(field.name.value)) {
        return field.name;
    }
    return Object.assign({}, field.name, { value: `${conflictPrefix}${lodash_1.upperFirst(field.name.value)}` });
}
function getTypeName(name) {
    return name.startsWith('Sanity') ? name : `Sanity${name}`;
}
//# sourceMappingURL=rewriteGraphQLSchema.js.map